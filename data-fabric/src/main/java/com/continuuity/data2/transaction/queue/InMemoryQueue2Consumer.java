package com.continuuity.data2.transaction.queue;

import com.continuuity.common.queue.QueueName;
import com.continuuity.common.utils.ImmutablePair;
import com.continuuity.data2.queue.ConsumerConfig;
import com.continuuity.data2.queue.DequeueResult;
import com.continuuity.data2.queue.DequeueStrategy;
import com.continuuity.data2.queue.Queue2Consumer;
import com.continuuity.data2.transaction.Transaction;
import com.continuuity.data2.transaction.TransactionAware;
import com.google.common.collect.ImmutableList;

import java.io.IOException;
import java.util.Collection;
import java.util.List;

/**
 * Consumer for an in-memory queue.
 */
public class InMemoryQueue2Consumer implements Queue2Consumer, TransactionAware {

  Transaction tx;
  boolean committed = false;
  final InMemoryQueue queue;
  final ConsumerConfig config;
  List<InMemoryQueue.Key> dequeuedKeys;

  public InMemoryQueue2Consumer(QueueName queueName, ConsumerConfig config) {
    this.queue = InMemoryQueueService.getQueue(queueName);
    this.config = config;
  }

  @Override
  public DequeueResult dequeue() throws IOException {
    return dequeue(1);
  }

  @Override
  public DequeueResult dequeue(int maxBatchSize) throws IOException {
    ImmutablePair<List<InMemoryQueue.Key>, List<byte[]>> result = queue.dequeue(tx, config, maxBatchSize);
    if (result == null) {
      return DequeueResult.EMPTY_RESULT;
    } else {
      dequeuedKeys = result.getFirst();
      return new InMemoryDequeueResult(result.getSecond());
    }
  }

  @Override
  public void startTx(Transaction tx) {
    dequeuedKeys = null;
    committed = false;
  }

  @Override
  public Collection<byte[]> getTxChanges() {
    return null; // no conflicts generated by queues
  }

  @Override
  public boolean commitTx() throws Exception {
    queue.ack(dequeuedKeys, config);
    committed = true;
    return true;
  }

  @Override
  public void postTxCommit() {
    // TODO do eviction here?
  }

  @Override
  public boolean rollbackTx() throws Exception {
    if (committed || DequeueStrategy.FIFO.equals(config.getDequeueStrategy())) {
      if (dequeuedKeys != null) {
        queue.undoDequeue(dequeuedKeys, config);
      }
    }
    dequeuedKeys = null;
    return true;
  }

  private static final class InMemoryDequeueResult implements DequeueResult {

    private final List<byte[]> data;

    InMemoryDequeueResult(Collection<byte[]> entries) {
      this.data = ImmutableList.copyOf(entries);
    }

    @Override
    public boolean isEmpty() {
      return data.isEmpty();
    }

    @Override
    public Collection<byte[]> getData() {
      return data;
    }
  }

}
