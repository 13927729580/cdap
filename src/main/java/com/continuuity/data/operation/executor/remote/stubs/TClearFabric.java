/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.continuuity.data.operation.executor.remote.stubs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TClearFabric implements org.apache.thrift.TBase<TClearFabric, TClearFabric._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TClearFabric");

  private static final org.apache.thrift.protocol.TField CLEAR_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("clearData", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField CLEAR_QUEUES_FIELD_DESC = new org.apache.thrift.protocol.TField("clearQueues", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField CLEAR_STREAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("clearStreams", org.apache.thrift.protocol.TType.BOOL, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TClearFabricStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TClearFabricTupleSchemeFactory());
  }

  public boolean clearData; // required
  public boolean clearQueues; // required
  public boolean clearStreams; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLEAR_DATA((short)1, "clearData"),
    CLEAR_QUEUES((short)2, "clearQueues"),
    CLEAR_STREAMS((short)3, "clearStreams");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLEAR_DATA
          return CLEAR_DATA;
        case 2: // CLEAR_QUEUES
          return CLEAR_QUEUES;
        case 3: // CLEAR_STREAMS
          return CLEAR_STREAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CLEARDATA_ISSET_ID = 0;
  private static final int __CLEARQUEUES_ISSET_ID = 1;
  private static final int __CLEARSTREAMS_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLEAR_DATA, new org.apache.thrift.meta_data.FieldMetaData("clearData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CLEAR_QUEUES, new org.apache.thrift.meta_data.FieldMetaData("clearQueues", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CLEAR_STREAMS, new org.apache.thrift.meta_data.FieldMetaData("clearStreams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TClearFabric.class, metaDataMap);
  }

  public TClearFabric() {
  }

  public TClearFabric(
    boolean clearData,
    boolean clearQueues,
    boolean clearStreams)
  {
    this();
    this.clearData = clearData;
    setClearDataIsSet(true);
    this.clearQueues = clearQueues;
    setClearQueuesIsSet(true);
    this.clearStreams = clearStreams;
    setClearStreamsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TClearFabric(TClearFabric other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.clearData = other.clearData;
    this.clearQueues = other.clearQueues;
    this.clearStreams = other.clearStreams;
  }

  public TClearFabric deepCopy() {
    return new TClearFabric(this);
  }

  @Override
  public void clear() {
    setClearDataIsSet(false);
    this.clearData = false;
    setClearQueuesIsSet(false);
    this.clearQueues = false;
    setClearStreamsIsSet(false);
    this.clearStreams = false;
  }

  public boolean isClearData() {
    return this.clearData;
  }

  public TClearFabric setClearData(boolean clearData) {
    this.clearData = clearData;
    setClearDataIsSet(true);
    return this;
  }

  public void unsetClearData() {
    __isset_bit_vector.clear(__CLEARDATA_ISSET_ID);
  }

  /** Returns true if field clearData is set (has been assigned a value) and false otherwise */
  public boolean isSetClearData() {
    return __isset_bit_vector.get(__CLEARDATA_ISSET_ID);
  }

  public void setClearDataIsSet(boolean value) {
    __isset_bit_vector.set(__CLEARDATA_ISSET_ID, value);
  }

  public boolean isClearQueues() {
    return this.clearQueues;
  }

  public TClearFabric setClearQueues(boolean clearQueues) {
    this.clearQueues = clearQueues;
    setClearQueuesIsSet(true);
    return this;
  }

  public void unsetClearQueues() {
    __isset_bit_vector.clear(__CLEARQUEUES_ISSET_ID);
  }

  /** Returns true if field clearQueues is set (has been assigned a value) and false otherwise */
  public boolean isSetClearQueues() {
    return __isset_bit_vector.get(__CLEARQUEUES_ISSET_ID);
  }

  public void setClearQueuesIsSet(boolean value) {
    __isset_bit_vector.set(__CLEARQUEUES_ISSET_ID, value);
  }

  public boolean isClearStreams() {
    return this.clearStreams;
  }

  public TClearFabric setClearStreams(boolean clearStreams) {
    this.clearStreams = clearStreams;
    setClearStreamsIsSet(true);
    return this;
  }

  public void unsetClearStreams() {
    __isset_bit_vector.clear(__CLEARSTREAMS_ISSET_ID);
  }

  /** Returns true if field clearStreams is set (has been assigned a value) and false otherwise */
  public boolean isSetClearStreams() {
    return __isset_bit_vector.get(__CLEARSTREAMS_ISSET_ID);
  }

  public void setClearStreamsIsSet(boolean value) {
    __isset_bit_vector.set(__CLEARSTREAMS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLEAR_DATA:
      if (value == null) {
        unsetClearData();
      } else {
        setClearData((Boolean)value);
      }
      break;

    case CLEAR_QUEUES:
      if (value == null) {
        unsetClearQueues();
      } else {
        setClearQueues((Boolean)value);
      }
      break;

    case CLEAR_STREAMS:
      if (value == null) {
        unsetClearStreams();
      } else {
        setClearStreams((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLEAR_DATA:
      return Boolean.valueOf(isClearData());

    case CLEAR_QUEUES:
      return Boolean.valueOf(isClearQueues());

    case CLEAR_STREAMS:
      return Boolean.valueOf(isClearStreams());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLEAR_DATA:
      return isSetClearData();
    case CLEAR_QUEUES:
      return isSetClearQueues();
    case CLEAR_STREAMS:
      return isSetClearStreams();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TClearFabric)
      return this.equals((TClearFabric)that);
    return false;
  }

  public boolean equals(TClearFabric that) {
    if (that == null)
      return false;

    boolean this_present_clearData = true;
    boolean that_present_clearData = true;
    if (this_present_clearData || that_present_clearData) {
      if (!(this_present_clearData && that_present_clearData))
        return false;
      if (this.clearData != that.clearData)
        return false;
    }

    boolean this_present_clearQueues = true;
    boolean that_present_clearQueues = true;
    if (this_present_clearQueues || that_present_clearQueues) {
      if (!(this_present_clearQueues && that_present_clearQueues))
        return false;
      if (this.clearQueues != that.clearQueues)
        return false;
    }

    boolean this_present_clearStreams = true;
    boolean that_present_clearStreams = true;
    if (this_present_clearStreams || that_present_clearStreams) {
      if (!(this_present_clearStreams && that_present_clearStreams))
        return false;
      if (this.clearStreams != that.clearStreams)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TClearFabric other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TClearFabric typedOther = (TClearFabric)other;

    lastComparison = Boolean.valueOf(isSetClearData()).compareTo(typedOther.isSetClearData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClearData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clearData, typedOther.clearData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClearQueues()).compareTo(typedOther.isSetClearQueues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClearQueues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clearQueues, typedOther.clearQueues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClearStreams()).compareTo(typedOther.isSetClearStreams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClearStreams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clearStreams, typedOther.clearStreams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TClearFabric(");
    boolean first = true;

    sb.append("clearData:");
    sb.append(this.clearData);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clearQueues:");
    sb.append(this.clearQueues);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clearStreams:");
    sb.append(this.clearStreams);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TClearFabricStandardSchemeFactory implements SchemeFactory {
    public TClearFabricStandardScheme getScheme() {
      return new TClearFabricStandardScheme();
    }
  }

  private static class TClearFabricStandardScheme extends StandardScheme<TClearFabric> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TClearFabric struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLEAR_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.clearData = iprot.readBool();
              struct.setClearDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLEAR_QUEUES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.clearQueues = iprot.readBool();
              struct.setClearQueuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CLEAR_STREAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.clearStreams = iprot.readBool();
              struct.setClearStreamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TClearFabric struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CLEAR_DATA_FIELD_DESC);
      oprot.writeBool(struct.clearData);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CLEAR_QUEUES_FIELD_DESC);
      oprot.writeBool(struct.clearQueues);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CLEAR_STREAMS_FIELD_DESC);
      oprot.writeBool(struct.clearStreams);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TClearFabricTupleSchemeFactory implements SchemeFactory {
    public TClearFabricTupleScheme getScheme() {
      return new TClearFabricTupleScheme();
    }
  }

  private static class TClearFabricTupleScheme extends TupleScheme<TClearFabric> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TClearFabric struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetClearData()) {
        optionals.set(0);
      }
      if (struct.isSetClearQueues()) {
        optionals.set(1);
      }
      if (struct.isSetClearStreams()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetClearData()) {
        oprot.writeBool(struct.clearData);
      }
      if (struct.isSetClearQueues()) {
        oprot.writeBool(struct.clearQueues);
      }
      if (struct.isSetClearStreams()) {
        oprot.writeBool(struct.clearStreams);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TClearFabric struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.clearData = iprot.readBool();
        struct.setClearDataIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clearQueues = iprot.readBool();
        struct.setClearQueuesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.clearStreams = iprot.readBool();
        struct.setClearStreamsIsSet(true);
      }
    }
  }

}

