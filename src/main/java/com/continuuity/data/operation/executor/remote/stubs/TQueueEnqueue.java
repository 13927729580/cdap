/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.continuuity.data.operation.executor.remote.stubs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TQueueEnqueue implements org.apache.thrift.TBase<TQueueEnqueue, TQueueEnqueue._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TQueueEnqueue");

  private static final org.apache.thrift.protocol.TField QUEUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("queueName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField HEADER_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("headerVersion", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField HEADERS_FIELD_DESC = new org.apache.thrift.protocol.TField("headers", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField OUTPUT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("outputName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField PRODUCER_FIELD_DESC = new org.apache.thrift.protocol.TField("producer", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TQueueEnqueueStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TQueueEnqueueTupleSchemeFactory());
  }

  public ByteBuffer queueName; // required
  public ByteBuffer value; // required
  public int headerVersion; // required
  public ByteBuffer headers; // required
  public String outputName; // required
  public long id; // required
  public TQueueProducer producer; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUEUE_NAME((short)1, "queueName"),
    VALUE((short)2, "value"),
    HEADER_VERSION((short)3, "headerVersion"),
    HEADERS((short)4, "headers"),
    OUTPUT_NAME((short)5, "outputName"),
    ID((short)6, "id"),
    PRODUCER((short)7, "producer");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUEUE_NAME
          return QUEUE_NAME;
        case 2: // VALUE
          return VALUE;
        case 3: // HEADER_VERSION
          return HEADER_VERSION;
        case 4: // HEADERS
          return HEADERS;
        case 5: // OUTPUT_NAME
          return OUTPUT_NAME;
        case 6: // ID
          return ID;
        case 7: // PRODUCER
          return PRODUCER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HEADERVERSION_ISSET_ID = 0;
  private static final int __ID_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);
  private _Fields optionals[] = {_Fields.PRODUCER};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUEUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("queueName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.HEADER_VERSION, new org.apache.thrift.meta_data.FieldMetaData("headerVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEADERS, new org.apache.thrift.meta_data.FieldMetaData("headers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.OUTPUT_NAME, new org.apache.thrift.meta_data.FieldMetaData("outputName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRODUCER, new org.apache.thrift.meta_data.FieldMetaData("producer", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQueueProducer.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TQueueEnqueue.class, metaDataMap);
  }

  public TQueueEnqueue() {
  }

  public TQueueEnqueue(
    ByteBuffer queueName,
    ByteBuffer value,
    int headerVersion,
    ByteBuffer headers,
    String outputName,
    long id)
  {
    this();
    this.queueName = queueName;
    this.value = value;
    this.headerVersion = headerVersion;
    setHeaderVersionIsSet(true);
    this.headers = headers;
    this.outputName = outputName;
    this.id = id;
    setIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TQueueEnqueue(TQueueEnqueue other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetQueueName()) {
      this.queueName = org.apache.thrift.TBaseHelper.copyBinary(other.queueName);
;
    }
    if (other.isSetValue()) {
      this.value = org.apache.thrift.TBaseHelper.copyBinary(other.value);
;
    }
    this.headerVersion = other.headerVersion;
    if (other.isSetHeaders()) {
      this.headers = org.apache.thrift.TBaseHelper.copyBinary(other.headers);
;
    }
    if (other.isSetOutputName()) {
      this.outputName = other.outputName;
    }
    this.id = other.id;
    if (other.isSetProducer()) {
      this.producer = new TQueueProducer(other.producer);
    }
  }

  public TQueueEnqueue deepCopy() {
    return new TQueueEnqueue(this);
  }

  @Override
  public void clear() {
    this.queueName = null;
    this.value = null;
    setHeaderVersionIsSet(false);
    this.headerVersion = 0;
    this.headers = null;
    this.outputName = null;
    setIdIsSet(false);
    this.id = 0;
    this.producer = null;
  }

  public byte[] getQueueName() {
    setQueueName(org.apache.thrift.TBaseHelper.rightSize(queueName));
    return queueName == null ? null : queueName.array();
  }

  public ByteBuffer bufferForQueueName() {
    return queueName;
  }

  public TQueueEnqueue setQueueName(byte[] queueName) {
    setQueueName(queueName == null ? (ByteBuffer)null : ByteBuffer.wrap(queueName));
    return this;
  }

  public TQueueEnqueue setQueueName(ByteBuffer queueName) {
    this.queueName = queueName;
    return this;
  }

  public void unsetQueueName() {
    this.queueName = null;
  }

  /** Returns true if field queueName is set (has been assigned a value) and false otherwise */
  public boolean isSetQueueName() {
    return this.queueName != null;
  }

  public void setQueueNameIsSet(boolean value) {
    if (!value) {
      this.queueName = null;
    }
  }

  public byte[] getValue() {
    setValue(org.apache.thrift.TBaseHelper.rightSize(value));
    return value == null ? null : value.array();
  }

  public ByteBuffer bufferForValue() {
    return value;
  }

  public TQueueEnqueue setValue(byte[] value) {
    setValue(value == null ? (ByteBuffer)null : ByteBuffer.wrap(value));
    return this;
  }

  public TQueueEnqueue setValue(ByteBuffer value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  public int getHeaderVersion() {
    return this.headerVersion;
  }

  public TQueueEnqueue setHeaderVersion(int headerVersion) {
    this.headerVersion = headerVersion;
    setHeaderVersionIsSet(true);
    return this;
  }

  public void unsetHeaderVersion() {
    __isset_bit_vector.clear(__HEADERVERSION_ISSET_ID);
  }

  /** Returns true if field headerVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetHeaderVersion() {
    return __isset_bit_vector.get(__HEADERVERSION_ISSET_ID);
  }

  public void setHeaderVersionIsSet(boolean value) {
    __isset_bit_vector.set(__HEADERVERSION_ISSET_ID, value);
  }

  public byte[] getHeaders() {
    setHeaders(org.apache.thrift.TBaseHelper.rightSize(headers));
    return headers == null ? null : headers.array();
  }

  public ByteBuffer bufferForHeaders() {
    return headers;
  }

  public TQueueEnqueue setHeaders(byte[] headers) {
    setHeaders(headers == null ? (ByteBuffer)null : ByteBuffer.wrap(headers));
    return this;
  }

  public TQueueEnqueue setHeaders(ByteBuffer headers) {
    this.headers = headers;
    return this;
  }

  public void unsetHeaders() {
    this.headers = null;
  }

  /** Returns true if field headers is set (has been assigned a value) and false otherwise */
  public boolean isSetHeaders() {
    return this.headers != null;
  }

  public void setHeadersIsSet(boolean value) {
    if (!value) {
      this.headers = null;
    }
  }

  public String getOutputName() {
    return this.outputName;
  }

  public TQueueEnqueue setOutputName(String outputName) {
    this.outputName = outputName;
    return this;
  }

  public void unsetOutputName() {
    this.outputName = null;
  }

  /** Returns true if field outputName is set (has been assigned a value) and false otherwise */
  public boolean isSetOutputName() {
    return this.outputName != null;
  }

  public void setOutputNameIsSet(boolean value) {
    if (!value) {
      this.outputName = null;
    }
  }

  public long getId() {
    return this.id;
  }

  public TQueueEnqueue setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public TQueueProducer getProducer() {
    return this.producer;
  }

  public TQueueEnqueue setProducer(TQueueProducer producer) {
    this.producer = producer;
    return this;
  }

  public void unsetProducer() {
    this.producer = null;
  }

  /** Returns true if field producer is set (has been assigned a value) and false otherwise */
  public boolean isSetProducer() {
    return this.producer != null;
  }

  public void setProducerIsSet(boolean value) {
    if (!value) {
      this.producer = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QUEUE_NAME:
      if (value == null) {
        unsetQueueName();
      } else {
        setQueueName((ByteBuffer)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((ByteBuffer)value);
      }
      break;

    case HEADER_VERSION:
      if (value == null) {
        unsetHeaderVersion();
      } else {
        setHeaderVersion((Integer)value);
      }
      break;

    case HEADERS:
      if (value == null) {
        unsetHeaders();
      } else {
        setHeaders((ByteBuffer)value);
      }
      break;

    case OUTPUT_NAME:
      if (value == null) {
        unsetOutputName();
      } else {
        setOutputName((String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case PRODUCER:
      if (value == null) {
        unsetProducer();
      } else {
        setProducer((TQueueProducer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QUEUE_NAME:
      return getQueueName();

    case VALUE:
      return getValue();

    case HEADER_VERSION:
      return Integer.valueOf(getHeaderVersion());

    case HEADERS:
      return getHeaders();

    case OUTPUT_NAME:
      return getOutputName();

    case ID:
      return Long.valueOf(getId());

    case PRODUCER:
      return getProducer();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QUEUE_NAME:
      return isSetQueueName();
    case VALUE:
      return isSetValue();
    case HEADER_VERSION:
      return isSetHeaderVersion();
    case HEADERS:
      return isSetHeaders();
    case OUTPUT_NAME:
      return isSetOutputName();
    case ID:
      return isSetId();
    case PRODUCER:
      return isSetProducer();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TQueueEnqueue)
      return this.equals((TQueueEnqueue)that);
    return false;
  }

  public boolean equals(TQueueEnqueue that) {
    if (that == null)
      return false;

    boolean this_present_queueName = true && this.isSetQueueName();
    boolean that_present_queueName = true && that.isSetQueueName();
    if (this_present_queueName || that_present_queueName) {
      if (!(this_present_queueName && that_present_queueName))
        return false;
      if (!this.queueName.equals(that.queueName))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_headerVersion = true;
    boolean that_present_headerVersion = true;
    if (this_present_headerVersion || that_present_headerVersion) {
      if (!(this_present_headerVersion && that_present_headerVersion))
        return false;
      if (this.headerVersion != that.headerVersion)
        return false;
    }

    boolean this_present_headers = true && this.isSetHeaders();
    boolean that_present_headers = true && that.isSetHeaders();
    if (this_present_headers || that_present_headers) {
      if (!(this_present_headers && that_present_headers))
        return false;
      if (!this.headers.equals(that.headers))
        return false;
    }

    boolean this_present_outputName = true && this.isSetOutputName();
    boolean that_present_outputName = true && that.isSetOutputName();
    if (this_present_outputName || that_present_outputName) {
      if (!(this_present_outputName && that_present_outputName))
        return false;
      if (!this.outputName.equals(that.outputName))
        return false;
    }

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_producer = true && this.isSetProducer();
    boolean that_present_producer = true && that.isSetProducer();
    if (this_present_producer || that_present_producer) {
      if (!(this_present_producer && that_present_producer))
        return false;
      if (!this.producer.equals(that.producer))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TQueueEnqueue other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TQueueEnqueue typedOther = (TQueueEnqueue)other;

    lastComparison = Boolean.valueOf(isSetQueueName()).compareTo(typedOther.isSetQueueName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueueName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueName, typedOther.queueName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeaderVersion()).compareTo(typedOther.isSetHeaderVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeaderVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headerVersion, typedOther.headerVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeaders()).compareTo(typedOther.isSetHeaders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeaders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headers, typedOther.headers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutputName()).compareTo(typedOther.isSetOutputName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutputName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputName, typedOther.outputName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProducer()).compareTo(typedOther.isSetProducer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProducer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.producer, typedOther.producer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TQueueEnqueue(");
    boolean first = true;

    sb.append("queueName:");
    if (this.queueName == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.queueName, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("value:");
    if (this.value == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.value, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("headerVersion:");
    sb.append(this.headerVersion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("headers:");
    if (this.headers == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.headers, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("outputName:");
    if (this.outputName == null) {
      sb.append("null");
    } else {
      sb.append(this.outputName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (isSetProducer()) {
      if (!first) sb.append(", ");
      sb.append("producer:");
      if (this.producer == null) {
        sb.append("null");
      } else {
        sb.append(this.producer);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TQueueEnqueueStandardSchemeFactory implements SchemeFactory {
    public TQueueEnqueueStandardScheme getScheme() {
      return new TQueueEnqueueStandardScheme();
    }
  }

  private static class TQueueEnqueueStandardScheme extends StandardScheme<TQueueEnqueue> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TQueueEnqueue struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUEUE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.queueName = iprot.readBinary();
              struct.setQueueNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value = iprot.readBinary();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HEADER_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.headerVersion = iprot.readI32();
              struct.setHeaderVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HEADERS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.headers = iprot.readBinary();
              struct.setHeadersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OUTPUT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outputName = iprot.readString();
              struct.setOutputNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PRODUCER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.producer = new TQueueProducer();
              struct.producer.read(iprot);
              struct.setProducerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TQueueEnqueue struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.queueName != null) {
        oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
        oprot.writeBinary(struct.queueName);
        oprot.writeFieldEnd();
      }
      if (struct.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeBinary(struct.value);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HEADER_VERSION_FIELD_DESC);
      oprot.writeI32(struct.headerVersion);
      oprot.writeFieldEnd();
      if (struct.headers != null) {
        oprot.writeFieldBegin(HEADERS_FIELD_DESC);
        oprot.writeBinary(struct.headers);
        oprot.writeFieldEnd();
      }
      if (struct.outputName != null) {
        oprot.writeFieldBegin(OUTPUT_NAME_FIELD_DESC);
        oprot.writeString(struct.outputName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.producer != null) {
        if (struct.isSetProducer()) {
          oprot.writeFieldBegin(PRODUCER_FIELD_DESC);
          struct.producer.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TQueueEnqueueTupleSchemeFactory implements SchemeFactory {
    public TQueueEnqueueTupleScheme getScheme() {
      return new TQueueEnqueueTupleScheme();
    }
  }

  private static class TQueueEnqueueTupleScheme extends TupleScheme<TQueueEnqueue> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TQueueEnqueue struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetQueueName()) {
        optionals.set(0);
      }
      if (struct.isSetValue()) {
        optionals.set(1);
      }
      if (struct.isSetHeaderVersion()) {
        optionals.set(2);
      }
      if (struct.isSetHeaders()) {
        optionals.set(3);
      }
      if (struct.isSetOutputName()) {
        optionals.set(4);
      }
      if (struct.isSetId()) {
        optionals.set(5);
      }
      if (struct.isSetProducer()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetQueueName()) {
        oprot.writeBinary(struct.queueName);
      }
      if (struct.isSetValue()) {
        oprot.writeBinary(struct.value);
      }
      if (struct.isSetHeaderVersion()) {
        oprot.writeI32(struct.headerVersion);
      }
      if (struct.isSetHeaders()) {
        oprot.writeBinary(struct.headers);
      }
      if (struct.isSetOutputName()) {
        oprot.writeString(struct.outputName);
      }
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetProducer()) {
        struct.producer.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TQueueEnqueue struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.queueName = iprot.readBinary();
        struct.setQueueNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.value = iprot.readBinary();
        struct.setValueIsSet(true);
      }
      if (incoming.get(2)) {
        struct.headerVersion = iprot.readI32();
        struct.setHeaderVersionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.headers = iprot.readBinary();
        struct.setHeadersIsSet(true);
      }
      if (incoming.get(4)) {
        struct.outputName = iprot.readString();
        struct.setOutputNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.producer = new TQueueProducer();
        struct.producer.read(iprot);
        struct.setProducerIsSet(true);
      }
    }
  }

}

