/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.continuuity.data.operation.executor.remote.stubs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TGroupState implements org.apache.thrift.TBase<TGroupState, TGroupState._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TGroupState");

  private static final org.apache.thrift.protocol.TField GROUP_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("groupSize", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("head", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mode", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TGroupStateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TGroupStateTupleSchemeFactory());
  }

  public int groupSize; // required
  public TQueueEntryPointer head; // required
  /**
   * 
   * @see TExecutionMode
   */
  public TExecutionMode mode; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GROUP_SIZE((short)1, "groupSize"),
    HEAD((short)2, "head"),
    /**
     * 
     * @see TExecutionMode
     */
    MODE((short)3, "mode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GROUP_SIZE
          return GROUP_SIZE;
        case 2: // HEAD
          return HEAD;
        case 3: // MODE
          return MODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GROUPSIZE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GROUP_SIZE, new org.apache.thrift.meta_data.FieldMetaData("groupSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEAD, new org.apache.thrift.meta_data.FieldMetaData("head", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TEntryPointer")));
    tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TExecutionMode.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TGroupState.class, metaDataMap);
  }

  public TGroupState() {
  }

  public TGroupState(
    int groupSize,
    TQueueEntryPointer head,
    TExecutionMode mode)
  {
    this();
    this.groupSize = groupSize;
    setGroupSizeIsSet(true);
    this.head = head;
    this.mode = mode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TGroupState(TGroupState other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.groupSize = other.groupSize;
    if (other.isSetHead()) {
      this.head = other.head;
    }
    if (other.isSetMode()) {
      this.mode = other.mode;
    }
  }

  public TGroupState deepCopy() {
    return new TGroupState(this);
  }

  @Override
  public void clear() {
    setGroupSizeIsSet(false);
    this.groupSize = 0;
    this.head = null;
    this.mode = null;
  }

  public int getGroupSize() {
    return this.groupSize;
  }

  public TGroupState setGroupSize(int groupSize) {
    this.groupSize = groupSize;
    setGroupSizeIsSet(true);
    return this;
  }

  public void unsetGroupSize() {
    __isset_bit_vector.clear(__GROUPSIZE_ISSET_ID);
  }

  /** Returns true if field groupSize is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupSize() {
    return __isset_bit_vector.get(__GROUPSIZE_ISSET_ID);
  }

  public void setGroupSizeIsSet(boolean value) {
    __isset_bit_vector.set(__GROUPSIZE_ISSET_ID, value);
  }

  public TQueueEntryPointer getHead() {
    return this.head;
  }

  public TGroupState setHead(TQueueEntryPointer head) {
    this.head = head;
    return this;
  }

  public void unsetHead() {
    this.head = null;
  }

  /** Returns true if field head is set (has been assigned a value) and false otherwise */
  public boolean isSetHead() {
    return this.head != null;
  }

  public void setHeadIsSet(boolean value) {
    if (!value) {
      this.head = null;
    }
  }

  /**
   * 
   * @see TExecutionMode
   */
  public TExecutionMode getMode() {
    return this.mode;
  }

  /**
   * 
   * @see TExecutionMode
   */
  public TGroupState setMode(TExecutionMode mode) {
    this.mode = mode;
    return this;
  }

  public void unsetMode() {
    this.mode = null;
  }

  /** Returns true if field mode is set (has been assigned a value) and false otherwise */
  public boolean isSetMode() {
    return this.mode != null;
  }

  public void setModeIsSet(boolean value) {
    if (!value) {
      this.mode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GROUP_SIZE:
      if (value == null) {
        unsetGroupSize();
      } else {
        setGroupSize((Integer)value);
      }
      break;

    case HEAD:
      if (value == null) {
        unsetHead();
      } else {
        setHead((TQueueEntryPointer)value);
      }
      break;

    case MODE:
      if (value == null) {
        unsetMode();
      } else {
        setMode((TExecutionMode)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GROUP_SIZE:
      return Integer.valueOf(getGroupSize());

    case HEAD:
      return getHead();

    case MODE:
      return getMode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GROUP_SIZE:
      return isSetGroupSize();
    case HEAD:
      return isSetHead();
    case MODE:
      return isSetMode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TGroupState)
      return this.equals((TGroupState)that);
    return false;
  }

  public boolean equals(TGroupState that) {
    if (that == null)
      return false;

    boolean this_present_groupSize = true;
    boolean that_present_groupSize = true;
    if (this_present_groupSize || that_present_groupSize) {
      if (!(this_present_groupSize && that_present_groupSize))
        return false;
      if (this.groupSize != that.groupSize)
        return false;
    }

    boolean this_present_head = true && this.isSetHead();
    boolean that_present_head = true && that.isSetHead();
    if (this_present_head || that_present_head) {
      if (!(this_present_head && that_present_head))
        return false;
      if (!this.head.equals(that.head))
        return false;
    }

    boolean this_present_mode = true && this.isSetMode();
    boolean that_present_mode = true && that.isSetMode();
    if (this_present_mode || that_present_mode) {
      if (!(this_present_mode && that_present_mode))
        return false;
      if (!this.mode.equals(that.mode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TGroupState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TGroupState typedOther = (TGroupState)other;

    lastComparison = Boolean.valueOf(isSetGroupSize()).compareTo(typedOther.isSetGroupSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupSize, typedOther.groupSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHead()).compareTo(typedOther.isSetHead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.head, typedOther.head);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMode()).compareTo(typedOther.isSetMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, typedOther.mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TGroupState(");
    boolean first = true;

    sb.append("groupSize:");
    sb.append(this.groupSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("head:");
    if (this.head == null) {
      sb.append("null");
    } else {
      sb.append(this.head);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mode:");
    if (this.mode == null) {
      sb.append("null");
    } else {
      sb.append(this.mode);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TGroupStateStandardSchemeFactory implements SchemeFactory {
    public TGroupStateStandardScheme getScheme() {
      return new TGroupStateStandardScheme();
    }
  }

  private static class TGroupStateStandardScheme extends StandardScheme<TGroupState> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TGroupState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GROUP_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.groupSize = iprot.readI32();
              struct.setGroupSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HEAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.head = new TQueueEntryPointer();
              struct.head.read(iprot);
              struct.setHeadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mode = TExecutionMode.findByValue(iprot.readI32());
              struct.setModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TGroupState struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(GROUP_SIZE_FIELD_DESC);
      oprot.writeI32(struct.groupSize);
      oprot.writeFieldEnd();
      if (struct.head != null) {
        oprot.writeFieldBegin(HEAD_FIELD_DESC);
        struct.head.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.mode != null) {
        oprot.writeFieldBegin(MODE_FIELD_DESC);
        oprot.writeI32(struct.mode.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TGroupStateTupleSchemeFactory implements SchemeFactory {
    public TGroupStateTupleScheme getScheme() {
      return new TGroupStateTupleScheme();
    }
  }

  private static class TGroupStateTupleScheme extends TupleScheme<TGroupState> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TGroupState struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGroupSize()) {
        optionals.set(0);
      }
      if (struct.isSetHead()) {
        optionals.set(1);
      }
      if (struct.isSetMode()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetGroupSize()) {
        oprot.writeI32(struct.groupSize);
      }
      if (struct.isSetHead()) {
        struct.head.write(oprot);
      }
      if (struct.isSetMode()) {
        oprot.writeI32(struct.mode.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TGroupState struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.groupSize = iprot.readI32();
        struct.setGroupSizeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.head = new TQueueEntryPointer();
        struct.head.read(iprot);
        struct.setHeadIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mode = TExecutionMode.findByValue(iprot.readI32());
        struct.setModeIsSet(true);
      }
    }
  }

}

