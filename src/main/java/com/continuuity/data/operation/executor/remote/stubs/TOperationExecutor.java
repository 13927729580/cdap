/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.continuuity.data.operation.executor.remote.stubs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TOperationExecutor {

  public interface Iface {

    public void batch(TOperationContext context, List<TWriteOperation> batch) throws TOperationException, org.apache.thrift.TException;

    public TOptionalBinaryMap read(TOperationContext context, TRead read) throws TOperationException, org.apache.thrift.TException;

    public TOptionalBinaryList readAllKeys(TOperationContext context, TReadAllKeys readAllKeys) throws TOperationException, org.apache.thrift.TException;

    public TOptionalBinaryMap readColumnRange(TOperationContext context, TReadColumnRange readColumnRange) throws TOperationException, org.apache.thrift.TException;

    public TDequeueResult dequeue(TOperationContext context, TQueueDequeue dequeue) throws TOperationException, org.apache.thrift.TException;

    public long getGroupId(TOperationContext context, TGetGroupId getGroupId) throws TOperationException, org.apache.thrift.TException;

    public TQueueInfo getQueueInfo(TOperationContext context, TGetQueueInfo getQueueInfo) throws TOperationException, org.apache.thrift.TException;

    public void clearFabric(TOperationContext context, TClearFabric clearFabric) throws TOperationException, org.apache.thrift.TException;

    public void openTable(TOperationContext context, TOpenTable openTable) throws TOperationException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void batch(TOperationContext context, List<TWriteOperation> batch, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.batch_call> resultHandler) throws org.apache.thrift.TException;

    public void read(TOperationContext context, TRead read, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.read_call> resultHandler) throws org.apache.thrift.TException;

    public void readAllKeys(TOperationContext context, TReadAllKeys readAllKeys, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.readAllKeys_call> resultHandler) throws org.apache.thrift.TException;

    public void readColumnRange(TOperationContext context, TReadColumnRange readColumnRange, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.readColumnRange_call> resultHandler) throws org.apache.thrift.TException;

    public void dequeue(TOperationContext context, TQueueDequeue dequeue, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.dequeue_call> resultHandler) throws org.apache.thrift.TException;

    public void getGroupId(TOperationContext context, TGetGroupId getGroupId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getGroupId_call> resultHandler) throws org.apache.thrift.TException;

    public void getQueueInfo(TOperationContext context, TGetQueueInfo getQueueInfo, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getQueueInfo_call> resultHandler) throws org.apache.thrift.TException;

    public void clearFabric(TOperationContext context, TClearFabric clearFabric, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.clearFabric_call> resultHandler) throws org.apache.thrift.TException;

    public void openTable(TOperationContext context, TOpenTable openTable, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.openTable_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void batch(TOperationContext context, List<TWriteOperation> batch) throws TOperationException, org.apache.thrift.TException
    {
      send_batch(context, batch);
      recv_batch();
    }

    public void send_batch(TOperationContext context, List<TWriteOperation> batch) throws org.apache.thrift.TException
    {
      batch_args args = new batch_args();
      args.setContext(context);
      args.setBatch(batch);
      sendBase("batch", args);
    }

    public void recv_batch() throws TOperationException, org.apache.thrift.TException
    {
      batch_result result = new batch_result();
      receiveBase(result, "batch");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public TOptionalBinaryMap read(TOperationContext context, TRead read) throws TOperationException, org.apache.thrift.TException
    {
      send_read(context, read);
      return recv_read();
    }

    public void send_read(TOperationContext context, TRead read) throws org.apache.thrift.TException
    {
      read_args args = new read_args();
      args.setContext(context);
      args.setRead(read);
      sendBase("read", args);
    }

    public TOptionalBinaryMap recv_read() throws TOperationException, org.apache.thrift.TException
    {
      read_result result = new read_result();
      receiveBase(result, "read");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "read failed: unknown result");
    }

    public TOptionalBinaryList readAllKeys(TOperationContext context, TReadAllKeys readAllKeys) throws TOperationException, org.apache.thrift.TException
    {
      send_readAllKeys(context, readAllKeys);
      return recv_readAllKeys();
    }

    public void send_readAllKeys(TOperationContext context, TReadAllKeys readAllKeys) throws org.apache.thrift.TException
    {
      readAllKeys_args args = new readAllKeys_args();
      args.setContext(context);
      args.setReadAllKeys(readAllKeys);
      sendBase("readAllKeys", args);
    }

    public TOptionalBinaryList recv_readAllKeys() throws TOperationException, org.apache.thrift.TException
    {
      readAllKeys_result result = new readAllKeys_result();
      receiveBase(result, "readAllKeys");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readAllKeys failed: unknown result");
    }

    public TOptionalBinaryMap readColumnRange(TOperationContext context, TReadColumnRange readColumnRange) throws TOperationException, org.apache.thrift.TException
    {
      send_readColumnRange(context, readColumnRange);
      return recv_readColumnRange();
    }

    public void send_readColumnRange(TOperationContext context, TReadColumnRange readColumnRange) throws org.apache.thrift.TException
    {
      readColumnRange_args args = new readColumnRange_args();
      args.setContext(context);
      args.setReadColumnRange(readColumnRange);
      sendBase("readColumnRange", args);
    }

    public TOptionalBinaryMap recv_readColumnRange() throws TOperationException, org.apache.thrift.TException
    {
      readColumnRange_result result = new readColumnRange_result();
      receiveBase(result, "readColumnRange");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readColumnRange failed: unknown result");
    }

    public TDequeueResult dequeue(TOperationContext context, TQueueDequeue dequeue) throws TOperationException, org.apache.thrift.TException
    {
      send_dequeue(context, dequeue);
      return recv_dequeue();
    }

    public void send_dequeue(TOperationContext context, TQueueDequeue dequeue) throws org.apache.thrift.TException
    {
      dequeue_args args = new dequeue_args();
      args.setContext(context);
      args.setDequeue(dequeue);
      sendBase("dequeue", args);
    }

    public TDequeueResult recv_dequeue() throws TOperationException, org.apache.thrift.TException
    {
      dequeue_result result = new dequeue_result();
      receiveBase(result, "dequeue");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dequeue failed: unknown result");
    }

    public long getGroupId(TOperationContext context, TGetGroupId getGroupId) throws TOperationException, org.apache.thrift.TException
    {
      send_getGroupId(context, getGroupId);
      return recv_getGroupId();
    }

    public void send_getGroupId(TOperationContext context, TGetGroupId getGroupId) throws org.apache.thrift.TException
    {
      getGroupId_args args = new getGroupId_args();
      args.setContext(context);
      args.setGetGroupId(getGroupId);
      sendBase("getGroupId", args);
    }

    public long recv_getGroupId() throws TOperationException, org.apache.thrift.TException
    {
      getGroupId_result result = new getGroupId_result();
      receiveBase(result, "getGroupId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getGroupId failed: unknown result");
    }

    public TQueueInfo getQueueInfo(TOperationContext context, TGetQueueInfo getQueueInfo) throws TOperationException, org.apache.thrift.TException
    {
      send_getQueueInfo(context, getQueueInfo);
      return recv_getQueueInfo();
    }

    public void send_getQueueInfo(TOperationContext context, TGetQueueInfo getQueueInfo) throws org.apache.thrift.TException
    {
      getQueueInfo_args args = new getQueueInfo_args();
      args.setContext(context);
      args.setGetQueueInfo(getQueueInfo);
      sendBase("getQueueInfo", args);
    }

    public TQueueInfo recv_getQueueInfo() throws TOperationException, org.apache.thrift.TException
    {
      getQueueInfo_result result = new getQueueInfo_result();
      receiveBase(result, "getQueueInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getQueueInfo failed: unknown result");
    }

    public void clearFabric(TOperationContext context, TClearFabric clearFabric) throws TOperationException, org.apache.thrift.TException
    {
      send_clearFabric(context, clearFabric);
      recv_clearFabric();
    }

    public void send_clearFabric(TOperationContext context, TClearFabric clearFabric) throws org.apache.thrift.TException
    {
      clearFabric_args args = new clearFabric_args();
      args.setContext(context);
      args.setClearFabric(clearFabric);
      sendBase("clearFabric", args);
    }

    public void recv_clearFabric() throws TOperationException, org.apache.thrift.TException
    {
      clearFabric_result result = new clearFabric_result();
      receiveBase(result, "clearFabric");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void openTable(TOperationContext context, TOpenTable openTable) throws TOperationException, org.apache.thrift.TException
    {
      send_openTable(context, openTable);
      recv_openTable();
    }

    public void send_openTable(TOperationContext context, TOpenTable openTable) throws org.apache.thrift.TException
    {
      openTable_args args = new openTable_args();
      args.setContext(context);
      args.setOpenTable(openTable);
      sendBase("openTable", args);
    }

    public void recv_openTable() throws TOperationException, org.apache.thrift.TException
    {
      openTable_result result = new openTable_result();
      receiveBase(result, "openTable");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void batch(TOperationContext context, List<TWriteOperation> batch, org.apache.thrift.async.AsyncMethodCallback<batch_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batch_call method_call = new batch_call(context, batch, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batch_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TOperationContext context;
      private List<TWriteOperation> batch;
      public batch_call(TOperationContext context, List<TWriteOperation> batch, org.apache.thrift.async.AsyncMethodCallback<batch_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.context = context;
        this.batch = batch;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batch_args args = new batch_args();
        args.setContext(context);
        args.setBatch(batch);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TOperationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_batch();
      }
    }

    public void read(TOperationContext context, TRead read, org.apache.thrift.async.AsyncMethodCallback<read_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      read_call method_call = new read_call(context, read, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class read_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TOperationContext context;
      private TRead read;
      public read_call(TOperationContext context, TRead read, org.apache.thrift.async.AsyncMethodCallback<read_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.context = context;
        this.read = read;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("read", org.apache.thrift.protocol.TMessageType.CALL, 0));
        read_args args = new read_args();
        args.setContext(context);
        args.setRead(read);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TOptionalBinaryMap getResult() throws TOperationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_read();
      }
    }

    public void readAllKeys(TOperationContext context, TReadAllKeys readAllKeys, org.apache.thrift.async.AsyncMethodCallback<readAllKeys_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readAllKeys_call method_call = new readAllKeys_call(context, readAllKeys, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readAllKeys_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TOperationContext context;
      private TReadAllKeys readAllKeys;
      public readAllKeys_call(TOperationContext context, TReadAllKeys readAllKeys, org.apache.thrift.async.AsyncMethodCallback<readAllKeys_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.context = context;
        this.readAllKeys = readAllKeys;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readAllKeys", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readAllKeys_args args = new readAllKeys_args();
        args.setContext(context);
        args.setReadAllKeys(readAllKeys);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TOptionalBinaryList getResult() throws TOperationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readAllKeys();
      }
    }

    public void readColumnRange(TOperationContext context, TReadColumnRange readColumnRange, org.apache.thrift.async.AsyncMethodCallback<readColumnRange_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readColumnRange_call method_call = new readColumnRange_call(context, readColumnRange, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readColumnRange_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TOperationContext context;
      private TReadColumnRange readColumnRange;
      public readColumnRange_call(TOperationContext context, TReadColumnRange readColumnRange, org.apache.thrift.async.AsyncMethodCallback<readColumnRange_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.context = context;
        this.readColumnRange = readColumnRange;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readColumnRange", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readColumnRange_args args = new readColumnRange_args();
        args.setContext(context);
        args.setReadColumnRange(readColumnRange);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TOptionalBinaryMap getResult() throws TOperationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readColumnRange();
      }
    }

    public void dequeue(TOperationContext context, TQueueDequeue dequeue, org.apache.thrift.async.AsyncMethodCallback<dequeue_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dequeue_call method_call = new dequeue_call(context, dequeue, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dequeue_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TOperationContext context;
      private TQueueDequeue dequeue;
      public dequeue_call(TOperationContext context, TQueueDequeue dequeue, org.apache.thrift.async.AsyncMethodCallback<dequeue_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.context = context;
        this.dequeue = dequeue;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dequeue", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dequeue_args args = new dequeue_args();
        args.setContext(context);
        args.setDequeue(dequeue);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TDequeueResult getResult() throws TOperationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dequeue();
      }
    }

    public void getGroupId(TOperationContext context, TGetGroupId getGroupId, org.apache.thrift.async.AsyncMethodCallback<getGroupId_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getGroupId_call method_call = new getGroupId_call(context, getGroupId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getGroupId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TOperationContext context;
      private TGetGroupId getGroupId;
      public getGroupId_call(TOperationContext context, TGetGroupId getGroupId, org.apache.thrift.async.AsyncMethodCallback<getGroupId_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.context = context;
        this.getGroupId = getGroupId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getGroupId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getGroupId_args args = new getGroupId_args();
        args.setContext(context);
        args.setGetGroupId(getGroupId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws TOperationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getGroupId();
      }
    }

    public void getQueueInfo(TOperationContext context, TGetQueueInfo getQueueInfo, org.apache.thrift.async.AsyncMethodCallback<getQueueInfo_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getQueueInfo_call method_call = new getQueueInfo_call(context, getQueueInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getQueueInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TOperationContext context;
      private TGetQueueInfo getQueueInfo;
      public getQueueInfo_call(TOperationContext context, TGetQueueInfo getQueueInfo, org.apache.thrift.async.AsyncMethodCallback<getQueueInfo_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.context = context;
        this.getQueueInfo = getQueueInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getQueueInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getQueueInfo_args args = new getQueueInfo_args();
        args.setContext(context);
        args.setGetQueueInfo(getQueueInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TQueueInfo getResult() throws TOperationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getQueueInfo();
      }
    }

    public void clearFabric(TOperationContext context, TClearFabric clearFabric, org.apache.thrift.async.AsyncMethodCallback<clearFabric_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      clearFabric_call method_call = new clearFabric_call(context, clearFabric, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class clearFabric_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TOperationContext context;
      private TClearFabric clearFabric;
      public clearFabric_call(TOperationContext context, TClearFabric clearFabric, org.apache.thrift.async.AsyncMethodCallback<clearFabric_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.context = context;
        this.clearFabric = clearFabric;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("clearFabric", org.apache.thrift.protocol.TMessageType.CALL, 0));
        clearFabric_args args = new clearFabric_args();
        args.setContext(context);
        args.setClearFabric(clearFabric);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TOperationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_clearFabric();
      }
    }

    public void openTable(TOperationContext context, TOpenTable openTable, org.apache.thrift.async.AsyncMethodCallback<openTable_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      openTable_call method_call = new openTable_call(context, openTable, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class openTable_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TOperationContext context;
      private TOpenTable openTable;
      public openTable_call(TOperationContext context, TOpenTable openTable, org.apache.thrift.async.AsyncMethodCallback<openTable_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.context = context;
        this.openTable = openTable;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("openTable", org.apache.thrift.protocol.TMessageType.CALL, 0));
        openTable_args args = new openTable_args();
        args.setContext(context);
        args.setOpenTable(openTable);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TOperationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_openTable();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("batch", new batch());
      processMap.put("read", new read());
      processMap.put("readAllKeys", new readAllKeys());
      processMap.put("readColumnRange", new readColumnRange());
      processMap.put("dequeue", new dequeue());
      processMap.put("getGroupId", new getGroupId());
      processMap.put("getQueueInfo", new getQueueInfo());
      processMap.put("clearFabric", new clearFabric());
      processMap.put("openTable", new openTable());
      return processMap;
    }

    private static class batch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batch_args> {
      public batch() {
        super("batch");
      }

      protected batch_args getEmptyArgsInstance() {
        return new batch_args();
      }

      protected batch_result getResult(I iface, batch_args args) throws org.apache.thrift.TException {
        batch_result result = new batch_result();
        try {
          iface.batch(args.context, args.batch);
        } catch (TOperationException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class read<I extends Iface> extends org.apache.thrift.ProcessFunction<I, read_args> {
      public read() {
        super("read");
      }

      protected read_args getEmptyArgsInstance() {
        return new read_args();
      }

      protected read_result getResult(I iface, read_args args) throws org.apache.thrift.TException {
        read_result result = new read_result();
        try {
          result.success = iface.read(args.context, args.read);
        } catch (TOperationException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class readAllKeys<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readAllKeys_args> {
      public readAllKeys() {
        super("readAllKeys");
      }

      protected readAllKeys_args getEmptyArgsInstance() {
        return new readAllKeys_args();
      }

      protected readAllKeys_result getResult(I iface, readAllKeys_args args) throws org.apache.thrift.TException {
        readAllKeys_result result = new readAllKeys_result();
        try {
          result.success = iface.readAllKeys(args.context, args.readAllKeys);
        } catch (TOperationException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class readColumnRange<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readColumnRange_args> {
      public readColumnRange() {
        super("readColumnRange");
      }

      protected readColumnRange_args getEmptyArgsInstance() {
        return new readColumnRange_args();
      }

      protected readColumnRange_result getResult(I iface, readColumnRange_args args) throws org.apache.thrift.TException {
        readColumnRange_result result = new readColumnRange_result();
        try {
          result.success = iface.readColumnRange(args.context, args.readColumnRange);
        } catch (TOperationException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class dequeue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dequeue_args> {
      public dequeue() {
        super("dequeue");
      }

      protected dequeue_args getEmptyArgsInstance() {
        return new dequeue_args();
      }

      protected dequeue_result getResult(I iface, dequeue_args args) throws org.apache.thrift.TException {
        dequeue_result result = new dequeue_result();
        try {
          result.success = iface.dequeue(args.context, args.dequeue);
        } catch (TOperationException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class getGroupId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getGroupId_args> {
      public getGroupId() {
        super("getGroupId");
      }

      protected getGroupId_args getEmptyArgsInstance() {
        return new getGroupId_args();
      }

      protected getGroupId_result getResult(I iface, getGroupId_args args) throws org.apache.thrift.TException {
        getGroupId_result result = new getGroupId_result();
        try {
          result.success = iface.getGroupId(args.context, args.getGroupId);
          result.setSuccessIsSet(true);
        } catch (TOperationException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class getQueueInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getQueueInfo_args> {
      public getQueueInfo() {
        super("getQueueInfo");
      }

      protected getQueueInfo_args getEmptyArgsInstance() {
        return new getQueueInfo_args();
      }

      protected getQueueInfo_result getResult(I iface, getQueueInfo_args args) throws org.apache.thrift.TException {
        getQueueInfo_result result = new getQueueInfo_result();
        try {
          result.success = iface.getQueueInfo(args.context, args.getQueueInfo);
        } catch (TOperationException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class clearFabric<I extends Iface> extends org.apache.thrift.ProcessFunction<I, clearFabric_args> {
      public clearFabric() {
        super("clearFabric");
      }

      protected clearFabric_args getEmptyArgsInstance() {
        return new clearFabric_args();
      }

      protected clearFabric_result getResult(I iface, clearFabric_args args) throws org.apache.thrift.TException {
        clearFabric_result result = new clearFabric_result();
        try {
          iface.clearFabric(args.context, args.clearFabric);
        } catch (TOperationException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class openTable<I extends Iface> extends org.apache.thrift.ProcessFunction<I, openTable_args> {
      public openTable() {
        super("openTable");
      }

      protected openTable_args getEmptyArgsInstance() {
        return new openTable_args();
      }

      protected openTable_result getResult(I iface, openTable_args args) throws org.apache.thrift.TException {
        openTable_result result = new openTable_result();
        try {
          iface.openTable(args.context, args.openTable);
        } catch (TOperationException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

  }

  public static class batch_args implements org.apache.thrift.TBase<batch_args, batch_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batch_args");

    private static final org.apache.thrift.protocol.TField CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("context", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BATCH_FIELD_DESC = new org.apache.thrift.protocol.TField("batch", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batch_argsTupleSchemeFactory());
    }

    public TOperationContext context; // required
    public List<TWriteOperation> batch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTEXT((short)1, "context"),
      BATCH((short)2, "batch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTEXT
            return CONTEXT;
          case 2: // BATCH
            return BATCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("context", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOperationContext.class)));
      tmpMap.put(_Fields.BATCH, new org.apache.thrift.meta_data.FieldMetaData("batch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "TWriteBatch")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batch_args.class, metaDataMap);
    }

    public batch_args() {
    }

    public batch_args(
      TOperationContext context,
      List<TWriteOperation> batch)
    {
      this();
      this.context = context;
      this.batch = batch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batch_args(batch_args other) {
      if (other.isSetContext()) {
        this.context = new TOperationContext(other.context);
      }
      if (other.isSetBatch()) {
        this.batch = other.batch;
      }
    }

    public batch_args deepCopy() {
      return new batch_args(this);
    }

    @Override
    public void clear() {
      this.context = null;
      this.batch = null;
    }

    public TOperationContext getContext() {
      return this.context;
    }

    public batch_args setContext(TOperationContext context) {
      this.context = context;
      return this;
    }

    public void unsetContext() {
      this.context = null;
    }

    /** Returns true if field context is set (has been assigned a value) and false otherwise */
    public boolean isSetContext() {
      return this.context != null;
    }

    public void setContextIsSet(boolean value) {
      if (!value) {
        this.context = null;
      }
    }

    public int getBatchSize() {
      return (this.batch == null) ? 0 : this.batch.size();
    }

    public java.util.Iterator<TWriteOperation> getBatchIterator() {
      return (this.batch == null) ? null : this.batch.iterator();
    }

    public void addToBatch(TWriteOperation elem) {
      if (this.batch == null) {
        this.batch = new ArrayList<TWriteOperation>();
      }
      this.batch.add(elem);
    }

    public List<TWriteOperation> getBatch() {
      return this.batch;
    }

    public batch_args setBatch(List<TWriteOperation> batch) {
      this.batch = batch;
      return this;
    }

    public void unsetBatch() {
      this.batch = null;
    }

    /** Returns true if field batch is set (has been assigned a value) and false otherwise */
    public boolean isSetBatch() {
      return this.batch != null;
    }

    public void setBatchIsSet(boolean value) {
      if (!value) {
        this.batch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTEXT:
        if (value == null) {
          unsetContext();
        } else {
          setContext((TOperationContext)value);
        }
        break;

      case BATCH:
        if (value == null) {
          unsetBatch();
        } else {
          setBatch((List<TWriteOperation>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTEXT:
        return getContext();

      case BATCH:
        return getBatch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTEXT:
        return isSetContext();
      case BATCH:
        return isSetBatch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batch_args)
        return this.equals((batch_args)that);
      return false;
    }

    public boolean equals(batch_args that) {
      if (that == null)
        return false;

      boolean this_present_context = true && this.isSetContext();
      boolean that_present_context = true && that.isSetContext();
      if (this_present_context || that_present_context) {
        if (!(this_present_context && that_present_context))
          return false;
        if (!this.context.equals(that.context))
          return false;
      }

      boolean this_present_batch = true && this.isSetBatch();
      boolean that_present_batch = true && that.isSetBatch();
      if (this_present_batch || that_present_batch) {
        if (!(this_present_batch && that_present_batch))
          return false;
        if (!this.batch.equals(that.batch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(batch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      batch_args typedOther = (batch_args)other;

      lastComparison = Boolean.valueOf(isSetContext()).compareTo(typedOther.isSetContext());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContext()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.context, typedOther.context);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBatch()).compareTo(typedOther.isSetBatch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBatch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batch, typedOther.batch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batch_args(");
      boolean first = true;

      sb.append("context:");
      if (this.context == null) {
        sb.append("null");
      } else {
        sb.append(this.context);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("batch:");
      if (this.batch == null) {
        sb.append("null");
      } else {
        sb.append(this.batch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batch_argsStandardSchemeFactory implements SchemeFactory {
      public batch_argsStandardScheme getScheme() {
        return new batch_argsStandardScheme();
      }
    }

    private static class batch_argsStandardScheme extends StandardScheme<batch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.context = new TOperationContext();
                struct.context.read(iprot);
                struct.setContextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BATCH
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list76 = iprot.readListBegin();
                  struct.batch = new ArrayList<TWriteOperation>(_list76.size);
                  for (int _i77 = 0; _i77 < _list76.size; ++_i77)
                  {
                    TWriteOperation _elem78; // required
                    _elem78 = new TWriteOperation();
                    _elem78.read(iprot);
                    struct.batch.add(_elem78);
                  }
                  iprot.readListEnd();
                }
                struct.setBatchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.context != null) {
          oprot.writeFieldBegin(CONTEXT_FIELD_DESC);
          struct.context.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.batch != null) {
          oprot.writeFieldBegin(BATCH_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.batch.size()));
            for (TWriteOperation _iter79 : struct.batch)
            {
              _iter79.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batch_argsTupleSchemeFactory implements SchemeFactory {
      public batch_argsTupleScheme getScheme() {
        return new batch_argsTupleScheme();
      }
    }

    private static class batch_argsTupleScheme extends TupleScheme<batch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetContext()) {
          optionals.set(0);
        }
        if (struct.isSetBatch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetContext()) {
          struct.context.write(oprot);
        }
        if (struct.isSetBatch()) {
          {
            oprot.writeI32(struct.batch.size());
            for (TWriteOperation _iter80 : struct.batch)
            {
              _iter80.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.context = new TOperationContext();
          struct.context.read(iprot);
          struct.setContextIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list81 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.batch = new ArrayList<TWriteOperation>(_list81.size);
            for (int _i82 = 0; _i82 < _list81.size; ++_i82)
            {
              TWriteOperation _elem83; // required
              _elem83 = new TWriteOperation();
              _elem83.read(iprot);
              struct.batch.add(_elem83);
            }
          }
          struct.setBatchIsSet(true);
        }
      }
    }

  }

  public static class batch_result implements org.apache.thrift.TBase<batch_result, batch_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batch_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batch_resultTupleSchemeFactory());
    }

    public TOperationException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batch_result.class, metaDataMap);
    }

    public batch_result() {
    }

    public batch_result(
      TOperationException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batch_result(batch_result other) {
      if (other.isSetEx()) {
        this.ex = new TOperationException(other.ex);
      }
    }

    public batch_result deepCopy() {
      return new batch_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public TOperationException getEx() {
      return this.ex;
    }

    public batch_result setEx(TOperationException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((TOperationException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batch_result)
        return this.equals((batch_result)that);
      return false;
    }

    public boolean equals(batch_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(batch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      batch_result typedOther = (batch_result)other;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batch_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batch_resultStandardSchemeFactory implements SchemeFactory {
      public batch_resultStandardScheme getScheme() {
        return new batch_resultStandardScheme();
      }
    }

    private static class batch_resultStandardScheme extends StandardScheme<batch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new TOperationException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batch_resultTupleSchemeFactory implements SchemeFactory {
      public batch_resultTupleScheme getScheme() {
        return new batch_resultTupleScheme();
      }
    }

    private static class batch_resultTupleScheme extends TupleScheme<batch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new TOperationException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class read_args implements org.apache.thrift.TBase<read_args, read_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("read_args");

    private static final org.apache.thrift.protocol.TField CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("context", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField READ_FIELD_DESC = new org.apache.thrift.protocol.TField("read", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new read_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new read_argsTupleSchemeFactory());
    }

    public TOperationContext context; // required
    public TRead read; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTEXT((short)1, "context"),
      READ((short)2, "read");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTEXT
            return CONTEXT;
          case 2: // READ
            return READ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("context", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOperationContext.class)));
      tmpMap.put(_Fields.READ, new org.apache.thrift.meta_data.FieldMetaData("read", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRead.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(read_args.class, metaDataMap);
    }

    public read_args() {
    }

    public read_args(
      TOperationContext context,
      TRead read)
    {
      this();
      this.context = context;
      this.read = read;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public read_args(read_args other) {
      if (other.isSetContext()) {
        this.context = new TOperationContext(other.context);
      }
      if (other.isSetRead()) {
        this.read = new TRead(other.read);
      }
    }

    public read_args deepCopy() {
      return new read_args(this);
    }

    @Override
    public void clear() {
      this.context = null;
      this.read = null;
    }

    public TOperationContext getContext() {
      return this.context;
    }

    public read_args setContext(TOperationContext context) {
      this.context = context;
      return this;
    }

    public void unsetContext() {
      this.context = null;
    }

    /** Returns true if field context is set (has been assigned a value) and false otherwise */
    public boolean isSetContext() {
      return this.context != null;
    }

    public void setContextIsSet(boolean value) {
      if (!value) {
        this.context = null;
      }
    }

    public TRead getRead() {
      return this.read;
    }

    public read_args setRead(TRead read) {
      this.read = read;
      return this;
    }

    public void unsetRead() {
      this.read = null;
    }

    /** Returns true if field read is set (has been assigned a value) and false otherwise */
    public boolean isSetRead() {
      return this.read != null;
    }

    public void setReadIsSet(boolean value) {
      if (!value) {
        this.read = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTEXT:
        if (value == null) {
          unsetContext();
        } else {
          setContext((TOperationContext)value);
        }
        break;

      case READ:
        if (value == null) {
          unsetRead();
        } else {
          setRead((TRead)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTEXT:
        return getContext();

      case READ:
        return getRead();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTEXT:
        return isSetContext();
      case READ:
        return isSetRead();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof read_args)
        return this.equals((read_args)that);
      return false;
    }

    public boolean equals(read_args that) {
      if (that == null)
        return false;

      boolean this_present_context = true && this.isSetContext();
      boolean that_present_context = true && that.isSetContext();
      if (this_present_context || that_present_context) {
        if (!(this_present_context && that_present_context))
          return false;
        if (!this.context.equals(that.context))
          return false;
      }

      boolean this_present_read = true && this.isSetRead();
      boolean that_present_read = true && that.isSetRead();
      if (this_present_read || that_present_read) {
        if (!(this_present_read && that_present_read))
          return false;
        if (!this.read.equals(that.read))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(read_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      read_args typedOther = (read_args)other;

      lastComparison = Boolean.valueOf(isSetContext()).compareTo(typedOther.isSetContext());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContext()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.context, typedOther.context);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRead()).compareTo(typedOther.isSetRead());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRead()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.read, typedOther.read);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("read_args(");
      boolean first = true;

      sb.append("context:");
      if (this.context == null) {
        sb.append("null");
      } else {
        sb.append(this.context);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("read:");
      if (this.read == null) {
        sb.append("null");
      } else {
        sb.append(this.read);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class read_argsStandardSchemeFactory implements SchemeFactory {
      public read_argsStandardScheme getScheme() {
        return new read_argsStandardScheme();
      }
    }

    private static class read_argsStandardScheme extends StandardScheme<read_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, read_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.context = new TOperationContext();
                struct.context.read(iprot);
                struct.setContextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // READ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.read = new TRead();
                struct.read.read(iprot);
                struct.setReadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, read_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.context != null) {
          oprot.writeFieldBegin(CONTEXT_FIELD_DESC);
          struct.context.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.read != null) {
          oprot.writeFieldBegin(READ_FIELD_DESC);
          struct.read.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class read_argsTupleSchemeFactory implements SchemeFactory {
      public read_argsTupleScheme getScheme() {
        return new read_argsTupleScheme();
      }
    }

    private static class read_argsTupleScheme extends TupleScheme<read_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, read_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetContext()) {
          optionals.set(0);
        }
        if (struct.isSetRead()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetContext()) {
          struct.context.write(oprot);
        }
        if (struct.isSetRead()) {
          struct.read.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, read_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.context = new TOperationContext();
          struct.context.read(iprot);
          struct.setContextIsSet(true);
        }
        if (incoming.get(1)) {
          struct.read = new TRead();
          struct.read.read(iprot);
          struct.setReadIsSet(true);
        }
      }
    }

  }

  public static class read_result implements org.apache.thrift.TBase<read_result, read_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("read_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new read_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new read_resultTupleSchemeFactory());
    }

    public TOptionalBinaryMap success; // required
    public TOperationException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOptionalBinaryMap.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(read_result.class, metaDataMap);
    }

    public read_result() {
    }

    public read_result(
      TOptionalBinaryMap success,
      TOperationException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public read_result(read_result other) {
      if (other.isSetSuccess()) {
        this.success = new TOptionalBinaryMap(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new TOperationException(other.ex);
      }
    }

    public read_result deepCopy() {
      return new read_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public TOptionalBinaryMap getSuccess() {
      return this.success;
    }

    public read_result setSuccess(TOptionalBinaryMap success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TOperationException getEx() {
      return this.ex;
    }

    public read_result setEx(TOperationException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TOptionalBinaryMap)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((TOperationException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof read_result)
        return this.equals((read_result)that);
      return false;
    }

    public boolean equals(read_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(read_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      read_result typedOther = (read_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("read_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class read_resultStandardSchemeFactory implements SchemeFactory {
      public read_resultStandardScheme getScheme() {
        return new read_resultStandardScheme();
      }
    }

    private static class read_resultStandardScheme extends StandardScheme<read_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, read_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TOptionalBinaryMap();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new TOperationException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, read_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class read_resultTupleSchemeFactory implements SchemeFactory {
      public read_resultTupleScheme getScheme() {
        return new read_resultTupleScheme();
      }
    }

    private static class read_resultTupleScheme extends TupleScheme<read_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, read_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, read_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TOptionalBinaryMap();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new TOperationException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class readAllKeys_args implements org.apache.thrift.TBase<readAllKeys_args, readAllKeys_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readAllKeys_args");

    private static final org.apache.thrift.protocol.TField CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("context", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField READ_ALL_KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("readAllKeys", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readAllKeys_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readAllKeys_argsTupleSchemeFactory());
    }

    public TOperationContext context; // required
    public TReadAllKeys readAllKeys; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTEXT((short)1, "context"),
      READ_ALL_KEYS((short)2, "readAllKeys");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTEXT
            return CONTEXT;
          case 2: // READ_ALL_KEYS
            return READ_ALL_KEYS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("context", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOperationContext.class)));
      tmpMap.put(_Fields.READ_ALL_KEYS, new org.apache.thrift.meta_data.FieldMetaData("readAllKeys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TReadAllKeys.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readAllKeys_args.class, metaDataMap);
    }

    public readAllKeys_args() {
    }

    public readAllKeys_args(
      TOperationContext context,
      TReadAllKeys readAllKeys)
    {
      this();
      this.context = context;
      this.readAllKeys = readAllKeys;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readAllKeys_args(readAllKeys_args other) {
      if (other.isSetContext()) {
        this.context = new TOperationContext(other.context);
      }
      if (other.isSetReadAllKeys()) {
        this.readAllKeys = new TReadAllKeys(other.readAllKeys);
      }
    }

    public readAllKeys_args deepCopy() {
      return new readAllKeys_args(this);
    }

    @Override
    public void clear() {
      this.context = null;
      this.readAllKeys = null;
    }

    public TOperationContext getContext() {
      return this.context;
    }

    public readAllKeys_args setContext(TOperationContext context) {
      this.context = context;
      return this;
    }

    public void unsetContext() {
      this.context = null;
    }

    /** Returns true if field context is set (has been assigned a value) and false otherwise */
    public boolean isSetContext() {
      return this.context != null;
    }

    public void setContextIsSet(boolean value) {
      if (!value) {
        this.context = null;
      }
    }

    public TReadAllKeys getReadAllKeys() {
      return this.readAllKeys;
    }

    public readAllKeys_args setReadAllKeys(TReadAllKeys readAllKeys) {
      this.readAllKeys = readAllKeys;
      return this;
    }

    public void unsetReadAllKeys() {
      this.readAllKeys = null;
    }

    /** Returns true if field readAllKeys is set (has been assigned a value) and false otherwise */
    public boolean isSetReadAllKeys() {
      return this.readAllKeys != null;
    }

    public void setReadAllKeysIsSet(boolean value) {
      if (!value) {
        this.readAllKeys = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTEXT:
        if (value == null) {
          unsetContext();
        } else {
          setContext((TOperationContext)value);
        }
        break;

      case READ_ALL_KEYS:
        if (value == null) {
          unsetReadAllKeys();
        } else {
          setReadAllKeys((TReadAllKeys)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTEXT:
        return getContext();

      case READ_ALL_KEYS:
        return getReadAllKeys();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTEXT:
        return isSetContext();
      case READ_ALL_KEYS:
        return isSetReadAllKeys();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readAllKeys_args)
        return this.equals((readAllKeys_args)that);
      return false;
    }

    public boolean equals(readAllKeys_args that) {
      if (that == null)
        return false;

      boolean this_present_context = true && this.isSetContext();
      boolean that_present_context = true && that.isSetContext();
      if (this_present_context || that_present_context) {
        if (!(this_present_context && that_present_context))
          return false;
        if (!this.context.equals(that.context))
          return false;
      }

      boolean this_present_readAllKeys = true && this.isSetReadAllKeys();
      boolean that_present_readAllKeys = true && that.isSetReadAllKeys();
      if (this_present_readAllKeys || that_present_readAllKeys) {
        if (!(this_present_readAllKeys && that_present_readAllKeys))
          return false;
        if (!this.readAllKeys.equals(that.readAllKeys))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(readAllKeys_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      readAllKeys_args typedOther = (readAllKeys_args)other;

      lastComparison = Boolean.valueOf(isSetContext()).compareTo(typedOther.isSetContext());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContext()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.context, typedOther.context);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReadAllKeys()).compareTo(typedOther.isSetReadAllKeys());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReadAllKeys()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readAllKeys, typedOther.readAllKeys);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readAllKeys_args(");
      boolean first = true;

      sb.append("context:");
      if (this.context == null) {
        sb.append("null");
      } else {
        sb.append(this.context);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("readAllKeys:");
      if (this.readAllKeys == null) {
        sb.append("null");
      } else {
        sb.append(this.readAllKeys);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readAllKeys_argsStandardSchemeFactory implements SchemeFactory {
      public readAllKeys_argsStandardScheme getScheme() {
        return new readAllKeys_argsStandardScheme();
      }
    }

    private static class readAllKeys_argsStandardScheme extends StandardScheme<readAllKeys_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readAllKeys_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.context = new TOperationContext();
                struct.context.read(iprot);
                struct.setContextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // READ_ALL_KEYS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.readAllKeys = new TReadAllKeys();
                struct.readAllKeys.read(iprot);
                struct.setReadAllKeysIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readAllKeys_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.context != null) {
          oprot.writeFieldBegin(CONTEXT_FIELD_DESC);
          struct.context.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.readAllKeys != null) {
          oprot.writeFieldBegin(READ_ALL_KEYS_FIELD_DESC);
          struct.readAllKeys.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readAllKeys_argsTupleSchemeFactory implements SchemeFactory {
      public readAllKeys_argsTupleScheme getScheme() {
        return new readAllKeys_argsTupleScheme();
      }
    }

    private static class readAllKeys_argsTupleScheme extends TupleScheme<readAllKeys_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readAllKeys_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetContext()) {
          optionals.set(0);
        }
        if (struct.isSetReadAllKeys()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetContext()) {
          struct.context.write(oprot);
        }
        if (struct.isSetReadAllKeys()) {
          struct.readAllKeys.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readAllKeys_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.context = new TOperationContext();
          struct.context.read(iprot);
          struct.setContextIsSet(true);
        }
        if (incoming.get(1)) {
          struct.readAllKeys = new TReadAllKeys();
          struct.readAllKeys.read(iprot);
          struct.setReadAllKeysIsSet(true);
        }
      }
    }

  }

  public static class readAllKeys_result implements org.apache.thrift.TBase<readAllKeys_result, readAllKeys_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readAllKeys_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readAllKeys_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readAllKeys_resultTupleSchemeFactory());
    }

    public TOptionalBinaryList success; // required
    public TOperationException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOptionalBinaryList.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readAllKeys_result.class, metaDataMap);
    }

    public readAllKeys_result() {
    }

    public readAllKeys_result(
      TOptionalBinaryList success,
      TOperationException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readAllKeys_result(readAllKeys_result other) {
      if (other.isSetSuccess()) {
        this.success = new TOptionalBinaryList(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new TOperationException(other.ex);
      }
    }

    public readAllKeys_result deepCopy() {
      return new readAllKeys_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public TOptionalBinaryList getSuccess() {
      return this.success;
    }

    public readAllKeys_result setSuccess(TOptionalBinaryList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TOperationException getEx() {
      return this.ex;
    }

    public readAllKeys_result setEx(TOperationException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TOptionalBinaryList)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((TOperationException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readAllKeys_result)
        return this.equals((readAllKeys_result)that);
      return false;
    }

    public boolean equals(readAllKeys_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(readAllKeys_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      readAllKeys_result typedOther = (readAllKeys_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readAllKeys_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readAllKeys_resultStandardSchemeFactory implements SchemeFactory {
      public readAllKeys_resultStandardScheme getScheme() {
        return new readAllKeys_resultStandardScheme();
      }
    }

    private static class readAllKeys_resultStandardScheme extends StandardScheme<readAllKeys_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readAllKeys_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TOptionalBinaryList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new TOperationException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readAllKeys_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readAllKeys_resultTupleSchemeFactory implements SchemeFactory {
      public readAllKeys_resultTupleScheme getScheme() {
        return new readAllKeys_resultTupleScheme();
      }
    }

    private static class readAllKeys_resultTupleScheme extends TupleScheme<readAllKeys_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readAllKeys_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readAllKeys_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TOptionalBinaryList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new TOperationException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class readColumnRange_args implements org.apache.thrift.TBase<readColumnRange_args, readColumnRange_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readColumnRange_args");

    private static final org.apache.thrift.protocol.TField CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("context", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField READ_COLUMN_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("readColumnRange", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readColumnRange_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readColumnRange_argsTupleSchemeFactory());
    }

    public TOperationContext context; // required
    public TReadColumnRange readColumnRange; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTEXT((short)1, "context"),
      READ_COLUMN_RANGE((short)2, "readColumnRange");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTEXT
            return CONTEXT;
          case 2: // READ_COLUMN_RANGE
            return READ_COLUMN_RANGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("context", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOperationContext.class)));
      tmpMap.put(_Fields.READ_COLUMN_RANGE, new org.apache.thrift.meta_data.FieldMetaData("readColumnRange", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TReadColumnRange.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readColumnRange_args.class, metaDataMap);
    }

    public readColumnRange_args() {
    }

    public readColumnRange_args(
      TOperationContext context,
      TReadColumnRange readColumnRange)
    {
      this();
      this.context = context;
      this.readColumnRange = readColumnRange;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readColumnRange_args(readColumnRange_args other) {
      if (other.isSetContext()) {
        this.context = new TOperationContext(other.context);
      }
      if (other.isSetReadColumnRange()) {
        this.readColumnRange = new TReadColumnRange(other.readColumnRange);
      }
    }

    public readColumnRange_args deepCopy() {
      return new readColumnRange_args(this);
    }

    @Override
    public void clear() {
      this.context = null;
      this.readColumnRange = null;
    }

    public TOperationContext getContext() {
      return this.context;
    }

    public readColumnRange_args setContext(TOperationContext context) {
      this.context = context;
      return this;
    }

    public void unsetContext() {
      this.context = null;
    }

    /** Returns true if field context is set (has been assigned a value) and false otherwise */
    public boolean isSetContext() {
      return this.context != null;
    }

    public void setContextIsSet(boolean value) {
      if (!value) {
        this.context = null;
      }
    }

    public TReadColumnRange getReadColumnRange() {
      return this.readColumnRange;
    }

    public readColumnRange_args setReadColumnRange(TReadColumnRange readColumnRange) {
      this.readColumnRange = readColumnRange;
      return this;
    }

    public void unsetReadColumnRange() {
      this.readColumnRange = null;
    }

    /** Returns true if field readColumnRange is set (has been assigned a value) and false otherwise */
    public boolean isSetReadColumnRange() {
      return this.readColumnRange != null;
    }

    public void setReadColumnRangeIsSet(boolean value) {
      if (!value) {
        this.readColumnRange = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTEXT:
        if (value == null) {
          unsetContext();
        } else {
          setContext((TOperationContext)value);
        }
        break;

      case READ_COLUMN_RANGE:
        if (value == null) {
          unsetReadColumnRange();
        } else {
          setReadColumnRange((TReadColumnRange)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTEXT:
        return getContext();

      case READ_COLUMN_RANGE:
        return getReadColumnRange();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTEXT:
        return isSetContext();
      case READ_COLUMN_RANGE:
        return isSetReadColumnRange();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readColumnRange_args)
        return this.equals((readColumnRange_args)that);
      return false;
    }

    public boolean equals(readColumnRange_args that) {
      if (that == null)
        return false;

      boolean this_present_context = true && this.isSetContext();
      boolean that_present_context = true && that.isSetContext();
      if (this_present_context || that_present_context) {
        if (!(this_present_context && that_present_context))
          return false;
        if (!this.context.equals(that.context))
          return false;
      }

      boolean this_present_readColumnRange = true && this.isSetReadColumnRange();
      boolean that_present_readColumnRange = true && that.isSetReadColumnRange();
      if (this_present_readColumnRange || that_present_readColumnRange) {
        if (!(this_present_readColumnRange && that_present_readColumnRange))
          return false;
        if (!this.readColumnRange.equals(that.readColumnRange))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(readColumnRange_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      readColumnRange_args typedOther = (readColumnRange_args)other;

      lastComparison = Boolean.valueOf(isSetContext()).compareTo(typedOther.isSetContext());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContext()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.context, typedOther.context);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReadColumnRange()).compareTo(typedOther.isSetReadColumnRange());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReadColumnRange()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readColumnRange, typedOther.readColumnRange);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readColumnRange_args(");
      boolean first = true;

      sb.append("context:");
      if (this.context == null) {
        sb.append("null");
      } else {
        sb.append(this.context);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("readColumnRange:");
      if (this.readColumnRange == null) {
        sb.append("null");
      } else {
        sb.append(this.readColumnRange);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readColumnRange_argsStandardSchemeFactory implements SchemeFactory {
      public readColumnRange_argsStandardScheme getScheme() {
        return new readColumnRange_argsStandardScheme();
      }
    }

    private static class readColumnRange_argsStandardScheme extends StandardScheme<readColumnRange_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readColumnRange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.context = new TOperationContext();
                struct.context.read(iprot);
                struct.setContextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // READ_COLUMN_RANGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.readColumnRange = new TReadColumnRange();
                struct.readColumnRange.read(iprot);
                struct.setReadColumnRangeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readColumnRange_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.context != null) {
          oprot.writeFieldBegin(CONTEXT_FIELD_DESC);
          struct.context.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.readColumnRange != null) {
          oprot.writeFieldBegin(READ_COLUMN_RANGE_FIELD_DESC);
          struct.readColumnRange.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readColumnRange_argsTupleSchemeFactory implements SchemeFactory {
      public readColumnRange_argsTupleScheme getScheme() {
        return new readColumnRange_argsTupleScheme();
      }
    }

    private static class readColumnRange_argsTupleScheme extends TupleScheme<readColumnRange_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readColumnRange_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetContext()) {
          optionals.set(0);
        }
        if (struct.isSetReadColumnRange()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetContext()) {
          struct.context.write(oprot);
        }
        if (struct.isSetReadColumnRange()) {
          struct.readColumnRange.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readColumnRange_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.context = new TOperationContext();
          struct.context.read(iprot);
          struct.setContextIsSet(true);
        }
        if (incoming.get(1)) {
          struct.readColumnRange = new TReadColumnRange();
          struct.readColumnRange.read(iprot);
          struct.setReadColumnRangeIsSet(true);
        }
      }
    }

  }

  public static class readColumnRange_result implements org.apache.thrift.TBase<readColumnRange_result, readColumnRange_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readColumnRange_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readColumnRange_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readColumnRange_resultTupleSchemeFactory());
    }

    public TOptionalBinaryMap success; // required
    public TOperationException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOptionalBinaryMap.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readColumnRange_result.class, metaDataMap);
    }

    public readColumnRange_result() {
    }

    public readColumnRange_result(
      TOptionalBinaryMap success,
      TOperationException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readColumnRange_result(readColumnRange_result other) {
      if (other.isSetSuccess()) {
        this.success = new TOptionalBinaryMap(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new TOperationException(other.ex);
      }
    }

    public readColumnRange_result deepCopy() {
      return new readColumnRange_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public TOptionalBinaryMap getSuccess() {
      return this.success;
    }

    public readColumnRange_result setSuccess(TOptionalBinaryMap success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TOperationException getEx() {
      return this.ex;
    }

    public readColumnRange_result setEx(TOperationException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TOptionalBinaryMap)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((TOperationException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readColumnRange_result)
        return this.equals((readColumnRange_result)that);
      return false;
    }

    public boolean equals(readColumnRange_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(readColumnRange_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      readColumnRange_result typedOther = (readColumnRange_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readColumnRange_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readColumnRange_resultStandardSchemeFactory implements SchemeFactory {
      public readColumnRange_resultStandardScheme getScheme() {
        return new readColumnRange_resultStandardScheme();
      }
    }

    private static class readColumnRange_resultStandardScheme extends StandardScheme<readColumnRange_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readColumnRange_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TOptionalBinaryMap();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new TOperationException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readColumnRange_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readColumnRange_resultTupleSchemeFactory implements SchemeFactory {
      public readColumnRange_resultTupleScheme getScheme() {
        return new readColumnRange_resultTupleScheme();
      }
    }

    private static class readColumnRange_resultTupleScheme extends TupleScheme<readColumnRange_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readColumnRange_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readColumnRange_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TOptionalBinaryMap();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new TOperationException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class dequeue_args implements org.apache.thrift.TBase<dequeue_args, dequeue_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dequeue_args");

    private static final org.apache.thrift.protocol.TField CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("context", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DEQUEUE_FIELD_DESC = new org.apache.thrift.protocol.TField("dequeue", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dequeue_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dequeue_argsTupleSchemeFactory());
    }

    public TOperationContext context; // required
    public TQueueDequeue dequeue; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTEXT((short)1, "context"),
      DEQUEUE((short)2, "dequeue");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTEXT
            return CONTEXT;
          case 2: // DEQUEUE
            return DEQUEUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("context", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOperationContext.class)));
      tmpMap.put(_Fields.DEQUEUE, new org.apache.thrift.meta_data.FieldMetaData("dequeue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQueueDequeue.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dequeue_args.class, metaDataMap);
    }

    public dequeue_args() {
    }

    public dequeue_args(
      TOperationContext context,
      TQueueDequeue dequeue)
    {
      this();
      this.context = context;
      this.dequeue = dequeue;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dequeue_args(dequeue_args other) {
      if (other.isSetContext()) {
        this.context = new TOperationContext(other.context);
      }
      if (other.isSetDequeue()) {
        this.dequeue = new TQueueDequeue(other.dequeue);
      }
    }

    public dequeue_args deepCopy() {
      return new dequeue_args(this);
    }

    @Override
    public void clear() {
      this.context = null;
      this.dequeue = null;
    }

    public TOperationContext getContext() {
      return this.context;
    }

    public dequeue_args setContext(TOperationContext context) {
      this.context = context;
      return this;
    }

    public void unsetContext() {
      this.context = null;
    }

    /** Returns true if field context is set (has been assigned a value) and false otherwise */
    public boolean isSetContext() {
      return this.context != null;
    }

    public void setContextIsSet(boolean value) {
      if (!value) {
        this.context = null;
      }
    }

    public TQueueDequeue getDequeue() {
      return this.dequeue;
    }

    public dequeue_args setDequeue(TQueueDequeue dequeue) {
      this.dequeue = dequeue;
      return this;
    }

    public void unsetDequeue() {
      this.dequeue = null;
    }

    /** Returns true if field dequeue is set (has been assigned a value) and false otherwise */
    public boolean isSetDequeue() {
      return this.dequeue != null;
    }

    public void setDequeueIsSet(boolean value) {
      if (!value) {
        this.dequeue = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTEXT:
        if (value == null) {
          unsetContext();
        } else {
          setContext((TOperationContext)value);
        }
        break;

      case DEQUEUE:
        if (value == null) {
          unsetDequeue();
        } else {
          setDequeue((TQueueDequeue)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTEXT:
        return getContext();

      case DEQUEUE:
        return getDequeue();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTEXT:
        return isSetContext();
      case DEQUEUE:
        return isSetDequeue();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dequeue_args)
        return this.equals((dequeue_args)that);
      return false;
    }

    public boolean equals(dequeue_args that) {
      if (that == null)
        return false;

      boolean this_present_context = true && this.isSetContext();
      boolean that_present_context = true && that.isSetContext();
      if (this_present_context || that_present_context) {
        if (!(this_present_context && that_present_context))
          return false;
        if (!this.context.equals(that.context))
          return false;
      }

      boolean this_present_dequeue = true && this.isSetDequeue();
      boolean that_present_dequeue = true && that.isSetDequeue();
      if (this_present_dequeue || that_present_dequeue) {
        if (!(this_present_dequeue && that_present_dequeue))
          return false;
        if (!this.dequeue.equals(that.dequeue))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(dequeue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      dequeue_args typedOther = (dequeue_args)other;

      lastComparison = Boolean.valueOf(isSetContext()).compareTo(typedOther.isSetContext());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContext()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.context, typedOther.context);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDequeue()).compareTo(typedOther.isSetDequeue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDequeue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dequeue, typedOther.dequeue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dequeue_args(");
      boolean first = true;

      sb.append("context:");
      if (this.context == null) {
        sb.append("null");
      } else {
        sb.append(this.context);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dequeue:");
      if (this.dequeue == null) {
        sb.append("null");
      } else {
        sb.append(this.dequeue);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dequeue_argsStandardSchemeFactory implements SchemeFactory {
      public dequeue_argsStandardScheme getScheme() {
        return new dequeue_argsStandardScheme();
      }
    }

    private static class dequeue_argsStandardScheme extends StandardScheme<dequeue_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dequeue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.context = new TOperationContext();
                struct.context.read(iprot);
                struct.setContextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEQUEUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dequeue = new TQueueDequeue();
                struct.dequeue.read(iprot);
                struct.setDequeueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dequeue_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.context != null) {
          oprot.writeFieldBegin(CONTEXT_FIELD_DESC);
          struct.context.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.dequeue != null) {
          oprot.writeFieldBegin(DEQUEUE_FIELD_DESC);
          struct.dequeue.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dequeue_argsTupleSchemeFactory implements SchemeFactory {
      public dequeue_argsTupleScheme getScheme() {
        return new dequeue_argsTupleScheme();
      }
    }

    private static class dequeue_argsTupleScheme extends TupleScheme<dequeue_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dequeue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetContext()) {
          optionals.set(0);
        }
        if (struct.isSetDequeue()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetContext()) {
          struct.context.write(oprot);
        }
        if (struct.isSetDequeue()) {
          struct.dequeue.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dequeue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.context = new TOperationContext();
          struct.context.read(iprot);
          struct.setContextIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dequeue = new TQueueDequeue();
          struct.dequeue.read(iprot);
          struct.setDequeueIsSet(true);
        }
      }
    }

  }

  public static class dequeue_result implements org.apache.thrift.TBase<dequeue_result, dequeue_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dequeue_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dequeue_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dequeue_resultTupleSchemeFactory());
    }

    public TDequeueResult success; // required
    public TOperationException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDequeueResult.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dequeue_result.class, metaDataMap);
    }

    public dequeue_result() {
    }

    public dequeue_result(
      TDequeueResult success,
      TOperationException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dequeue_result(dequeue_result other) {
      if (other.isSetSuccess()) {
        this.success = new TDequeueResult(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new TOperationException(other.ex);
      }
    }

    public dequeue_result deepCopy() {
      return new dequeue_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public TDequeueResult getSuccess() {
      return this.success;
    }

    public dequeue_result setSuccess(TDequeueResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TOperationException getEx() {
      return this.ex;
    }

    public dequeue_result setEx(TOperationException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TDequeueResult)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((TOperationException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dequeue_result)
        return this.equals((dequeue_result)that);
      return false;
    }

    public boolean equals(dequeue_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(dequeue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      dequeue_result typedOther = (dequeue_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dequeue_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dequeue_resultStandardSchemeFactory implements SchemeFactory {
      public dequeue_resultStandardScheme getScheme() {
        return new dequeue_resultStandardScheme();
      }
    }

    private static class dequeue_resultStandardScheme extends StandardScheme<dequeue_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dequeue_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TDequeueResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new TOperationException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dequeue_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dequeue_resultTupleSchemeFactory implements SchemeFactory {
      public dequeue_resultTupleScheme getScheme() {
        return new dequeue_resultTupleScheme();
      }
    }

    private static class dequeue_resultTupleScheme extends TupleScheme<dequeue_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dequeue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dequeue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TDequeueResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new TOperationException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class getGroupId_args implements org.apache.thrift.TBase<getGroupId_args, getGroupId_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGroupId_args");

    private static final org.apache.thrift.protocol.TField CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("context", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField GET_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("getGroupId", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGroupId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGroupId_argsTupleSchemeFactory());
    }

    public TOperationContext context; // required
    public TGetGroupId getGroupId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTEXT((short)1, "context"),
      GET_GROUP_ID((short)2, "getGroupId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTEXT
            return CONTEXT;
          case 2: // GET_GROUP_ID
            return GET_GROUP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("context", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOperationContext.class)));
      tmpMap.put(_Fields.GET_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("getGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGetGroupId.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGroupId_args.class, metaDataMap);
    }

    public getGroupId_args() {
    }

    public getGroupId_args(
      TOperationContext context,
      TGetGroupId getGroupId)
    {
      this();
      this.context = context;
      this.getGroupId = getGroupId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroupId_args(getGroupId_args other) {
      if (other.isSetContext()) {
        this.context = new TOperationContext(other.context);
      }
      if (other.isSetGetGroupId()) {
        this.getGroupId = new TGetGroupId(other.getGroupId);
      }
    }

    public getGroupId_args deepCopy() {
      return new getGroupId_args(this);
    }

    @Override
    public void clear() {
      this.context = null;
      this.getGroupId = null;
    }

    public TOperationContext getContext() {
      return this.context;
    }

    public getGroupId_args setContext(TOperationContext context) {
      this.context = context;
      return this;
    }

    public void unsetContext() {
      this.context = null;
    }

    /** Returns true if field context is set (has been assigned a value) and false otherwise */
    public boolean isSetContext() {
      return this.context != null;
    }

    public void setContextIsSet(boolean value) {
      if (!value) {
        this.context = null;
      }
    }

    public TGetGroupId getGetGroupId() {
      return this.getGroupId;
    }

    public getGroupId_args setGetGroupId(TGetGroupId getGroupId) {
      this.getGroupId = getGroupId;
      return this;
    }

    public void unsetGetGroupId() {
      this.getGroupId = null;
    }

    /** Returns true if field getGroupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGetGroupId() {
      return this.getGroupId != null;
    }

    public void setGetGroupIdIsSet(boolean value) {
      if (!value) {
        this.getGroupId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTEXT:
        if (value == null) {
          unsetContext();
        } else {
          setContext((TOperationContext)value);
        }
        break;

      case GET_GROUP_ID:
        if (value == null) {
          unsetGetGroupId();
        } else {
          setGetGroupId((TGetGroupId)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTEXT:
        return getContext();

      case GET_GROUP_ID:
        return getGetGroupId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTEXT:
        return isSetContext();
      case GET_GROUP_ID:
        return isSetGetGroupId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroupId_args)
        return this.equals((getGroupId_args)that);
      return false;
    }

    public boolean equals(getGroupId_args that) {
      if (that == null)
        return false;

      boolean this_present_context = true && this.isSetContext();
      boolean that_present_context = true && that.isSetContext();
      if (this_present_context || that_present_context) {
        if (!(this_present_context && that_present_context))
          return false;
        if (!this.context.equals(that.context))
          return false;
      }

      boolean this_present_getGroupId = true && this.isSetGetGroupId();
      boolean that_present_getGroupId = true && that.isSetGetGroupId();
      if (this_present_getGroupId || that_present_getGroupId) {
        if (!(this_present_getGroupId && that_present_getGroupId))
          return false;
        if (!this.getGroupId.equals(that.getGroupId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getGroupId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getGroupId_args typedOther = (getGroupId_args)other;

      lastComparison = Boolean.valueOf(isSetContext()).compareTo(typedOther.isSetContext());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContext()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.context, typedOther.context);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGetGroupId()).compareTo(typedOther.isSetGetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGetGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getGroupId, typedOther.getGroupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGroupId_args(");
      boolean first = true;

      sb.append("context:");
      if (this.context == null) {
        sb.append("null");
      } else {
        sb.append(this.context);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("getGroupId:");
      if (this.getGroupId == null) {
        sb.append("null");
      } else {
        sb.append(this.getGroupId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGroupId_argsStandardSchemeFactory implements SchemeFactory {
      public getGroupId_argsStandardScheme getScheme() {
        return new getGroupId_argsStandardScheme();
      }
    }

    private static class getGroupId_argsStandardScheme extends StandardScheme<getGroupId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGroupId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.context = new TOperationContext();
                struct.context.read(iprot);
                struct.setContextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GET_GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.getGroupId = new TGetGroupId();
                struct.getGroupId.read(iprot);
                struct.setGetGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGroupId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.context != null) {
          oprot.writeFieldBegin(CONTEXT_FIELD_DESC);
          struct.context.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.getGroupId != null) {
          oprot.writeFieldBegin(GET_GROUP_ID_FIELD_DESC);
          struct.getGroupId.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGroupId_argsTupleSchemeFactory implements SchemeFactory {
      public getGroupId_argsTupleScheme getScheme() {
        return new getGroupId_argsTupleScheme();
      }
    }

    private static class getGroupId_argsTupleScheme extends TupleScheme<getGroupId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGroupId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetContext()) {
          optionals.set(0);
        }
        if (struct.isSetGetGroupId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetContext()) {
          struct.context.write(oprot);
        }
        if (struct.isSetGetGroupId()) {
          struct.getGroupId.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGroupId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.context = new TOperationContext();
          struct.context.read(iprot);
          struct.setContextIsSet(true);
        }
        if (incoming.get(1)) {
          struct.getGroupId = new TGetGroupId();
          struct.getGroupId.read(iprot);
          struct.setGetGroupIdIsSet(true);
        }
      }
    }

  }

  public static class getGroupId_result implements org.apache.thrift.TBase<getGroupId_result, getGroupId_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGroupId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGroupId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGroupId_resultTupleSchemeFactory());
    }

    public long success; // required
    public TOperationException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGroupId_result.class, metaDataMap);
    }

    public getGroupId_result() {
    }

    public getGroupId_result(
      long success,
      TOperationException ex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroupId_result(getGroupId_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new TOperationException(other.ex);
      }
    }

    public getGroupId_result deepCopy() {
      return new getGroupId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.ex = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public getGroupId_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public TOperationException getEx() {
      return this.ex;
    }

    public getGroupId_result setEx(TOperationException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((TOperationException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroupId_result)
        return this.equals((getGroupId_result)that);
      return false;
    }

    public boolean equals(getGroupId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getGroupId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getGroupId_result typedOther = (getGroupId_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGroupId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGroupId_resultStandardSchemeFactory implements SchemeFactory {
      public getGroupId_resultStandardScheme getScheme() {
        return new getGroupId_resultStandardScheme();
      }
    }

    private static class getGroupId_resultStandardScheme extends StandardScheme<getGroupId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGroupId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new TOperationException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGroupId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(struct.success);
        oprot.writeFieldEnd();
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGroupId_resultTupleSchemeFactory implements SchemeFactory {
      public getGroupId_resultTupleScheme getScheme() {
        return new getGroupId_resultTupleScheme();
      }
    }

    private static class getGroupId_resultTupleScheme extends TupleScheme<getGroupId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGroupId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGroupId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new TOperationException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class getQueueInfo_args implements org.apache.thrift.TBase<getQueueInfo_args, getQueueInfo_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getQueueInfo_args");

    private static final org.apache.thrift.protocol.TField CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("context", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField GET_QUEUE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("getQueueInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getQueueInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getQueueInfo_argsTupleSchemeFactory());
    }

    public TOperationContext context; // required
    public TGetQueueInfo getQueueInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTEXT((short)1, "context"),
      GET_QUEUE_INFO((short)2, "getQueueInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTEXT
            return CONTEXT;
          case 2: // GET_QUEUE_INFO
            return GET_QUEUE_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("context", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOperationContext.class)));
      tmpMap.put(_Fields.GET_QUEUE_INFO, new org.apache.thrift.meta_data.FieldMetaData("getQueueInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGetQueueInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getQueueInfo_args.class, metaDataMap);
    }

    public getQueueInfo_args() {
    }

    public getQueueInfo_args(
      TOperationContext context,
      TGetQueueInfo getQueueInfo)
    {
      this();
      this.context = context;
      this.getQueueInfo = getQueueInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getQueueInfo_args(getQueueInfo_args other) {
      if (other.isSetContext()) {
        this.context = new TOperationContext(other.context);
      }
      if (other.isSetGetQueueInfo()) {
        this.getQueueInfo = new TGetQueueInfo(other.getQueueInfo);
      }
    }

    public getQueueInfo_args deepCopy() {
      return new getQueueInfo_args(this);
    }

    @Override
    public void clear() {
      this.context = null;
      this.getQueueInfo = null;
    }

    public TOperationContext getContext() {
      return this.context;
    }

    public getQueueInfo_args setContext(TOperationContext context) {
      this.context = context;
      return this;
    }

    public void unsetContext() {
      this.context = null;
    }

    /** Returns true if field context is set (has been assigned a value) and false otherwise */
    public boolean isSetContext() {
      return this.context != null;
    }

    public void setContextIsSet(boolean value) {
      if (!value) {
        this.context = null;
      }
    }

    public TGetQueueInfo getGetQueueInfo() {
      return this.getQueueInfo;
    }

    public getQueueInfo_args setGetQueueInfo(TGetQueueInfo getQueueInfo) {
      this.getQueueInfo = getQueueInfo;
      return this;
    }

    public void unsetGetQueueInfo() {
      this.getQueueInfo = null;
    }

    /** Returns true if field getQueueInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetGetQueueInfo() {
      return this.getQueueInfo != null;
    }

    public void setGetQueueInfoIsSet(boolean value) {
      if (!value) {
        this.getQueueInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTEXT:
        if (value == null) {
          unsetContext();
        } else {
          setContext((TOperationContext)value);
        }
        break;

      case GET_QUEUE_INFO:
        if (value == null) {
          unsetGetQueueInfo();
        } else {
          setGetQueueInfo((TGetQueueInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTEXT:
        return getContext();

      case GET_QUEUE_INFO:
        return getGetQueueInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTEXT:
        return isSetContext();
      case GET_QUEUE_INFO:
        return isSetGetQueueInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getQueueInfo_args)
        return this.equals((getQueueInfo_args)that);
      return false;
    }

    public boolean equals(getQueueInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_context = true && this.isSetContext();
      boolean that_present_context = true && that.isSetContext();
      if (this_present_context || that_present_context) {
        if (!(this_present_context && that_present_context))
          return false;
        if (!this.context.equals(that.context))
          return false;
      }

      boolean this_present_getQueueInfo = true && this.isSetGetQueueInfo();
      boolean that_present_getQueueInfo = true && that.isSetGetQueueInfo();
      if (this_present_getQueueInfo || that_present_getQueueInfo) {
        if (!(this_present_getQueueInfo && that_present_getQueueInfo))
          return false;
        if (!this.getQueueInfo.equals(that.getQueueInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getQueueInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getQueueInfo_args typedOther = (getQueueInfo_args)other;

      lastComparison = Boolean.valueOf(isSetContext()).compareTo(typedOther.isSetContext());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContext()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.context, typedOther.context);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGetQueueInfo()).compareTo(typedOther.isSetGetQueueInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGetQueueInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getQueueInfo, typedOther.getQueueInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getQueueInfo_args(");
      boolean first = true;

      sb.append("context:");
      if (this.context == null) {
        sb.append("null");
      } else {
        sb.append(this.context);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("getQueueInfo:");
      if (this.getQueueInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.getQueueInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getQueueInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getQueueInfo_argsStandardScheme getScheme() {
        return new getQueueInfo_argsStandardScheme();
      }
    }

    private static class getQueueInfo_argsStandardScheme extends StandardScheme<getQueueInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getQueueInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.context = new TOperationContext();
                struct.context.read(iprot);
                struct.setContextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GET_QUEUE_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.getQueueInfo = new TGetQueueInfo();
                struct.getQueueInfo.read(iprot);
                struct.setGetQueueInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getQueueInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.context != null) {
          oprot.writeFieldBegin(CONTEXT_FIELD_DESC);
          struct.context.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.getQueueInfo != null) {
          oprot.writeFieldBegin(GET_QUEUE_INFO_FIELD_DESC);
          struct.getQueueInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getQueueInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getQueueInfo_argsTupleScheme getScheme() {
        return new getQueueInfo_argsTupleScheme();
      }
    }

    private static class getQueueInfo_argsTupleScheme extends TupleScheme<getQueueInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getQueueInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetContext()) {
          optionals.set(0);
        }
        if (struct.isSetGetQueueInfo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetContext()) {
          struct.context.write(oprot);
        }
        if (struct.isSetGetQueueInfo()) {
          struct.getQueueInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getQueueInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.context = new TOperationContext();
          struct.context.read(iprot);
          struct.setContextIsSet(true);
        }
        if (incoming.get(1)) {
          struct.getQueueInfo = new TGetQueueInfo();
          struct.getQueueInfo.read(iprot);
          struct.setGetQueueInfoIsSet(true);
        }
      }
    }

  }

  public static class getQueueInfo_result implements org.apache.thrift.TBase<getQueueInfo_result, getQueueInfo_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getQueueInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getQueueInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getQueueInfo_resultTupleSchemeFactory());
    }

    public TQueueInfo success; // required
    public TOperationException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQueueInfo.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getQueueInfo_result.class, metaDataMap);
    }

    public getQueueInfo_result() {
    }

    public getQueueInfo_result(
      TQueueInfo success,
      TOperationException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getQueueInfo_result(getQueueInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new TQueueInfo(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new TOperationException(other.ex);
      }
    }

    public getQueueInfo_result deepCopy() {
      return new getQueueInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public TQueueInfo getSuccess() {
      return this.success;
    }

    public getQueueInfo_result setSuccess(TQueueInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TOperationException getEx() {
      return this.ex;
    }

    public getQueueInfo_result setEx(TOperationException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TQueueInfo)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((TOperationException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getQueueInfo_result)
        return this.equals((getQueueInfo_result)that);
      return false;
    }

    public boolean equals(getQueueInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getQueueInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getQueueInfo_result typedOther = (getQueueInfo_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getQueueInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getQueueInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getQueueInfo_resultStandardScheme getScheme() {
        return new getQueueInfo_resultStandardScheme();
      }
    }

    private static class getQueueInfo_resultStandardScheme extends StandardScheme<getQueueInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getQueueInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TQueueInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new TOperationException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getQueueInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getQueueInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getQueueInfo_resultTupleScheme getScheme() {
        return new getQueueInfo_resultTupleScheme();
      }
    }

    private static class getQueueInfo_resultTupleScheme extends TupleScheme<getQueueInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getQueueInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getQueueInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TQueueInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new TOperationException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class clearFabric_args implements org.apache.thrift.TBase<clearFabric_args, clearFabric_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clearFabric_args");

    private static final org.apache.thrift.protocol.TField CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("context", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CLEAR_FABRIC_FIELD_DESC = new org.apache.thrift.protocol.TField("clearFabric", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new clearFabric_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clearFabric_argsTupleSchemeFactory());
    }

    public TOperationContext context; // required
    public TClearFabric clearFabric; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTEXT((short)1, "context"),
      CLEAR_FABRIC((short)2, "clearFabric");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTEXT
            return CONTEXT;
          case 2: // CLEAR_FABRIC
            return CLEAR_FABRIC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("context", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOperationContext.class)));
      tmpMap.put(_Fields.CLEAR_FABRIC, new org.apache.thrift.meta_data.FieldMetaData("clearFabric", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TClearFabric.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clearFabric_args.class, metaDataMap);
    }

    public clearFabric_args() {
    }

    public clearFabric_args(
      TOperationContext context,
      TClearFabric clearFabric)
    {
      this();
      this.context = context;
      this.clearFabric = clearFabric;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clearFabric_args(clearFabric_args other) {
      if (other.isSetContext()) {
        this.context = new TOperationContext(other.context);
      }
      if (other.isSetClearFabric()) {
        this.clearFabric = new TClearFabric(other.clearFabric);
      }
    }

    public clearFabric_args deepCopy() {
      return new clearFabric_args(this);
    }

    @Override
    public void clear() {
      this.context = null;
      this.clearFabric = null;
    }

    public TOperationContext getContext() {
      return this.context;
    }

    public clearFabric_args setContext(TOperationContext context) {
      this.context = context;
      return this;
    }

    public void unsetContext() {
      this.context = null;
    }

    /** Returns true if field context is set (has been assigned a value) and false otherwise */
    public boolean isSetContext() {
      return this.context != null;
    }

    public void setContextIsSet(boolean value) {
      if (!value) {
        this.context = null;
      }
    }

    public TClearFabric getClearFabric() {
      return this.clearFabric;
    }

    public clearFabric_args setClearFabric(TClearFabric clearFabric) {
      this.clearFabric = clearFabric;
      return this;
    }

    public void unsetClearFabric() {
      this.clearFabric = null;
    }

    /** Returns true if field clearFabric is set (has been assigned a value) and false otherwise */
    public boolean isSetClearFabric() {
      return this.clearFabric != null;
    }

    public void setClearFabricIsSet(boolean value) {
      if (!value) {
        this.clearFabric = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTEXT:
        if (value == null) {
          unsetContext();
        } else {
          setContext((TOperationContext)value);
        }
        break;

      case CLEAR_FABRIC:
        if (value == null) {
          unsetClearFabric();
        } else {
          setClearFabric((TClearFabric)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTEXT:
        return getContext();

      case CLEAR_FABRIC:
        return getClearFabric();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTEXT:
        return isSetContext();
      case CLEAR_FABRIC:
        return isSetClearFabric();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clearFabric_args)
        return this.equals((clearFabric_args)that);
      return false;
    }

    public boolean equals(clearFabric_args that) {
      if (that == null)
        return false;

      boolean this_present_context = true && this.isSetContext();
      boolean that_present_context = true && that.isSetContext();
      if (this_present_context || that_present_context) {
        if (!(this_present_context && that_present_context))
          return false;
        if (!this.context.equals(that.context))
          return false;
      }

      boolean this_present_clearFabric = true && this.isSetClearFabric();
      boolean that_present_clearFabric = true && that.isSetClearFabric();
      if (this_present_clearFabric || that_present_clearFabric) {
        if (!(this_present_clearFabric && that_present_clearFabric))
          return false;
        if (!this.clearFabric.equals(that.clearFabric))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(clearFabric_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      clearFabric_args typedOther = (clearFabric_args)other;

      lastComparison = Boolean.valueOf(isSetContext()).compareTo(typedOther.isSetContext());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContext()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.context, typedOther.context);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClearFabric()).compareTo(typedOther.isSetClearFabric());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClearFabric()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clearFabric, typedOther.clearFabric);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clearFabric_args(");
      boolean first = true;

      sb.append("context:");
      if (this.context == null) {
        sb.append("null");
      } else {
        sb.append(this.context);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clearFabric:");
      if (this.clearFabric == null) {
        sb.append("null");
      } else {
        sb.append(this.clearFabric);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clearFabric_argsStandardSchemeFactory implements SchemeFactory {
      public clearFabric_argsStandardScheme getScheme() {
        return new clearFabric_argsStandardScheme();
      }
    }

    private static class clearFabric_argsStandardScheme extends StandardScheme<clearFabric_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clearFabric_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.context = new TOperationContext();
                struct.context.read(iprot);
                struct.setContextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLEAR_FABRIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clearFabric = new TClearFabric();
                struct.clearFabric.read(iprot);
                struct.setClearFabricIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clearFabric_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.context != null) {
          oprot.writeFieldBegin(CONTEXT_FIELD_DESC);
          struct.context.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.clearFabric != null) {
          oprot.writeFieldBegin(CLEAR_FABRIC_FIELD_DESC);
          struct.clearFabric.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clearFabric_argsTupleSchemeFactory implements SchemeFactory {
      public clearFabric_argsTupleScheme getScheme() {
        return new clearFabric_argsTupleScheme();
      }
    }

    private static class clearFabric_argsTupleScheme extends TupleScheme<clearFabric_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clearFabric_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetContext()) {
          optionals.set(0);
        }
        if (struct.isSetClearFabric()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetContext()) {
          struct.context.write(oprot);
        }
        if (struct.isSetClearFabric()) {
          struct.clearFabric.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clearFabric_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.context = new TOperationContext();
          struct.context.read(iprot);
          struct.setContextIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clearFabric = new TClearFabric();
          struct.clearFabric.read(iprot);
          struct.setClearFabricIsSet(true);
        }
      }
    }

  }

  public static class clearFabric_result implements org.apache.thrift.TBase<clearFabric_result, clearFabric_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clearFabric_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new clearFabric_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clearFabric_resultTupleSchemeFactory());
    }

    public TOperationException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clearFabric_result.class, metaDataMap);
    }

    public clearFabric_result() {
    }

    public clearFabric_result(
      TOperationException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clearFabric_result(clearFabric_result other) {
      if (other.isSetEx()) {
        this.ex = new TOperationException(other.ex);
      }
    }

    public clearFabric_result deepCopy() {
      return new clearFabric_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public TOperationException getEx() {
      return this.ex;
    }

    public clearFabric_result setEx(TOperationException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((TOperationException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clearFabric_result)
        return this.equals((clearFabric_result)that);
      return false;
    }

    public boolean equals(clearFabric_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(clearFabric_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      clearFabric_result typedOther = (clearFabric_result)other;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clearFabric_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clearFabric_resultStandardSchemeFactory implements SchemeFactory {
      public clearFabric_resultStandardScheme getScheme() {
        return new clearFabric_resultStandardScheme();
      }
    }

    private static class clearFabric_resultStandardScheme extends StandardScheme<clearFabric_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clearFabric_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new TOperationException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clearFabric_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clearFabric_resultTupleSchemeFactory implements SchemeFactory {
      public clearFabric_resultTupleScheme getScheme() {
        return new clearFabric_resultTupleScheme();
      }
    }

    private static class clearFabric_resultTupleScheme extends TupleScheme<clearFabric_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clearFabric_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clearFabric_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new TOperationException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class openTable_args implements org.apache.thrift.TBase<openTable_args, openTable_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openTable_args");

    private static final org.apache.thrift.protocol.TField CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("context", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OPEN_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("openTable", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openTable_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openTable_argsTupleSchemeFactory());
    }

    public TOperationContext context; // required
    public TOpenTable openTable; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONTEXT((short)1, "context"),
      OPEN_TABLE((short)2, "openTable");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONTEXT
            return CONTEXT;
          case 2: // OPEN_TABLE
            return OPEN_TABLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("context", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOperationContext.class)));
      tmpMap.put(_Fields.OPEN_TABLE, new org.apache.thrift.meta_data.FieldMetaData("openTable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TOpenTable.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openTable_args.class, metaDataMap);
    }

    public openTable_args() {
    }

    public openTable_args(
      TOperationContext context,
      TOpenTable openTable)
    {
      this();
      this.context = context;
      this.openTable = openTable;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openTable_args(openTable_args other) {
      if (other.isSetContext()) {
        this.context = new TOperationContext(other.context);
      }
      if (other.isSetOpenTable()) {
        this.openTable = new TOpenTable(other.openTable);
      }
    }

    public openTable_args deepCopy() {
      return new openTable_args(this);
    }

    @Override
    public void clear() {
      this.context = null;
      this.openTable = null;
    }

    public TOperationContext getContext() {
      return this.context;
    }

    public openTable_args setContext(TOperationContext context) {
      this.context = context;
      return this;
    }

    public void unsetContext() {
      this.context = null;
    }

    /** Returns true if field context is set (has been assigned a value) and false otherwise */
    public boolean isSetContext() {
      return this.context != null;
    }

    public void setContextIsSet(boolean value) {
      if (!value) {
        this.context = null;
      }
    }

    public TOpenTable getOpenTable() {
      return this.openTable;
    }

    public openTable_args setOpenTable(TOpenTable openTable) {
      this.openTable = openTable;
      return this;
    }

    public void unsetOpenTable() {
      this.openTable = null;
    }

    /** Returns true if field openTable is set (has been assigned a value) and false otherwise */
    public boolean isSetOpenTable() {
      return this.openTable != null;
    }

    public void setOpenTableIsSet(boolean value) {
      if (!value) {
        this.openTable = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONTEXT:
        if (value == null) {
          unsetContext();
        } else {
          setContext((TOperationContext)value);
        }
        break;

      case OPEN_TABLE:
        if (value == null) {
          unsetOpenTable();
        } else {
          setOpenTable((TOpenTable)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONTEXT:
        return getContext();

      case OPEN_TABLE:
        return getOpenTable();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONTEXT:
        return isSetContext();
      case OPEN_TABLE:
        return isSetOpenTable();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openTable_args)
        return this.equals((openTable_args)that);
      return false;
    }

    public boolean equals(openTable_args that) {
      if (that == null)
        return false;

      boolean this_present_context = true && this.isSetContext();
      boolean that_present_context = true && that.isSetContext();
      if (this_present_context || that_present_context) {
        if (!(this_present_context && that_present_context))
          return false;
        if (!this.context.equals(that.context))
          return false;
      }

      boolean this_present_openTable = true && this.isSetOpenTable();
      boolean that_present_openTable = true && that.isSetOpenTable();
      if (this_present_openTable || that_present_openTable) {
        if (!(this_present_openTable && that_present_openTable))
          return false;
        if (!this.openTable.equals(that.openTable))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(openTable_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      openTable_args typedOther = (openTable_args)other;

      lastComparison = Boolean.valueOf(isSetContext()).compareTo(typedOther.isSetContext());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContext()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.context, typedOther.context);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOpenTable()).compareTo(typedOther.isSetOpenTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOpenTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openTable, typedOther.openTable);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openTable_args(");
      boolean first = true;

      sb.append("context:");
      if (this.context == null) {
        sb.append("null");
      } else {
        sb.append(this.context);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("openTable:");
      if (this.openTable == null) {
        sb.append("null");
      } else {
        sb.append(this.openTable);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openTable_argsStandardSchemeFactory implements SchemeFactory {
      public openTable_argsStandardScheme getScheme() {
        return new openTable_argsStandardScheme();
      }
    }

    private static class openTable_argsStandardScheme extends StandardScheme<openTable_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openTable_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONTEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.context = new TOperationContext();
                struct.context.read(iprot);
                struct.setContextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPEN_TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.openTable = new TOpenTable();
                struct.openTable.read(iprot);
                struct.setOpenTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openTable_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.context != null) {
          oprot.writeFieldBegin(CONTEXT_FIELD_DESC);
          struct.context.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.openTable != null) {
          oprot.writeFieldBegin(OPEN_TABLE_FIELD_DESC);
          struct.openTable.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openTable_argsTupleSchemeFactory implements SchemeFactory {
      public openTable_argsTupleScheme getScheme() {
        return new openTable_argsTupleScheme();
      }
    }

    private static class openTable_argsTupleScheme extends TupleScheme<openTable_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openTable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetContext()) {
          optionals.set(0);
        }
        if (struct.isSetOpenTable()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetContext()) {
          struct.context.write(oprot);
        }
        if (struct.isSetOpenTable()) {
          struct.openTable.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openTable_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.context = new TOperationContext();
          struct.context.read(iprot);
          struct.setContextIsSet(true);
        }
        if (incoming.get(1)) {
          struct.openTable = new TOpenTable();
          struct.openTable.read(iprot);
          struct.setOpenTableIsSet(true);
        }
      }
    }

  }

  public static class openTable_result implements org.apache.thrift.TBase<openTable_result, openTable_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openTable_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openTable_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openTable_resultTupleSchemeFactory());
    }

    public TOperationException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openTable_result.class, metaDataMap);
    }

    public openTable_result() {
    }

    public openTable_result(
      TOperationException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openTable_result(openTable_result other) {
      if (other.isSetEx()) {
        this.ex = new TOperationException(other.ex);
      }
    }

    public openTable_result deepCopy() {
      return new openTable_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public TOperationException getEx() {
      return this.ex;
    }

    public openTable_result setEx(TOperationException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((TOperationException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openTable_result)
        return this.equals((openTable_result)that);
      return false;
    }

    public boolean equals(openTable_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(openTable_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      openTable_result typedOther = (openTable_result)other;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openTable_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openTable_resultStandardSchemeFactory implements SchemeFactory {
      public openTable_resultStandardScheme getScheme() {
        return new openTable_resultStandardScheme();
      }
    }

    private static class openTable_resultStandardScheme extends StandardScheme<openTable_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openTable_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new TOperationException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openTable_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openTable_resultTupleSchemeFactory implements SchemeFactory {
      public openTable_resultTupleScheme getScheme() {
        return new openTable_resultTupleScheme();
      }
    }

    private static class openTable_resultTupleScheme extends TupleScheme<openTable_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openTable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openTable_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new TOperationException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

}
