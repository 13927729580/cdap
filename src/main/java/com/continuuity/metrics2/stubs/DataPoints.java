/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.continuuity.metrics2.stubs;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Collection of data points for a given metric.
 */
public class DataPoints implements org.apache.thrift.TBase<DataPoints, DataPoints._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DataPoints");

  private static final org.apache.thrift.protocol.TField POINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("points", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField CURRENT_FIELD_DESC = new org.apache.thrift.protocol.TField("current", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("max", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("min", org.apache.thrift.protocol.TType.MAP, (short)4);

  private Map<String,List<DataPoint>> points; // required
  private Map<String,Double> current; // required
  private Map<String,Double> max; // required
  private Map<String,Double> min; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    POINTS((short)1, "points"),
    CURRENT((short)2, "current"),
    MAX((short)3, "max"),
    MIN((short)4, "min");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // POINTS
          return POINTS;
        case 2: // CURRENT
          return CURRENT;
        case 3: // MAX
          return MAX;
        case 4: // MIN
          return MIN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.POINTS, new org.apache.thrift.meta_data.FieldMetaData("points", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataPoint.class)))));
    tmpMap.put(_Fields.CURRENT, new org.apache.thrift.meta_data.FieldMetaData("current", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.MAX, new org.apache.thrift.meta_data.FieldMetaData("max", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.MIN, new org.apache.thrift.meta_data.FieldMetaData("min", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DataPoints.class, metaDataMap);
  }

  public DataPoints() {
  }

  public DataPoints(
    Map<String,List<DataPoint>> points)
  {
    this();
    this.points = points;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DataPoints(DataPoints other) {
    if (other.isSetPoints()) {
      Map<String,List<DataPoint>> __this__points = new HashMap<String,List<DataPoint>>();
      for (Map.Entry<String, List<DataPoint>> other_element : other.points.entrySet()) {

        String other_element_key = other_element.getKey();
        List<DataPoint> other_element_value = other_element.getValue();

        String __this__points_copy_key = other_element_key;

        List<DataPoint> __this__points_copy_value = new ArrayList<DataPoint>();
        for (DataPoint other_element_value_element : other_element_value) {
          __this__points_copy_value.add(new DataPoint(other_element_value_element));
        }

        __this__points.put(__this__points_copy_key, __this__points_copy_value);
      }
      this.points = __this__points;
    }
    if (other.isSetCurrent()) {
      Map<String,Double> __this__current = new HashMap<String,Double>();
      for (Map.Entry<String, Double> other_element : other.current.entrySet()) {

        String other_element_key = other_element.getKey();
        Double other_element_value = other_element.getValue();

        String __this__current_copy_key = other_element_key;

        Double __this__current_copy_value = other_element_value;

        __this__current.put(__this__current_copy_key, __this__current_copy_value);
      }
      this.current = __this__current;
    }
    if (other.isSetMax()) {
      Map<String,Double> __this__max = new HashMap<String,Double>();
      for (Map.Entry<String, Double> other_element : other.max.entrySet()) {

        String other_element_key = other_element.getKey();
        Double other_element_value = other_element.getValue();

        String __this__max_copy_key = other_element_key;

        Double __this__max_copy_value = other_element_value;

        __this__max.put(__this__max_copy_key, __this__max_copy_value);
      }
      this.max = __this__max;
    }
    if (other.isSetMin()) {
      Map<String,Double> __this__min = new HashMap<String,Double>();
      for (Map.Entry<String, Double> other_element : other.min.entrySet()) {

        String other_element_key = other_element.getKey();
        Double other_element_value = other_element.getValue();

        String __this__min_copy_key = other_element_key;

        Double __this__min_copy_value = other_element_value;

        __this__min.put(__this__min_copy_key, __this__min_copy_value);
      }
      this.min = __this__min;
    }
  }

  public DataPoints deepCopy() {
    return new DataPoints(this);
  }

  @Override
  public void clear() {
    this.points = null;
    this.current = null;
    this.max = null;
    this.min = null;
  }

  public int getPointsSize() {
    return (this.points == null) ? 0 : this.points.size();
  }

  public void putToPoints(String key, List<DataPoint> val) {
    if (this.points == null) {
      this.points = new HashMap<String,List<DataPoint>>();
    }
    this.points.put(key, val);
  }

  public Map<String,List<DataPoint>> getPoints() {
    return this.points;
  }

  public void setPoints(Map<String,List<DataPoint>> points) {
    this.points = points;
  }

  public void unsetPoints() {
    this.points = null;
  }

  /** Returns true if field points is set (has been assigned a value) and false otherwise */
  public boolean isSetPoints() {
    return this.points != null;
  }

  public void setPointsIsSet(boolean value) {
    if (!value) {
      this.points = null;
    }
  }

  public int getCurrentSize() {
    return (this.current == null) ? 0 : this.current.size();
  }

  public void putToCurrent(String key, double val) {
    if (this.current == null) {
      this.current = new HashMap<String,Double>();
    }
    this.current.put(key, val);
  }

  public Map<String,Double> getCurrent() {
    return this.current;
  }

  public void setCurrent(Map<String,Double> current) {
    this.current = current;
  }

  public void unsetCurrent() {
    this.current = null;
  }

  /** Returns true if field current is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrent() {
    return this.current != null;
  }

  public void setCurrentIsSet(boolean value) {
    if (!value) {
      this.current = null;
    }
  }

  public int getMaxSize() {
    return (this.max == null) ? 0 : this.max.size();
  }

  public void putToMax(String key, double val) {
    if (this.max == null) {
      this.max = new HashMap<String,Double>();
    }
    this.max.put(key, val);
  }

  public Map<String,Double> getMax() {
    return this.max;
  }

  public void setMax(Map<String,Double> max) {
    this.max = max;
  }

  public void unsetMax() {
    this.max = null;
  }

  /** Returns true if field max is set (has been assigned a value) and false otherwise */
  public boolean isSetMax() {
    return this.max != null;
  }

  public void setMaxIsSet(boolean value) {
    if (!value) {
      this.max = null;
    }
  }

  public int getMinSize() {
    return (this.min == null) ? 0 : this.min.size();
  }

  public void putToMin(String key, double val) {
    if (this.min == null) {
      this.min = new HashMap<String,Double>();
    }
    this.min.put(key, val);
  }

  public Map<String,Double> getMin() {
    return this.min;
  }

  public void setMin(Map<String,Double> min) {
    this.min = min;
  }

  public void unsetMin() {
    this.min = null;
  }

  /** Returns true if field min is set (has been assigned a value) and false otherwise */
  public boolean isSetMin() {
    return this.min != null;
  }

  public void setMinIsSet(boolean value) {
    if (!value) {
      this.min = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case POINTS:
      if (value == null) {
        unsetPoints();
      } else {
        setPoints((Map<String,List<DataPoint>>)value);
      }
      break;

    case CURRENT:
      if (value == null) {
        unsetCurrent();
      } else {
        setCurrent((Map<String,Double>)value);
      }
      break;

    case MAX:
      if (value == null) {
        unsetMax();
      } else {
        setMax((Map<String,Double>)value);
      }
      break;

    case MIN:
      if (value == null) {
        unsetMin();
      } else {
        setMin((Map<String,Double>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case POINTS:
      return getPoints();

    case CURRENT:
      return getCurrent();

    case MAX:
      return getMax();

    case MIN:
      return getMin();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case POINTS:
      return isSetPoints();
    case CURRENT:
      return isSetCurrent();
    case MAX:
      return isSetMax();
    case MIN:
      return isSetMin();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DataPoints)
      return this.equals((DataPoints)that);
    return false;
  }

  public boolean equals(DataPoints that) {
    if (that == null)
      return false;

    boolean this_present_points = true && this.isSetPoints();
    boolean that_present_points = true && that.isSetPoints();
    if (this_present_points || that_present_points) {
      if (!(this_present_points && that_present_points))
        return false;
      if (!this.points.equals(that.points))
        return false;
    }

    boolean this_present_current = true && this.isSetCurrent();
    boolean that_present_current = true && that.isSetCurrent();
    if (this_present_current || that_present_current) {
      if (!(this_present_current && that_present_current))
        return false;
      if (!this.current.equals(that.current))
        return false;
    }

    boolean this_present_max = true && this.isSetMax();
    boolean that_present_max = true && that.isSetMax();
    if (this_present_max || that_present_max) {
      if (!(this_present_max && that_present_max))
        return false;
      if (!this.max.equals(that.max))
        return false;
    }

    boolean this_present_min = true && this.isSetMin();
    boolean that_present_min = true && that.isSetMin();
    if (this_present_min || that_present_min) {
      if (!(this_present_min && that_present_min))
        return false;
      if (!this.min.equals(that.min))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_points = true && (isSetPoints());
    builder.append(present_points);
    if (present_points)
      builder.append(points);

    boolean present_current = true && (isSetCurrent());
    builder.append(present_current);
    if (present_current)
      builder.append(current);

    boolean present_max = true && (isSetMax());
    builder.append(present_max);
    if (present_max)
      builder.append(max);

    boolean present_min = true && (isSetMin());
    builder.append(present_min);
    if (present_min)
      builder.append(min);

    return builder.toHashCode();
  }

  public int compareTo(DataPoints other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DataPoints typedOther = (DataPoints)other;

    lastComparison = Boolean.valueOf(isSetPoints()).compareTo(typedOther.isSetPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.points, typedOther.points);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrent()).compareTo(typedOther.isSetCurrent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.current, typedOther.current);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax()).compareTo(typedOther.isSetMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max, typedOther.max);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMin()).compareTo(typedOther.isSetMin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min, typedOther.min);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // POINTS
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
              this.points = new HashMap<String,List<DataPoint>>(2*_map4.size);
              for (int _i5 = 0; _i5 < _map4.size; ++_i5)
              {
                String _key6; // required
                List<DataPoint> _val7; // required
                _key6 = iprot.readString();
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  _val7 = new ArrayList<DataPoint>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    DataPoint _elem10; // required
                    _elem10 = new DataPoint();
                    _elem10.read(iprot);
                    _val7.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                this.points.put(_key6, _val7);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // CURRENT
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map11 = iprot.readMapBegin();
              this.current = new HashMap<String,Double>(2*_map11.size);
              for (int _i12 = 0; _i12 < _map11.size; ++_i12)
              {
                String _key13; // required
                double _val14; // required
                _key13 = iprot.readString();
                _val14 = iprot.readDouble();
                this.current.put(_key13, _val14);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // MAX
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map15 = iprot.readMapBegin();
              this.max = new HashMap<String,Double>(2*_map15.size);
              for (int _i16 = 0; _i16 < _map15.size; ++_i16)
              {
                String _key17; // required
                double _val18; // required
                _key17 = iprot.readString();
                _val18 = iprot.readDouble();
                this.max.put(_key17, _val18);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // MIN
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map19 = iprot.readMapBegin();
              this.min = new HashMap<String,Double>(2*_map19.size);
              for (int _i20 = 0; _i20 < _map19.size; ++_i20)
              {
                String _key21; // required
                double _val22; // required
                _key21 = iprot.readString();
                _val22 = iprot.readDouble();
                this.min.put(_key21, _val22);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.points != null) {
      oprot.writeFieldBegin(POINTS_FIELD_DESC);
      {
        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, this.points.size()));
        for (Map.Entry<String, List<DataPoint>> _iter23 : this.points.entrySet())
        {
          oprot.writeString(_iter23.getKey());
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter23.getValue().size()));
            for (DataPoint _iter24 : _iter23.getValue())
            {
              _iter24.write(oprot);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.current != null) {
      if (isSetCurrent()) {
        oprot.writeFieldBegin(CURRENT_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, this.current.size()));
          for (Map.Entry<String, Double> _iter25 : this.current.entrySet())
          {
            oprot.writeString(_iter25.getKey());
            oprot.writeDouble(_iter25.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.max != null) {
      if (isSetMax()) {
        oprot.writeFieldBegin(MAX_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, this.max.size()));
          for (Map.Entry<String, Double> _iter26 : this.max.entrySet())
          {
            oprot.writeString(_iter26.getKey());
            oprot.writeDouble(_iter26.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.min != null) {
      if (isSetMin()) {
        oprot.writeFieldBegin(MIN_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, this.min.size()));
          for (Map.Entry<String, Double> _iter27 : this.min.entrySet())
          {
            oprot.writeString(_iter27.getKey());
            oprot.writeDouble(_iter27.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DataPoints(");
    boolean first = true;

    sb.append("points:");
    if (this.points == null) {
      sb.append("null");
    } else {
      sb.append(this.points);
    }
    first = false;
    if (isSetCurrent()) {
      if (!first) sb.append(", ");
      sb.append("current:");
      if (this.current == null) {
        sb.append("null");
      } else {
        sb.append(this.current);
      }
      first = false;
    }
    if (isSetMax()) {
      if (!first) sb.append(", ");
      sb.append("max:");
      if (this.max == null) {
        sb.append("null");
      } else {
        sb.append(this.max);
      }
      first = false;
    }
    if (isSetMin()) {
      if (!first) sb.append(", ");
      sb.append("min:");
      if (this.min == null) {
        sb.append("null");
      } else {
        sb.append(this.min);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

