/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.continuuity.metrics.stubs;

import java.util.*;

public class FlowState implements org.apache.thrift.TBase<FlowState, FlowState._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FlowState");

  private static final org.apache.thrift.protocol.TField APPLICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("application", org.apache.thrift.protocol.TType.STRING, (short) 1);
  private static final org.apache.thrift.protocol.TField FLOW_FIELD_DESC = new org.apache.thrift.protocol.TField("flow", org.apache.thrift.protocol.TType.STRING, (short) 2);
  private static final org.apache.thrift.protocol.TField LAST_STOPPPED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastStoppped", org.apache.thrift.protocol.TType.I32, (short) 3);
  private static final org.apache.thrift.protocol.TField LAST_STARTED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastStarted", org.apache.thrift.protocol.TType.I32, (short) 4);
  private static final org.apache.thrift.protocol.TField CURRENT_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("currentState", org.apache.thrift.protocol.TType.I32, (short) 5);
  private static final org.apache.thrift.protocol.TField RUNS_FIELD_DESC = new org.apache.thrift.protocol.TField("runs", org.apache.thrift.protocol.TType.I32, (short) 6);

  private String application; // required
  private String flow; // required
  private int lastStoppped; // required
  private int lastStarted; // required
  private int currentState; // required
  private int runs; // required

  /**
   * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
   */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APPLICATION((short) 1, "application"),
    FLOW((short) 2, "flow"),
    LAST_STOPPPED((short) 3, "lastStoppped"),
    LAST_STARTED((short) 4, "lastStarted"),
    CURRENT_STATE((short) 5, "currentState"),
    RUNS((short) 6, "runs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // APPLICATION
          return APPLICATION;
        case 2: // FLOW
          return FLOW;
        case 3: // LAST_STOPPPED
          return LAST_STOPPPED;
        case 4: // LAST_STARTED
          return LAST_STARTED;
        case 5: // CURRENT_STATE
          return CURRENT_STATE;
        case 6: // RUNS
          return RUNS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LASTSTOPPPED_ISSET_ID = 0;
  private static final int __LASTSTARTED_ISSET_ID = 1;
  private static final int __CURRENTSTATE_ISSET_ID = 2;
  private static final int __RUNS_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APPLICATION, new org.apache.thrift.meta_data.FieldMetaData("application", org.apache.thrift.TFieldRequirementType.DEFAULT,
      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLOW, new org.apache.thrift.meta_data.FieldMetaData("flow", org.apache.thrift.TFieldRequirementType.DEFAULT,
      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_STOPPPED, new org.apache.thrift.meta_data.FieldMetaData("lastStoppped", org.apache.thrift.TFieldRequirementType.DEFAULT,
      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_STARTED, new org.apache.thrift.meta_data.FieldMetaData("lastStarted", org.apache.thrift.TFieldRequirementType.DEFAULT,
      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CURRENT_STATE, new org.apache.thrift.meta_data.FieldMetaData("currentState", org.apache.thrift.TFieldRequirementType.DEFAULT,
      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RUNS, new org.apache.thrift.meta_data.FieldMetaData("runs", org.apache.thrift.TFieldRequirementType.DEFAULT,
      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FlowState.class, metaDataMap);
  }

  public FlowState() {
  }

  public FlowState(
    String application,
    String flow,
    int lastStoppped,
    int lastStarted,
    int currentState,
    int runs) {
    this();
    this.application = application;
    this.flow = flow;
    this.lastStoppped = lastStoppped;
    setLastStopppedIsSet(true);
    this.lastStarted = lastStarted;
    setLastStartedIsSet(true);
    this.currentState = currentState;
    setCurrentStateIsSet(true);
    this.runs = runs;
    setRunsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FlowState(FlowState other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetApplication()) {
      this.application = other.application;
    }
    if (other.isSetFlow()) {
      this.flow = other.flow;
    }
    this.lastStoppped = other.lastStoppped;
    this.lastStarted = other.lastStarted;
    this.currentState = other.currentState;
    this.runs = other.runs;
  }

  public FlowState deepCopy() {
    return new FlowState(this);
  }

  @Override
  public void clear() {
    this.application = null;
    this.flow = null;
    setLastStopppedIsSet(false);
    this.lastStoppped = 0;
    setLastStartedIsSet(false);
    this.lastStarted = 0;
    setCurrentStateIsSet(false);
    this.currentState = 0;
    setRunsIsSet(false);
    this.runs = 0;
  }

  public String getApplication() {
    return this.application;
  }

  public void setApplication(String application) {
    this.application = application;
  }

  public void unsetApplication() {
    this.application = null;
  }

  /**
   * Returns true if field application is set (has been assigned a value) and false otherwise
   */
  public boolean isSetApplication() {
    return this.application != null;
  }

  public void setApplicationIsSet(boolean value) {
    if (!value) {
      this.application = null;
    }
  }

  public String getFlow() {
    return this.flow;
  }

  public void setFlow(String flow) {
    this.flow = flow;
  }

  public void unsetFlow() {
    this.flow = null;
  }

  /**
   * Returns true if field flow is set (has been assigned a value) and false otherwise
   */
  public boolean isSetFlow() {
    return this.flow != null;
  }

  public void setFlowIsSet(boolean value) {
    if (!value) {
      this.flow = null;
    }
  }

  public int getLastStoppped() {
    return this.lastStoppped;
  }

  public void setLastStoppped(int lastStoppped) {
    this.lastStoppped = lastStoppped;
    setLastStopppedIsSet(true);
  }

  public void unsetLastStoppped() {
    __isset_bit_vector.clear(__LASTSTOPPPED_ISSET_ID);
  }

  /**
   * Returns true if field lastStoppped is set (has been assigned a value) and false otherwise
   */
  public boolean isSetLastStoppped() {
    return __isset_bit_vector.get(__LASTSTOPPPED_ISSET_ID);
  }

  public void setLastStopppedIsSet(boolean value) {
    __isset_bit_vector.set(__LASTSTOPPPED_ISSET_ID, value);
  }

  public int getLastStarted() {
    return this.lastStarted;
  }

  public void setLastStarted(int lastStarted) {
    this.lastStarted = lastStarted;
    setLastStartedIsSet(true);
  }

  public void unsetLastStarted() {
    __isset_bit_vector.clear(__LASTSTARTED_ISSET_ID);
  }

  /**
   * Returns true if field lastStarted is set (has been assigned a value) and false otherwise
   */
  public boolean isSetLastStarted() {
    return __isset_bit_vector.get(__LASTSTARTED_ISSET_ID);
  }

  public void setLastStartedIsSet(boolean value) {
    __isset_bit_vector.set(__LASTSTARTED_ISSET_ID, value);
  }

  public int getCurrentState() {
    return this.currentState;
  }

  public void setCurrentState(int currentState) {
    this.currentState = currentState;
    setCurrentStateIsSet(true);
  }

  public void unsetCurrentState() {
    __isset_bit_vector.clear(__CURRENTSTATE_ISSET_ID);
  }

  /**
   * Returns true if field currentState is set (has been assigned a value) and false otherwise
   */
  public boolean isSetCurrentState() {
    return __isset_bit_vector.get(__CURRENTSTATE_ISSET_ID);
  }

  public void setCurrentStateIsSet(boolean value) {
    __isset_bit_vector.set(__CURRENTSTATE_ISSET_ID, value);
  }

  public int getRuns() {
    return this.runs;
  }

  public void setRuns(int runs) {
    this.runs = runs;
    setRunsIsSet(true);
  }

  public void unsetRuns() {
    __isset_bit_vector.clear(__RUNS_ISSET_ID);
  }

  /**
   * Returns true if field runs is set (has been assigned a value) and false otherwise
   */
  public boolean isSetRuns() {
    return __isset_bit_vector.get(__RUNS_ISSET_ID);
  }

  public void setRunsIsSet(boolean value) {
    __isset_bit_vector.set(__RUNS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
      case APPLICATION:
        if (value == null) {
          unsetApplication();
        } else {
          setApplication((String) value);
        }
        break;

      case FLOW:
        if (value == null) {
          unsetFlow();
        } else {
          setFlow((String) value);
        }
        break;

      case LAST_STOPPPED:
        if (value == null) {
          unsetLastStoppped();
        } else {
          setLastStoppped((Integer) value);
        }
        break;

      case LAST_STARTED:
        if (value == null) {
          unsetLastStarted();
        } else {
          setLastStarted((Integer) value);
        }
        break;

      case CURRENT_STATE:
        if (value == null) {
          unsetCurrentState();
        } else {
          setCurrentState((Integer) value);
        }
        break;

      case RUNS:
        if (value == null) {
          unsetRuns();
        } else {
          setRuns((Integer) value);
        }
        break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
      case APPLICATION:
        return getApplication();

      case FLOW:
        return getFlow();

      case LAST_STOPPPED:
        return Integer.valueOf(getLastStoppped());

      case LAST_STARTED:
        return Integer.valueOf(getLastStarted());

      case CURRENT_STATE:
        return Integer.valueOf(getCurrentState());

      case RUNS:
        return Integer.valueOf(getRuns());

    }
    throw new IllegalStateException();
  }

  /**
   * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
   */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
      case APPLICATION:
        return isSetApplication();
      case FLOW:
        return isSetFlow();
      case LAST_STOPPPED:
        return isSetLastStoppped();
      case LAST_STARTED:
        return isSetLastStarted();
      case CURRENT_STATE:
        return isSetCurrentState();
      case RUNS:
        return isSetRuns();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FlowState)
      return this.equals((FlowState) that);
    return false;
  }

  public boolean equals(FlowState that) {
    if (that == null)
      return false;

    boolean this_present_application = true && this.isSetApplication();
    boolean that_present_application = true && that.isSetApplication();
    if (this_present_application || that_present_application) {
      if (!(this_present_application && that_present_application))
        return false;
      if (!this.application.equals(that.application))
        return false;
    }

    boolean this_present_flow = true && this.isSetFlow();
    boolean that_present_flow = true && that.isSetFlow();
    if (this_present_flow || that_present_flow) {
      if (!(this_present_flow && that_present_flow))
        return false;
      if (!this.flow.equals(that.flow))
        return false;
    }

    boolean this_present_lastStoppped = true;
    boolean that_present_lastStoppped = true;
    if (this_present_lastStoppped || that_present_lastStoppped) {
      if (!(this_present_lastStoppped && that_present_lastStoppped))
        return false;
      if (this.lastStoppped != that.lastStoppped)
        return false;
    }

    boolean this_present_lastStarted = true;
    boolean that_present_lastStarted = true;
    if (this_present_lastStarted || that_present_lastStarted) {
      if (!(this_present_lastStarted && that_present_lastStarted))
        return false;
      if (this.lastStarted != that.lastStarted)
        return false;
    }

    boolean this_present_currentState = true;
    boolean that_present_currentState = true;
    if (this_present_currentState || that_present_currentState) {
      if (!(this_present_currentState && that_present_currentState))
        return false;
      if (this.currentState != that.currentState)
        return false;
    }

    boolean this_present_runs = true;
    boolean that_present_runs = true;
    if (this_present_runs || that_present_runs) {
      if (!(this_present_runs && that_present_runs))
        return false;
      if (this.runs != that.runs)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(FlowState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FlowState typedOther = (FlowState) other;

    lastComparison = Boolean.valueOf(isSetApplication()).compareTo(typedOther.isSetApplication());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplication()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.application, typedOther.application);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlow()).compareTo(typedOther.isSetFlow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flow, typedOther.flow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastStoppped()).compareTo(typedOther.isSetLastStoppped());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastStoppped()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastStoppped, typedOther.lastStoppped);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastStarted()).compareTo(typedOther.isSetLastStarted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastStarted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastStarted, typedOther.lastStarted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentState()).compareTo(typedOther.isSetCurrentState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentState, typedOther.currentState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRuns()).compareTo(typedOther.isSetRuns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runs, typedOther.runs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // APPLICATION
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.application = iprot.readString();
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // FLOW
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.flow = iprot.readString();
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // LAST_STOPPPED
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.lastStoppped = iprot.readI32();
            setLastStopppedIsSet(true);
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // LAST_STARTED
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.lastStarted = iprot.readI32();
            setLastStartedIsSet(true);
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // CURRENT_STATE
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.currentState = iprot.readI32();
            setCurrentStateIsSet(true);
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // RUNS
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.runs = iprot.readI32();
            setRunsIsSet(true);
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.application != null) {
      oprot.writeFieldBegin(APPLICATION_FIELD_DESC);
      oprot.writeString(this.application);
      oprot.writeFieldEnd();
    }
    if (this.flow != null) {
      oprot.writeFieldBegin(FLOW_FIELD_DESC);
      oprot.writeString(this.flow);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(LAST_STOPPPED_FIELD_DESC);
    oprot.writeI32(this.lastStoppped);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(LAST_STARTED_FIELD_DESC);
    oprot.writeI32(this.lastStarted);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(CURRENT_STATE_FIELD_DESC);
    oprot.writeI32(this.currentState);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(RUNS_FIELD_DESC);
    oprot.writeI32(this.runs);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FlowState(");
    boolean first = true;

    sb.append("application:");
    if (this.application == null) {
      sb.append("null");
    } else {
      sb.append(this.application);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flow:");
    if (this.flow == null) {
      sb.append("null");
    } else {
      sb.append(this.flow);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastStoppped:");
    sb.append(this.lastStoppped);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastStarted:");
    sb.append(this.lastStarted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentState:");
    sb.append(this.currentState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("runs:");
    sb.append(this.runs);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

