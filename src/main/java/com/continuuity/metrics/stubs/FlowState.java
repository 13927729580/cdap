/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.continuuity.metrics.stubs;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Provides the state of flows.
 */
public class FlowState implements org.apache.thrift.TBase<FlowState, FlowState._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FlowState");

  private static final org.apache.thrift.protocol.TField APPLICATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FLOW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("flowId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_STOPPED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastStopped", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LAST_STARTED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastStarted", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CURRENT_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("currentState", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField RUNS_FIELD_DESC = new org.apache.thrift.protocol.TField("runs", org.apache.thrift.protocol.TType.I32, (short)6);

  private String applicationId; // required
  private String flowId; // required
  private int lastStopped; // required
  private int lastStarted; // required
  private String currentState; // required
  private int runs; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APPLICATION_ID((short)1, "applicationId"),
    FLOW_ID((short)2, "flowId"),
    LAST_STOPPED((short)3, "lastStopped"),
    LAST_STARTED((short)4, "lastStarted"),
    CURRENT_STATE((short)5, "currentState"),
    RUNS((short)6, "runs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APPLICATION_ID
          return APPLICATION_ID;
        case 2: // FLOW_ID
          return FLOW_ID;
        case 3: // LAST_STOPPED
          return LAST_STOPPED;
        case 4: // LAST_STARTED
          return LAST_STARTED;
        case 5: // CURRENT_STATE
          return CURRENT_STATE;
        case 6: // RUNS
          return RUNS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LASTSTOPPED_ISSET_ID = 0;
  private static final int __LASTSTARTED_ISSET_ID = 1;
  private static final int __RUNS_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APPLICATION_ID, new org.apache.thrift.meta_data.FieldMetaData("applicationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLOW_ID, new org.apache.thrift.meta_data.FieldMetaData("flowId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_STOPPED, new org.apache.thrift.meta_data.FieldMetaData("lastStopped", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_STARTED, new org.apache.thrift.meta_data.FieldMetaData("lastStarted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CURRENT_STATE, new org.apache.thrift.meta_data.FieldMetaData("currentState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RUNS, new org.apache.thrift.meta_data.FieldMetaData("runs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FlowState.class, metaDataMap);
  }

  public FlowState() {
  }

  public FlowState(
    String applicationId,
    String flowId,
    int lastStopped,
    int lastStarted,
    String currentState,
    int runs)
  {
    this();
    this.applicationId = applicationId;
    this.flowId = flowId;
    this.lastStopped = lastStopped;
    setLastStoppedIsSet(true);
    this.lastStarted = lastStarted;
    setLastStartedIsSet(true);
    this.currentState = currentState;
    this.runs = runs;
    setRunsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FlowState(FlowState other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetApplicationId()) {
      this.applicationId = other.applicationId;
    }
    if (other.isSetFlowId()) {
      this.flowId = other.flowId;
    }
    this.lastStopped = other.lastStopped;
    this.lastStarted = other.lastStarted;
    if (other.isSetCurrentState()) {
      this.currentState = other.currentState;
    }
    this.runs = other.runs;
  }

  public FlowState deepCopy() {
    return new FlowState(this);
  }

  @Override
  public void clear() {
    this.applicationId = null;
    this.flowId = null;
    setLastStoppedIsSet(false);
    this.lastStopped = 0;
    setLastStartedIsSet(false);
    this.lastStarted = 0;
    this.currentState = null;
    setRunsIsSet(false);
    this.runs = 0;
  }

  public String getApplicationId() {
    return this.applicationId;
  }

  public void setApplicationId(String applicationId) {
    this.applicationId = applicationId;
  }

  public void unsetApplicationId() {
    this.applicationId = null;
  }

  /** Returns true if field applicationId is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationId() {
    return this.applicationId != null;
  }

  public void setApplicationIdIsSet(boolean value) {
    if (!value) {
      this.applicationId = null;
    }
  }

  public String getFlowId() {
    return this.flowId;
  }

  public void setFlowId(String flowId) {
    this.flowId = flowId;
  }

  public void unsetFlowId() {
    this.flowId = null;
  }

  /** Returns true if field flowId is set (has been assigned a value) and false otherwise */
  public boolean isSetFlowId() {
    return this.flowId != null;
  }

  public void setFlowIdIsSet(boolean value) {
    if (!value) {
      this.flowId = null;
    }
  }

  public int getLastStopped() {
    return this.lastStopped;
  }

  public void setLastStopped(int lastStopped) {
    this.lastStopped = lastStopped;
    setLastStoppedIsSet(true);
  }

  public void unsetLastStopped() {
    __isset_bit_vector.clear(__LASTSTOPPED_ISSET_ID);
  }

  /** Returns true if field lastStopped is set (has been assigned a value) and false otherwise */
  public boolean isSetLastStopped() {
    return __isset_bit_vector.get(__LASTSTOPPED_ISSET_ID);
  }

  public void setLastStoppedIsSet(boolean value) {
    __isset_bit_vector.set(__LASTSTOPPED_ISSET_ID, value);
  }

  public int getLastStarted() {
    return this.lastStarted;
  }

  public void setLastStarted(int lastStarted) {
    this.lastStarted = lastStarted;
    setLastStartedIsSet(true);
  }

  public void unsetLastStarted() {
    __isset_bit_vector.clear(__LASTSTARTED_ISSET_ID);
  }

  /** Returns true if field lastStarted is set (has been assigned a value) and false otherwise */
  public boolean isSetLastStarted() {
    return __isset_bit_vector.get(__LASTSTARTED_ISSET_ID);
  }

  public void setLastStartedIsSet(boolean value) {
    __isset_bit_vector.set(__LASTSTARTED_ISSET_ID, value);
  }

  public String getCurrentState() {
    return this.currentState;
  }

  public void setCurrentState(String currentState) {
    this.currentState = currentState;
  }

  public void unsetCurrentState() {
    this.currentState = null;
  }

  /** Returns true if field currentState is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentState() {
    return this.currentState != null;
  }

  public void setCurrentStateIsSet(boolean value) {
    if (!value) {
      this.currentState = null;
    }
  }

  public int getRuns() {
    return this.runs;
  }

  public void setRuns(int runs) {
    this.runs = runs;
    setRunsIsSet(true);
  }

  public void unsetRuns() {
    __isset_bit_vector.clear(__RUNS_ISSET_ID);
  }

  /** Returns true if field runs is set (has been assigned a value) and false otherwise */
  public boolean isSetRuns() {
    return __isset_bit_vector.get(__RUNS_ISSET_ID);
  }

  public void setRunsIsSet(boolean value) {
    __isset_bit_vector.set(__RUNS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APPLICATION_ID:
      if (value == null) {
        unsetApplicationId();
      } else {
        setApplicationId((String)value);
      }
      break;

    case FLOW_ID:
      if (value == null) {
        unsetFlowId();
      } else {
        setFlowId((String)value);
      }
      break;

    case LAST_STOPPED:
      if (value == null) {
        unsetLastStopped();
      } else {
        setLastStopped((Integer)value);
      }
      break;

    case LAST_STARTED:
      if (value == null) {
        unsetLastStarted();
      } else {
        setLastStarted((Integer)value);
      }
      break;

    case CURRENT_STATE:
      if (value == null) {
        unsetCurrentState();
      } else {
        setCurrentState((String)value);
      }
      break;

    case RUNS:
      if (value == null) {
        unsetRuns();
      } else {
        setRuns((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APPLICATION_ID:
      return getApplicationId();

    case FLOW_ID:
      return getFlowId();

    case LAST_STOPPED:
      return Integer.valueOf(getLastStopped());

    case LAST_STARTED:
      return Integer.valueOf(getLastStarted());

    case CURRENT_STATE:
      return getCurrentState();

    case RUNS:
      return Integer.valueOf(getRuns());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APPLICATION_ID:
      return isSetApplicationId();
    case FLOW_ID:
      return isSetFlowId();
    case LAST_STOPPED:
      return isSetLastStopped();
    case LAST_STARTED:
      return isSetLastStarted();
    case CURRENT_STATE:
      return isSetCurrentState();
    case RUNS:
      return isSetRuns();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FlowState)
      return this.equals((FlowState)that);
    return false;
  }

  public boolean equals(FlowState that) {
    if (that == null)
      return false;

    boolean this_present_applicationId = true && this.isSetApplicationId();
    boolean that_present_applicationId = true && that.isSetApplicationId();
    if (this_present_applicationId || that_present_applicationId) {
      if (!(this_present_applicationId && that_present_applicationId))
        return false;
      if (!this.applicationId.equals(that.applicationId))
        return false;
    }

    boolean this_present_flowId = true && this.isSetFlowId();
    boolean that_present_flowId = true && that.isSetFlowId();
    if (this_present_flowId || that_present_flowId) {
      if (!(this_present_flowId && that_present_flowId))
        return false;
      if (!this.flowId.equals(that.flowId))
        return false;
    }

    boolean this_present_lastStopped = true;
    boolean that_present_lastStopped = true;
    if (this_present_lastStopped || that_present_lastStopped) {
      if (!(this_present_lastStopped && that_present_lastStopped))
        return false;
      if (this.lastStopped != that.lastStopped)
        return false;
    }

    boolean this_present_lastStarted = true;
    boolean that_present_lastStarted = true;
    if (this_present_lastStarted || that_present_lastStarted) {
      if (!(this_present_lastStarted && that_present_lastStarted))
        return false;
      if (this.lastStarted != that.lastStarted)
        return false;
    }

    boolean this_present_currentState = true && this.isSetCurrentState();
    boolean that_present_currentState = true && that.isSetCurrentState();
    if (this_present_currentState || that_present_currentState) {
      if (!(this_present_currentState && that_present_currentState))
        return false;
      if (!this.currentState.equals(that.currentState))
        return false;
    }

    boolean this_present_runs = true;
    boolean that_present_runs = true;
    if (this_present_runs || that_present_runs) {
      if (!(this_present_runs && that_present_runs))
        return false;
      if (this.runs != that.runs)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(FlowState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FlowState typedOther = (FlowState)other;

    lastComparison = Boolean.valueOf(isSetApplicationId()).compareTo(typedOther.isSetApplicationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationId, typedOther.applicationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlowId()).compareTo(typedOther.isSetFlowId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlowId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flowId, typedOther.flowId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastStopped()).compareTo(typedOther.isSetLastStopped());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastStopped()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastStopped, typedOther.lastStopped);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastStarted()).compareTo(typedOther.isSetLastStarted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastStarted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastStarted, typedOther.lastStarted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentState()).compareTo(typedOther.isSetCurrentState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentState, typedOther.currentState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRuns()).compareTo(typedOther.isSetRuns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRuns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runs, typedOther.runs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // APPLICATION_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.applicationId = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // FLOW_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.flowId = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // LAST_STOPPED
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.lastStopped = iprot.readI32();
            setLastStoppedIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // LAST_STARTED
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.lastStarted = iprot.readI32();
            setLastStartedIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // CURRENT_STATE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.currentState = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // RUNS
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.runs = iprot.readI32();
            setRunsIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.applicationId != null) {
      oprot.writeFieldBegin(APPLICATION_ID_FIELD_DESC);
      oprot.writeString(this.applicationId);
      oprot.writeFieldEnd();
    }
    if (this.flowId != null) {
      oprot.writeFieldBegin(FLOW_ID_FIELD_DESC);
      oprot.writeString(this.flowId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(LAST_STOPPED_FIELD_DESC);
    oprot.writeI32(this.lastStopped);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(LAST_STARTED_FIELD_DESC);
    oprot.writeI32(this.lastStarted);
    oprot.writeFieldEnd();
    if (this.currentState != null) {
      oprot.writeFieldBegin(CURRENT_STATE_FIELD_DESC);
      oprot.writeString(this.currentState);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(RUNS_FIELD_DESC);
    oprot.writeI32(this.runs);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FlowState(");
    boolean first = true;

    sb.append("applicationId:");
    if (this.applicationId == null) {
      sb.append("null");
    } else {
      sb.append(this.applicationId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flowId:");
    if (this.flowId == null) {
      sb.append("null");
    } else {
      sb.append(this.flowId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastStopped:");
    sb.append(this.lastStopped);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastStarted:");
    sb.append(this.lastStarted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentState:");
    if (this.currentState == null) {
      sb.append("null");
    } else {
      sb.append(this.currentState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("runs:");
    sb.append(this.runs);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

