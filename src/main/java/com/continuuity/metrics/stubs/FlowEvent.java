/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.continuuity.metrics.stubs;

import java.util.*;

public class FlowEvent implements org.apache.thrift.TBase<FlowEvent, FlowEvent._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FlowEvent");

  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I32, (short) 1);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I32, (short) 2);
  private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountId", org.apache.thrift.protocol.TType.STRING, (short) 3);
  private static final org.apache.thrift.protocol.TField APP_FIELD_DESC = new org.apache.thrift.protocol.TField("app", org.apache.thrift.protocol.TType.STRING, (short) 4);
  private static final org.apache.thrift.protocol.TField FLOW_FIELD_DESC = new org.apache.thrift.protocol.TField("flow", org.apache.thrift.protocol.TType.STRING, (short) 5);
  private static final org.apache.thrift.protocol.TField RID_FIELD_DESC = new org.apache.thrift.protocol.TField("rid", org.apache.thrift.protocol.TType.STRING, (short) 6);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short) 7);

  private int startTime; // required
  private int endTime; // required
  private String accountId; // required
  private String app; // required
  private String flow; // required
  private String rid; // required
  private int state; // required

  /**
   * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
   */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    START_TIME((short) 1, "startTime"),
    END_TIME((short) 2, "endTime"),
    ACCOUNT_ID((short) 3, "accountId"),
    APP((short) 4, "app"),
    FLOW((short) 5, "flow"),
    RID((short) 6, "rid"),
    STATE((short) 7, "state");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch (fieldId) {
        case 1: // START_TIME
          return START_TIME;
        case 2: // END_TIME
          return END_TIME;
        case 3: // ACCOUNT_ID
          return ACCOUNT_ID;
        case 4: // APP
          return APP;
        case 5: // FLOW
          return FLOW;
        case 6: // RID
          return RID;
        case 7: // STATE
          return STATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTTIME_ISSET_ID = 0;
  private static final int __ENDTIME_ISSET_ID = 1;
  private static final int __STATE_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountId", org.apache.thrift.TFieldRequirementType.DEFAULT,
      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP, new org.apache.thrift.meta_data.FieldMetaData("app", org.apache.thrift.TFieldRequirementType.DEFAULT,
      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLOW, new org.apache.thrift.meta_data.FieldMetaData("flow", org.apache.thrift.TFieldRequirementType.DEFAULT,
      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RID, new org.apache.thrift.meta_data.FieldMetaData("rid", org.apache.thrift.TFieldRequirementType.DEFAULT,
      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT,
      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FlowEvent.class, metaDataMap);
  }

  public FlowEvent() {
  }

  public FlowEvent(
    int startTime,
    int endTime,
    String accountId,
    String app,
    String flow,
    String rid,
    int state) {
    this();
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.endTime = endTime;
    setEndTimeIsSet(true);
    this.accountId = accountId;
    this.app = app;
    this.flow = flow;
    this.rid = rid;
    this.state = state;
    setStateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FlowEvent(FlowEvent other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.startTime = other.startTime;
    this.endTime = other.endTime;
    if (other.isSetAccountId()) {
      this.accountId = other.accountId;
    }
    if (other.isSetApp()) {
      this.app = other.app;
    }
    if (other.isSetFlow()) {
      this.flow = other.flow;
    }
    if (other.isSetRid()) {
      this.rid = other.rid;
    }
    this.state = other.state;
  }

  public FlowEvent deepCopy() {
    return new FlowEvent(this);
  }

  @Override
  public void clear() {
    setStartTimeIsSet(false);
    this.startTime = 0;
    setEndTimeIsSet(false);
    this.endTime = 0;
    this.accountId = null;
    this.app = null;
    this.flow = null;
    this.rid = null;
    setStateIsSet(false);
    this.state = 0;
  }

  public int getStartTime() {
    return this.startTime;
  }

  public void setStartTime(int startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
  }

  public void unsetStartTime() {
    __isset_bit_vector.clear(__STARTTIME_ISSET_ID);
  }

  /**
   * Returns true if field startTime is set (has been assigned a value) and false otherwise
   */
  public boolean isSetStartTime() {
    return __isset_bit_vector.get(__STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bit_vector.set(__STARTTIME_ISSET_ID, value);
  }

  public int getEndTime() {
    return this.endTime;
  }

  public void setEndTime(int endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
  }

  public void unsetEndTime() {
    __isset_bit_vector.clear(__ENDTIME_ISSET_ID);
  }

  /**
   * Returns true if field endTime is set (has been assigned a value) and false otherwise
   */
  public boolean isSetEndTime() {
    return __isset_bit_vector.get(__ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bit_vector.set(__ENDTIME_ISSET_ID, value);
  }

  public String getAccountId() {
    return this.accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }

  public void unsetAccountId() {
    this.accountId = null;
  }

  /**
   * Returns true if field accountId is set (has been assigned a value) and false otherwise
   */
  public boolean isSetAccountId() {
    return this.accountId != null;
  }

  public void setAccountIdIsSet(boolean value) {
    if (!value) {
      this.accountId = null;
    }
  }

  public String getApp() {
    return this.app;
  }

  public void setApp(String app) {
    this.app = app;
  }

  public void unsetApp() {
    this.app = null;
  }

  /**
   * Returns true if field app is set (has been assigned a value) and false otherwise
   */
  public boolean isSetApp() {
    return this.app != null;
  }

  public void setAppIsSet(boolean value) {
    if (!value) {
      this.app = null;
    }
  }

  public String getFlow() {
    return this.flow;
  }

  public void setFlow(String flow) {
    this.flow = flow;
  }

  public void unsetFlow() {
    this.flow = null;
  }

  /**
   * Returns true if field flow is set (has been assigned a value) and false otherwise
   */
  public boolean isSetFlow() {
    return this.flow != null;
  }

  public void setFlowIsSet(boolean value) {
    if (!value) {
      this.flow = null;
    }
  }

  public String getRid() {
    return this.rid;
  }

  public void setRid(String rid) {
    this.rid = rid;
  }

  public void unsetRid() {
    this.rid = null;
  }

  /**
   * Returns true if field rid is set (has been assigned a value) and false otherwise
   */
  public boolean isSetRid() {
    return this.rid != null;
  }

  public void setRidIsSet(boolean value) {
    if (!value) {
      this.rid = null;
    }
  }

  public int getState() {
    return this.state;
  }

  public void setState(int state) {
    this.state = state;
    setStateIsSet(true);
  }

  public void unsetState() {
    __isset_bit_vector.clear(__STATE_ISSET_ID);
  }

  /**
   * Returns true if field state is set (has been assigned a value) and false otherwise
   */
  public boolean isSetState() {
    return __isset_bit_vector.get(__STATE_ISSET_ID);
  }

  public void setStateIsSet(boolean value) {
    __isset_bit_vector.set(__STATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
      case START_TIME:
        if (value == null) {
          unsetStartTime();
        } else {
          setStartTime((Integer) value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((Integer) value);
        }
        break;

      case ACCOUNT_ID:
        if (value == null) {
          unsetAccountId();
        } else {
          setAccountId((String) value);
        }
        break;

      case APP:
        if (value == null) {
          unsetApp();
        } else {
          setApp((String) value);
        }
        break;

      case FLOW:
        if (value == null) {
          unsetFlow();
        } else {
          setFlow((String) value);
        }
        break;

      case RID:
        if (value == null) {
          unsetRid();
        } else {
          setRid((String) value);
        }
        break;

      case STATE:
        if (value == null) {
          unsetState();
        } else {
          setState((Integer) value);
        }
        break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
      case START_TIME:
        return Integer.valueOf(getStartTime());

      case END_TIME:
        return Integer.valueOf(getEndTime());

      case ACCOUNT_ID:
        return getAccountId();

      case APP:
        return getApp();

      case FLOW:
        return getFlow();

      case RID:
        return getRid();

      case STATE:
        return Integer.valueOf(getState());

    }
    throw new IllegalStateException();
  }

  /**
   * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
   */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
      case START_TIME:
        return isSetStartTime();
      case END_TIME:
        return isSetEndTime();
      case ACCOUNT_ID:
        return isSetAccountId();
      case APP:
        return isSetApp();
      case FLOW:
        return isSetFlow();
      case RID:
        return isSetRid();
      case STATE:
        return isSetState();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FlowEvent)
      return this.equals((FlowEvent) that);
    return false;
  }

  public boolean equals(FlowEvent that) {
    if (that == null)
      return false;

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_endTime = true;
    boolean that_present_endTime = true;
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    boolean this_present_accountId = true && this.isSetAccountId();
    boolean that_present_accountId = true && that.isSetAccountId();
    if (this_present_accountId || that_present_accountId) {
      if (!(this_present_accountId && that_present_accountId))
        return false;
      if (!this.accountId.equals(that.accountId))
        return false;
    }

    boolean this_present_app = true && this.isSetApp();
    boolean that_present_app = true && that.isSetApp();
    if (this_present_app || that_present_app) {
      if (!(this_present_app && that_present_app))
        return false;
      if (!this.app.equals(that.app))
        return false;
    }

    boolean this_present_flow = true && this.isSetFlow();
    boolean that_present_flow = true && that.isSetFlow();
    if (this_present_flow || that_present_flow) {
      if (!(this_present_flow && that_present_flow))
        return false;
      if (!this.flow.equals(that.flow))
        return false;
    }

    boolean this_present_rid = true && this.isSetRid();
    boolean that_present_rid = true && that.isSetRid();
    if (this_present_rid || that_present_rid) {
      if (!(this_present_rid && that_present_rid))
        return false;
      if (!this.rid.equals(that.rid))
        return false;
    }

    boolean this_present_state = true;
    boolean that_present_state = true;
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (this.state != that.state)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(FlowEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FlowEvent typedOther = (FlowEvent) other;

    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(typedOther.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, typedOther.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, typedOther.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountId()).compareTo(typedOther.isSetAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountId, typedOther.accountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApp()).compareTo(typedOther.isSetApp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.app, typedOther.app);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlow()).compareTo(typedOther.isSetFlow());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlow()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flow, typedOther.flow);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRid()).compareTo(typedOther.isSetRid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rid, typedOther.rid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(typedOther.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, typedOther.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // START_TIME
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.startTime = iprot.readI32();
            setStartTimeIsSet(true);
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // END_TIME
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.endTime = iprot.readI32();
            setEndTimeIsSet(true);
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // ACCOUNT_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.accountId = iprot.readString();
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // APP
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.app = iprot.readString();
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // FLOW
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.flow = iprot.readString();
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // RID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.rid = iprot.readString();
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // STATE
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.state = iprot.readI32();
            setStateIsSet(true);
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(START_TIME_FIELD_DESC);
    oprot.writeI32(this.startTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(END_TIME_FIELD_DESC);
    oprot.writeI32(this.endTime);
    oprot.writeFieldEnd();
    if (this.accountId != null) {
      oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
      oprot.writeString(this.accountId);
      oprot.writeFieldEnd();
    }
    if (this.app != null) {
      oprot.writeFieldBegin(APP_FIELD_DESC);
      oprot.writeString(this.app);
      oprot.writeFieldEnd();
    }
    if (this.flow != null) {
      oprot.writeFieldBegin(FLOW_FIELD_DESC);
      oprot.writeString(this.flow);
      oprot.writeFieldEnd();
    }
    if (this.rid != null) {
      oprot.writeFieldBegin(RID_FIELD_DESC);
      oprot.writeString(this.rid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(STATE_FIELD_DESC);
    oprot.writeI32(this.state);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FlowEvent(");
    boolean first = true;

    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    sb.append(this.endTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountId:");
    if (this.accountId == null) {
      sb.append("null");
    } else {
      sb.append(this.accountId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("app:");
    if (this.app == null) {
      sb.append("null");
    } else {
      sb.append(this.app);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flow:");
    if (this.flow == null) {
      sb.append("null");
    } else {
      sb.append(this.flow);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rid:");
    if (this.rid == null) {
      sb.append("null");
    } else {
      sb.append(this.rid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    sb.append(this.state);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

