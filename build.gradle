// Load the default Continuuity plugin
apply plugin: 'continuuity'

// Set up the application plugin so we can launch the Gateway from gradle
apply plugin: 'application'
mainClassName = 'com.continuuity.gateway.runtime.Main'

/**
 * Add continuuity plugin to the classpath.
 */
buildscript {
    apply from: 'continuuity.gradle'
}

// The versions of our dependencies
def avroVersion = '1.6.2'
def flumeVersion = '1.2+'


tasks.withType(Compile) { 
    options.compilerArgs << "-Xlint:unchecked"
} 

dependencies {

    /// Internal dependencies.
    if(multiModule && ! buildingRelease)
    {
        compile project(":flow")
        compile project(":flow").sourceSets.api.output
        compile project(":data-fabric")
        compile project(":data-fabric").sourceSets.api.output
        compile project(":overlord")
    }
    else
    {
        compile group: 'com.continuuity', name: 'overlord', version: "${version}", changing: true
        compile group: 'com.continuuity', name: 'data-fabric', version: "${version}", changing: true
        compile group: 'com.continuuity', name: 'data-fabric', classifier: 'api', version: "${version}", changing: true
        compile group: 'com.continuuity', name: 'flow', version: "${version}", changing: true
        compile group: 'com.continuuity', name: 'flow', classifier: 'api', version: "${version}", changing: true
    }

    clover group: 'com.continuuity', name: 'data-fabric', classifier: 'api', version: "${version}", changing: true
    clover group: 'com.continuuity', name: 'flow', classifier: 'api', version: "${version}", changing: true

    // External dependencies.
    compile "org.apache.avro:avro:$avroVersion"
    compile "org.apache.avro:avro-ipc:$avroVersion"
    compile "org.apache.flume:flume-ng-sdk:$flumeVersion"
    compile "org.apache.flume:flume-ng-core:$flumeVersion"
}

/**
 * Exclude any config xml from jar task
 */
jar.exclude '*.xml'


import org.apache.tools.ant.filters.ReplaceTokens

task generateBinDir(type: Copy) {
    group "Deployment"
    description "Generates $buildDir/bin with token-replaced scripts"
    from "bin" 
    include "*-client"    
    into "$buildDir/bin"
    //rename '(.*)', '$1-gen'
    def cp = configurations.runtime.getAsPath()
    cp += ':' + jar.outputs.getFiles().getAsPath()

    filter(ReplaceTokens, tokens: [classpath: cp])
}

build.dependsOn generateBinDir

