// Pull the JS plugin from a Maven Repo
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.eriwen:gradle-js-plugin:1.0.3'
    }
}
// Invoke the plugin
apply plugin: 'js'

defaultTasks 'build'

project.ext.set("edition", "developer")

//define source for JSHint
javascript.source {
    prod {
        js {
            srcDir "server" 
            srcDir "client/core"
            srcDir "client/core/models"
            srcDir "client/core/views"
            srcDir "client/core/controllers"
            srcDir "client/developer/**/*.js"
            srcDir "client/enterprise/**/*.js"
            srcDir "client/cloud/**/*.js"
            include "*.js"
        }
    }
}

// this writes it's output to dest file only. does not fail build
task jshintjs(type: com.eriwen.gradle.js.tasks.JsHintTask) {
    source = javascript.source.prod.js.files
    dest = file("${buildDir}/jshint.out")
}

// check jshint output file and if non-zero length, then fail build 
task x_syntax(dependsOn: ['jshintjs']) {
    doLast {
        ext.jshintlog = file("${buildDir}/jshint.out")
        if( ext.jshintlog.length() != 0 ) {
            println ext.jshintlog.text
            throw new GradleScriptException("JSHint reported Syntax Errors: check build/jshint.out", null)
        }
    }
}

task cleanbuild(description: 'Remove all files from ./build/') << {
	"rm -rf ./build".execute()
}

task gitPull(type: Exec, description: 'Update git repositories and submodules') {
    commandLine = ['git', 'pull']
}

// task to run syntax checking with node and jshint options.  requires "node" executable in path.
// CI Build runs 'syntax' task instead
task syntax_node(type: Exec, description: 'runs jshint on all non-test and lib JS files') << {
	
	// Uses jshint.json configuration file
	// Uses .jshintignore for exceptions

	commandLine = ["./tools/jshint/bin/hint", 
		"./client/core/models/", "./client/core/views/", "./client/core/controllers/", "./client/core/", "./client/" + project.ext.edition + "/patch/views", 
		"./server/", "--config", 'jshint.json']
}

task binaries (type: Copy) {
	from 'bin/'
	into 'build/bin'
}

task y_server(type:Copy, description: 'Copies relevant server files to build') {
	from 'server/'
	into 'build/' + project.ext.edition + '/server'
}
y_server.configure {
	include('bin/*', 'package.json', 'node_modules/**/*', 'thrift_bindings/**/*', 'api.js', 'env.js', 'main.js')
}

task js(description: 'Combines and minifies JS') << {
	("mkdir ./build/" + project.ext.edition).execute()
	('./tools/requirejs/bin/r.js -o ' + project.ext.edition + '.build.js').execute()
}

task jslibs(type:Copy, dependsOn: 'js') {
    from 'client/core/lib'
    into 'build/' + project.ext.edition + '/client/core/lib'
}
task assets(type:Copy, dependsOn: 'jslibs') {
    from 'client/assets'
    into 'build/' + project.ext.edition + '/client/assets'
}
task z_client(type:Copy, dependsOn: 'assets') {
    from 'client/' + project.ext.edition + '/index.html'
    into 'build/' + project.ext.edition + '/client'
}

task build(overwrite: true, dependsOn: ['cleanbuild', 'x_syntax', 'y_server', 'z_client']) << {
   
}

task run (type: Exec, dependsOn: ['build']) {
	commandLine = ['node', 'build/developer/server/main.js']
}

