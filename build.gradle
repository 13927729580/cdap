// Pull the JS plugin from a Maven Repo
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.eriwen:gradle-js-plugin:1.0.3'
    }
}
// Invoke the plugin
apply plugin: 'js'

defaultTasks 'build'

//project.ext.set("edition", "developer")

//define source for JSHint
javascript.source {
    prod {
        js {
            srcDir "server" 
            srcDir "client/core"
            srcDir "client/core/models"
            srcDir "client/core/views"
            srcDir "client/core/controllers"
            srcDir "client/developer/**/*.js"
            srcDir "client/enterprise/**/*.js"
            srcDir "client/cloud/**/*.js"
            include "*.js"
        }
    }
}

// this writes it's output to dest file only. does not fail build
task jshintjs(type: com.eriwen.gradle.js.tasks.JsHintTask) {
    project.buildDir.mkdirs()
    source = javascript.source.prod.js.files
    dest = file("${buildDir}/jshint.out")
}

// check jshint output file and if non-zero length, then fail build 
task x_syntax() {
    doLast {
        ext.jshintlog = file("${buildDir}/jshint.out")
        if( ext.jshintlog.length() != 0 ) {
            println ext.jshintlog.text
            throw new GradleScriptException("JSHint reported Syntax Errors: check build/jshint.out", null)
        }
    }
}

task clean(overwrite: true, description: 'Remove all files from ./build/') << {
	"rm -rf ${project.projectDir}/build".execute()
}

task gitPull(type: Exec, description: 'Update git repositories and submodules') {
    commandLine = ['git', 'pull']
}

// task to run syntax checking with node and jshint options.  requires "node" executable in path.
// CI Build runs 'syntax' task instead
task syntax_node_dev(type: Exec, description: 'runs jshint on all non-test and lib JS files') << {
	
	// Uses jshint.json configuration file
	// Uses .jshintignore for exceptions

	commandLine = ["./tools/jshint/bin/hint", 
		"./client/core/models/", "./client/core/views/", "./client/core/controllers/", "./client/core/", "./client/" + "developer" + "/patch/views", 
		"./server/", "--config", 'jshint.json']
}
task syntax_node_cloud(type: Exec, description: 'runs jshint on all non-test and lib JS files') << {
	
	// Uses jshint.json configuration file
	// Uses .jshintignore for exceptions

	commandLine = ["./tools/jshint/bin/hint", 
		"./client/core/models/", "./client/core/views/", "./client/core/controllers/", "./client/core/", "./client/" + "cloud" + "/patch/views", 
		"./server/", "--config", 'jshint.json']
}

task binaries (type: Copy) {
	from 'bin/'
	into 'build/bin'
}

task y_server_dev(type:Copy, description: 'Copies relevant server files to build') {
	from 'server/'
	into 'build/' + "developer" + '/server'
}
task y_server_cloud(type:Copy, description: 'Copies relevant server files to build') {
	from 'server/'
	into 'build/' + "cloud" + '/server'
}
y_server_dev.configure {
	include('bin/*', 'package.json', 'node_modules/**/*', 'thrift_bindings/**/*', 'api.js', 'env.js', 'main.js')
}
y_server_cloud.configure {
	include('bin/*', 'package.json', 'node_modules/**/*', 'thrift_bindings/**/*', 'api.js', 'env.js', 'main.js')
}


project.ext.devBuildDir = new File("${project.projectDir}/build/" + "developer")
project.ext.cloudBuildDir = new File("${project.projectDir}/build/" + "cloud")

task js_dev(type:Exec, description: 'Combines and minifies JS') {

        project.ext.devBuildDir.mkdirs()

        commandLine "node"
        args "${project.projectDir}/tools/requirejs/bin/r.js", "-o", "${project.projectDir}/app.build.js", "baseUrl=${project.projectDir}/client/developer", "out=${project.projectDir}/build/developer/client/main.js"

}
task js_cloud(type:Exec, description: 'Combines and minifies JS') {

        project.ext.cloudBuildDir.mkdirs()

        commandLine "node"
        args "${project.projectDir}/tools/requirejs/bin/r.js", "-o", "${project.projectDir}/app.build.js", "baseUrl=${project.projectDir}/client/cloud", "out=${project.projectDir}/build/cloud/client/main.js"

}

task jslibs_dev(type:Copy, dependsOn: 'js_dev') {
    from 'client/core/lib'
    into 'build/' + "developer" + '/client/core/lib'
}
task jslibs_cloud(type:Copy, dependsOn: 'js_cloud') {
    from 'client/core/lib'
    into 'build/' + "cloud" + '/client/core/lib'
}

task assets_dev(type:Copy, dependsOn: 'jslibs_dev') {
    from 'client/assets'
    into 'build/' + "developer" + '/client/assets'
}
task assets_cloud(type:Copy, dependsOn: 'jslibs_cloud') {
    from 'client/assets'
    into 'build/' + "cloud" + '/client/assets'
}

task patch_mkdir_dev(type:Exec, dependsOn: 'assets_dev') {
    commandLine "mkdir"
    args "build/" + "developer" + "/client/patch"
}
task patch_mkdir_cloud(type:Exec, dependsOn: 'assets_cloud') {
    commandLine "mkdir"
    args "build/" + "cloud" + "/client/patch"
}

task asset_patch_dev(type:Copy, dependsOn: 'patch_mkdir_dev') {
    from 'client/' + "developer" + '/patch/assets'
    into 'build/' + "developer" + '/client/patch/assets'
}
task asset_patch_cloud(type:Copy, dependsOn: 'patch_mkdir_cloud') {
    from 'client/' + "cloud" + '/patch/assets'
    into 'build/' + "cloud" + '/client/patch/assets'
}

task z_client_dev(type:Copy, dependsOn: 'asset_patch_dev') {
    from 'client/' + "developer" + '/index.html'
    into 'build/' + "developer" + '/client'
}
task z_client_cloud(type:Copy, dependsOn: 'asset_patch_cloud') {
    from 'client/' + "cloud" + '/index.html'
    into 'build/' + "cloud" + '/client'
}

task build_dev(overwrite: true, dependsOn: ['clean', 'x_syntax', 'y_server_dev', 'z_client_dev']) << {
 
}
task build_cloud(overwrite: true, dependsOn: ['clean', 'x_syntax', 'y_server_cloud', 'z_client_cloud']) << {
 
}

task build (overwrite: true, dependsOn: ['build_dev', 'build_cloud']) << {

}

task run (type: Exec, dependsOn: ['build']) {
	commandLine = ['node', 'build/developer/server/main.js']
}

