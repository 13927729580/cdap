// Pull the JS plugin from a Maven Repo
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.eriwen:gradle-js-plugin:1.0.3'
    }
}
// Invoke the plugin
apply plugin: 'js'

defaultTasks 'build'

//define source for JSHint
javascript.source {
    prod {
        js {
            srcDir "server" 
            srcDir "client/js"
            srcDir "client/js/models"
            srcDir "client/js/views"
            srcDir "client/js/controllers"
            include "*.js"
        }
    }
}

// this writes it's output to dest file only. does not fail build
task jshintjs(type: com.eriwen.gradle.js.tasks.JsHintTask) {
    source = javascript.source.prod.js.files
    dest = file("${buildDir}/jshint.out")
}

// check jshint output file and if non-zero length, then fail build 
task syntax(dependsOn: ['clean', 'jshintjs']) {
    doLast {
        ext.jshintlog = file("${buildDir}/jshint.out")
        if( ext.jshintlog.length() != 0 ) {
            println ext.jshintlog.text
            throw new GradleScriptException("JSHint reported Syntax Errors: check build/jshint.out", null)
        }
    }
}


task cleanbuild(type: Exec, description: 'Remove all files from ./build/') {
	commandLine = ['rm', '-rf', './build']
}

// task to run syntax checking with node and jshint options.  requires "node" executable in path.
// CI Build runs 'syntax' task instead
task syntax_node(type: Exec, description: 'runs jshint on all non-test and lib JS files') {
	
	// Uses jshint.json configuration file
	// Uses .jshintignore for exceptions

	commandLine = ["./tools/jshint/bin/hint", 
		"./client/js/models/", "./client/js/views/", "./client/js/controllers/", "./client/js/",
		"./server/", "--config", 'jshint.json']
}

//task link() {
//	"npm link ./server/".execute();
//	"rm -rf ./node_modules/".execute();
//}

task binaries (type: Copy) {
	from 'bin/'
	into 'build/bin'
}

task server(type:Copy, dependsOn: 'syntax', description: 'Copies relevant server files to build') {
	from 'server/'
	into 'build/server'
}
server.configure {
	include('bin/*', 'package.json', 'node_modules/**/*', 'thrift_bindings/**/*', 'api.js', 'env.js', 'main.js', 'index.html')
}

task templates(type:Copy, dependsOn: 'syntax') {
    from 'client/templates/'
    into 'build/client/templates/'
}

task jsraw(type:Copy, dependsOn: 'templates') {
    from 'client/js/'
    into 'build/client/js/'
}

task js(type: Exec, dependsOn: 'syntax', description: 'Combines and minifies JS') {
	
	// Uses app.build.js configuration file
	"mkdir ./build/client".execute()
	"mkdir ./build/client/js".execute()
	commandLine = ['./tools/requirejs/bin/r.js', '-o', 'app.build.js']

}

task jslibs(type:Copy) {
    from 'client/js/lib'
    into 'build/client/js/lib'
}

task css(type: Exec, dependsOn: 'jsraw', description: 'Process and minify LESS -> CSS') {
	"mkdir ./build/client/css".execute()
	commandLine = ['cp', '-r', './client/css', './build/client/']
}

task images(type:Copy) {
    from 'client/img'
    into 'build/client/img'
}

task tests(type: Exec, dependsOn: 'css', description: 'Run tests in a headless browser environment') {
	
	// Pulled from https://github.com/detro/phantomjs-jasminexml-example
	commandLine = ['phantomjs', './tests/runner.js', './tests/runner.html', './tests/output.xml']
}

task docs(type: Exec, dependsOn: 'css', description: 'Generates Groc documentation') {
	
	// Uses .groc.json configuration file
    commandLine = ['./tools/groc']
}
// disabling docs for now due to issue with groc/pygmentize 
docs.enabled = false

task upload(type: Exec, dependsOn: 'docs', description: 'Uploads to webserver') {
    commandLine = ['./upload.sh']
}

//task build(overwrite: true, dependsOn: ['cleanbuild', 'syntax', 'server', 'js', 'jslibs', 'css', 'images', 'docs']) {
task build(overwrite: true, dependsOn: ['cleanbuild', 'server', 'jsraw', 'jslibs', 'css', 'images', 'docs']) {
	doLast {
		println "Done!"
	}
}

task run (type: Exec, dependsOn: ['build']) {
	commandLine = ['node', 'build/server/main.js']
}

task deploy(dependsOn: ['build', 'upload']) {
	doLast {
		println "Deployed!"
	}
}

/**
 * Create Release TAR ball - overwrite global task
 * 
 */
//task release (type:  Tar, overwrite: true, dependsOn: build ) << {
task release (type:  Tar, overwrite: true) << {

    //placeholder

    /*
    group = 'Continuuity'
    description = 'Generates distribution tar file.'

    compression = Compression.GZIP

    release.baseName = "web_cloud_app"

    from('build/client') {
        into("${release.baseName}-${project.version}/web-app/client")
    }

    from('build/server') {
        into("${release.baseName}-${project.version}/web-app/server")
    }

    from('conf') {
        into("${release.baseName}-${project.version}/conf")
    }
    */
}

task upload_release (overwrite: true, dependsOn: release) << {
    //placeholder
}
task distro (overwrite: true, dependsOn: upload_release) << {
    //placeholder
}

