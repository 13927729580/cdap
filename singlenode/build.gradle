apply plugin: 'continuuity'

apply plugin: 'application'
mainClassName = 'com.continuuity.SingleNodeMain'


buildscript {
  apply from: 'continuuity.gradle'
}

/**
 * Specify all the dependencies
 */
dependencies {


    /// Internal dependencies.
    if(multiModule)
    {
        compile project(":common")
        compile project(":gateway")
        compile project(":flow")
        compile project(":data-fabric")
        compile project(":overlord")
    }
    else
    {
        compile group: 'com.continuuity', name: 'common', version: '0.1.0-SNAPSHOT'
        compile group: 'com.continuuity', name: 'data-fabric', version: '0.1.0-SNAPSHOT'
        compile group: 'com.continuuity', name: 'flow', version: '0.1.0-SNAPSHOT'
        compile group: 'com.continuuity', name: 'gateway', version: '0.1.0-SNAPSHOT'
        compile group: 'com.continuuity', name: 'overlord', version: '0.1.0-SNAPSHOT'
    }

    testCompile group: 'junit', name: 'junit', version: '4.+'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '1.9.+'
}

/**
 * Exclude config in singlenode jar
 */
jar.exclude '*.xml'


/**
 * Configure distZip task 
 */
applicationDistribution.from(sourceSets.main.output.resourcesDir) {
    into "conf"
}

applicationDistribution.from("$buildDir/docs") {
    into "docs"
}


/**
 * Hack the start script  - remain in $APP_HOME and add $APP_HOME/conf/ to classpath
 */

tasks.startScripts {
    doLast {
        def scriptFile = file "${outputDir}/${applicationName}"
        scriptFile.text = scriptFile.text.replace('cd "$SAVED"', '')
        scriptFile.text = scriptFile.text.replaceFirst('CLASSPATH=(.*)', 'CLASSPATH=$1:\\$APP_HOME/conf/')
    }
}

/**
 * Collect bin scripts from gateway project and replace @classpath@ token
 */

import org.apache.tools.ant.filters.ReplaceTokens

applicationDistribution.from(project(':gateway').file('bin')) {
    into "bin"
    def cp = startScripts.classpath.collect { "\$APP_HOME/lib/${it.name}" }.join(':')
    cp += ":\$APP_HOME/conf/"
    filter(ReplaceTokens, tokens: [classpath: cp])
}

/**
 * Collect bin scripts from flow project and replace @classpath@ token
 */
applicationDistribution.from(project(':flow').file('bin')) {
    into "bin"
    def cp = startScripts.classpath.collect { "\$APP_HOME/lib/${it.name}" }.join(':')
    cp += ":\$APP_HOME/conf/"
    filter(ReplaceTokens, tokens: [classpath: cp])
}

/**
 * Collect bin scripts from data-fabric project and replace @classpath@ token
 */
applicationDistribution.from(project(':data-fabric').file('bin')) {
    into "bin"
    def cp = startScripts.classpath.collect { "\$APP_HOME/lib/${it.name}" }.join(':')
    cp += ":\$APP_HOME/conf/"
    filter(ReplaceTokens, tokens: [classpath: cp])
}



