apply plugin: 'continuuity'

apply plugin: 'application'
mainClassName = 'com.continuuity.SingleNodeMain'


buildscript {
  apply from: 'continuuity.gradle'
}

/**
 * Specify all the dependencies
 */
dependencies {

    // for singlenode - simulate standalone project
    multiModule = 0

    /// Internal dependencies.
    if(multiModule)
    {
        compile project(":common")
        compile project(":gateway")
        compile project(":flow")
        compile project(":data-fabric")
        compile project(":overlord")
        runtime group: 'com.continuuity', name: 'flow', classifier: 'api', version: '0.1.0-SNAPSHOT'
        runtime group: 'com.continuuity', name: 'data-fabric', classifier: 'api', version: '0.1.0-SNAPSHOT'
    }
    else
    {
        compile group: 'com.continuuity', name: 'common', version: '0.1.0-SNAPSHOT'
        compile group: 'com.continuuity', name: 'data-fabric', version: '0.1.0-SNAPSHOT'
        compile group: 'com.continuuity', name: 'flow', version: '0.1.0-SNAPSHOT'
        compile group: 'com.continuuity', name: 'gateway', version: '0.1.0-SNAPSHOT'
        compile group: 'com.continuuity', name: 'overlord', version: '0.1.0-SNAPSHOT'
    }

    testCompile group: 'junit', name: 'junit', version: '4.+'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '1.9.+'
}

/**
 * Exclude any config xml from singlenode jar
 */
jar.exclude '*.xml'

task javadoc(type: Javadoc, overwrite: true) {
    group = 'Documentation' 
    description = 'Aggregates API javadocs across all projects.'
    source project.parent.subprojects.collect { project ->
        project.sourceSets.api.allJava
    }
    destinationDir = new File(buildDir, 'javadoc')
    // Might need a classpath
    classpath = files(project.parent.subprojects.collect { project ->
        project.sourceSets.main.compileClasspath
    })
}

/**
 * Stage the final /conf directory 
*/
// dynamically generate "stageConf-[project]" tasks for subprojects other than singlenode.  these tasks will copy continuuity-[name].xml from src/main/resources to /conf
project.parent.subprojects.each { p ->
    println "    name: ${p.name}"
    println "    resrc: ${p.sourceSets.main.output.resourcesDir}"
    if (p.sourceSets.main.output.resourcesDir.isDirectory()) {
        //println "    resourceDir: ${p.sourceSets.main.output.resourcesDir}"
        if (p != project) { //exclude self (singlenode)
            println "staging conf for ${p.name}"
            task "genstageConf${p.name}" (type: Copy) {
                group 'Deployment'
                description "Copies src/main/resources to \$buildDir/conf for ${p.name}"
                from "${project(":${p.name}").sourceSets.main.output.resourcesDir}"
                include "continuuity-${p.name}.xml"
                into "${buildDir}/conf"
                //rename { "continuuity-${p.name}.xml" }
            }
        }
    } else {
        println "skipping conf for ${p.name} - no resources dir"
    }
}

// stage the singlenode conf dir
task stageConfSingleNode (type: Copy) {
    group 'Deployment'
    description "Copies src/main/resources to \$buildDir/conf for singlenode"
    println "staging conf for singlenode"
    from "${sourceSets.main.output.resourcesDir}"
    include 'continuuity-webapp.xml'
    include 'logback.xml'
    into "${buildDir}/conf"
    //fix path for web=app
    doLast {
        def webConfFile = file "${buildDir}/conf/continuuity-webapp.xml"
        webConfFile.text = webConfFile.text.replaceFirst('../web-cloud-app/build/server/main.js','web-app/server/main.js')
    }
}

stageConfSingleNode.dependsOn {
    tasks.findAll { task -> task.name.startsWith('genstageConf') }
}

// include staging conf dir (incl token-replaced files) in distZip
applicationDistribution.from("$buildDir/conf") {
    into "conf"
}


/**
 * Hack the start script  - set application name, remain in $APP_HOME and add $APP_HOME/conf/ to classpath
 */

tasks.startScripts {
    applicationName = "bigFlow"
    doLast {
        def scriptFile = file "${outputDir}/${applicationName}"
        scriptFile.text = scriptFile.text.replace('cd "$SAVED"', '')
        scriptFile.text = scriptFile.text.replaceFirst('CLASSPATH=(.*)', 'CLASSPATH=$1:\\$APP_HOME/conf/')
        //for windows .bat - yes, apparently backslash must be triple-escaped
        def scriptFileWin = file "${outputDir}/${applicationName}.bat"
        scriptFileWin.text = scriptFileWin.text.replaceFirst('set CLASSPATH=(.*)', 'set CLASSPATH=$1;%APP_HOME%\\\\conf\\\\')
    }
}


/**
 * Configure distZip task
 */
tasks.distZip {
    baseName = "bigFlow"
    appendix = "singlenode"
    version = ""
    classifier = ""
}

distZip.dependsOn javadoc, ':web-cloud-app:build', assemble, stageConfSingleNode 
installApp.dependsOn stageConfSingleNode

// include api javadoc   
applicationDistribution.from("$buildDir/javadoc") {
    into "docs"
}

// include :web-cloud-app/build/client directly
applicationDistribution.from(project(':web-cloud-app').file('build/client')) {
    into "web-app/client"
}

//include :web-cloud-app/build/server directly
applicationDistribution.from(project(':web-cloud-app').file('build/server')) {
    into "web-app/server"
}


/**
 * Collect bin scripts from gateway project and replace @classpath@ token - done within distZip task
 */

import org.apache.tools.ant.filters.ReplaceTokens

// dynamically generate "stageConf-[project]" tasks
project.parent.subprojects.each { p ->
    //println "    name: ${p.name}"
    if (p.file('bin').isDirectory()) {
        if (p != project) { //exclude self (singlenode)
            println "configuring bin for ${p.name}"
            applicationDistribution.from(project(":${p.name}").file('bin')) {
                into "bin"
                exclude 'node'
                def cp = startScripts.classpath.collect { "\$APP_HOME/lib/${it.name}" }.join(':')
                cp += ":\$APP_HOME/conf/"
                filter(ReplaceTokens, tokens: [classpath: cp])
            }
        }
    } else {
        println "skipping bin for ${p.name} - no bin dir"
    }
}
