./app-fabric/src/main/java/com/continuuity/app/metrics/AbstractProgramMetrics.java:import com.continuuity.common.metrics.MetricsCollectionService;
./app-fabric/src/main/java/com/continuuity/app/metrics/AbstractProgramMetrics.java: * Metrics will be emitted through {@link MetricsCollectionService}.
./app-fabric/src/main/java/com/continuuity/app/metrics/FlowletMetrics.java:import com.continuuity.common.metrics.MetricsCollectionService;
./app-fabric/src/main/java/com/continuuity/app/metrics/FlowletMetrics.java:  public FlowletMetrics(MetricsCollectionService collectionService,
./app-fabric/src/main/java/com/continuuity/app/metrics/MapReduceMetrics.java:import com.continuuity.common.metrics.MetricsCollectionService;
./app-fabric/src/main/java/com/continuuity/app/metrics/MapReduceMetrics.java:  public MapReduceMetrics(MetricsCollectionService collectionService, String applicationId,
./app-fabric/src/main/java/com/continuuity/app/metrics/ProcedureMetrics.java:import com.continuuity.common.metrics.MetricsCollectionService;
./app-fabric/src/main/java/com/continuuity/app/metrics/ProcedureMetrics.java:  public ProcedureMetrics(MetricsCollectionService collectionService, String applicationId, String procedureId) {
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/AbstractContext.java:import com.continuuity.common.metrics.MetricsCollectionService;
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/AbstractContext.java:                                                       MetricsCollectionService collectionService, String context) {
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/AbstractResourceReporter.java:import com.continuuity.common.metrics.MetricsCollectionService;
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/AbstractResourceReporter.java:  protected final MetricsCollectionService collectionService;
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/AbstractResourceReporter.java:  protected AbstractResourceReporter(MetricsCollectionService collectionService) {
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/AbstractResourceReporter.java:  protected AbstractResourceReporter(MetricsCollectionService collectionService, int interval) {
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/batch/AbstractMapReduceContextBuilder.java:import com.continuuity.common.metrics.MetricsCollectionService;
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/batch/AbstractMapReduceContextBuilder.java:    MetricsCollectionService metricsCollectionService =
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/batch/AbstractMapReduceContextBuilder.java:      (type == null) ? null : injector.getInstance(MetricsCollectionService.class);
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/batch/BasicMapReduceContext.java:import com.continuuity.common.metrics.MetricsCollectionService;
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/batch/BasicMapReduceContext.java:  private final MetricsCollectionService metricsCollectionService;
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/batch/BasicMapReduceContext.java:                               MetricsCollectionService metricsCollectionService) {
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/batch/BasicMapReduceContext.java:  public MetricsCollectionService getMetricsCollectionService() {
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/batch/dataset/DataSetInputFormat.java:    mrContext.getMetricsCollectionService().startAndWait();
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/batch/dataset/DataSetOutputFormat.java:    mrContext.getMetricsCollectionService().startAndWait();
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/batch/dataset/DataSetRecordReader.java:        context.getMetricsCollectionService().stop();
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/batch/dataset/DataSetRecordWriter.java:      mrContext.getMetricsCollectionService().stop();
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/batch/MapperWrapper.java:    basicMapReduceContext.getMetricsCollectionService().startAndWait();
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/batch/MapperWrapper.java:      basicMapReduceContext.getMetricsCollectionService().stop();
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/batch/MapReduceProgramRunner.java:import com.continuuity.common.metrics.MetricsCollectionService;
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/batch/MapReduceProgramRunner.java:  private final MetricsCollectionService metricsCollectionService;
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/batch/MapReduceProgramRunner.java:                                MetricsCollectionService metricsCollectionService,
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/batch/ReducerWrapper.java:    basicMapReduceContext.getMetricsCollectionService().startAndWait();
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/batch/ReducerWrapper.java:      basicMapReduceContext.getMetricsCollectionService().stop();
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/distributed/AbstractProgramTwillRunnable.java:import com.continuuity.common.metrics.MetricsCollectionService;
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/distributed/AbstractProgramTwillRunnable.java:  private MetricsCollectionService metricsCollectionService;
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/distributed/AbstractProgramTwillRunnable.java:      metricsCollectionService = injector.getInstance(MetricsCollectionService.class);
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/distributed/DistributedProgramRuntimeService.java:import com.continuuity.common.metrics.MetricsCollectionService;
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/distributed/DistributedProgramRuntimeService.java:                                   MetricsCollectionService metricsCollectionService,
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/distributed/DistributedProgramRuntimeService.java:    public ClusterResourceReporter(MetricsCollectionService metricsCollectionService, Configuration hConf,
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/distributed/ProgramRunnableResourceReporter.java:import com.continuuity.common.metrics.MetricsCollectionService;
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/distributed/ProgramRunnableResourceReporter.java:  public ProgramRunnableResourceReporter(Program program, MetricsCollectionService collectionService,
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/flow/BasicFlowletContext.java:import com.continuuity.common.metrics.MetricsCollectionService;
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/flow/BasicFlowletContext.java:                      FlowletSpecification flowletSpec, MetricsCollectionService metricsCollectionService) {
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/flow/FlowletProgramRunner.java:import com.continuuity.common.metrics.MetricsCollectionService;
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/flow/FlowletProgramRunner.java:  private final MetricsCollectionService metricsCollectionService;
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/flow/FlowletProgramRunner.java:                              MetricsCollectionService metricsCollectionService) {
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/procedure/BasicProcedureContext.java:import com.continuuity.common.metrics.MetricsCollectionService;
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/procedure/BasicProcedureContext.java:                        MetricsCollectionService collectionService) {
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/procedure/BasicProcedureContextFactory.java:import com.continuuity.common.metrics.MetricsCollectionService;
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/procedure/BasicProcedureContextFactory.java:  private final MetricsCollectionService collectionService;
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/procedure/BasicProcedureContextFactory.java:                               MetricsCollectionService collectionService) {
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/procedure/ProcedureProgramRunner.java:import com.continuuity.common.metrics.MetricsCollectionService;
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/procedure/ProcedureProgramRunner.java:  private final MetricsCollectionService metricsCollectionService;
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/procedure/ProcedureProgramRunner.java:                                MetricsCollectionService metricsCollectionService) {
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/workflow/WorkflowProgramRunner.java:import com.continuuity.common.metrics.MetricsCollectionService;
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/workflow/WorkflowProgramRunner.java:  private final MetricsCollectionService metricsCollectionService;
./app-fabric/src/main/java/com/continuuity/internal/app/runtime/workflow/WorkflowProgramRunner.java:                               MetricsCollectionService metricsCollectionService) {
./app-fabric/src/main/java/com/continuuity/internal/app/services/AppFabricServer.java:import com.continuuity.common.metrics.MetricsCollectionService;
./app-fabric/src/main/java/com/continuuity/internal/app/services/AppFabricServer.java:  private MetricsCollectionService metricsCollectionService;
./app-fabric/src/main/java/com/continuuity/internal/app/services/AppFabricServer.java:                         @Nullable MetricsCollectionService metricsCollectionService,
./common/src/main/java/com/continuuity/common/hooks/MetricsReporterHook.java:import com.continuuity.common.metrics.MetricsCollectionService;
./common/src/main/java/com/continuuity/common/hooks/MetricsReporterHook.java:  private final MetricsCollectionService metricsCollectionService;
./common/src/main/java/com/continuuity/common/hooks/MetricsReporterHook.java:  public MetricsReporterHook(@Nullable final MetricsCollectionService metricsCollectionService, String serviceName) {
./common/src/main/java/com/continuuity/common/metrics/MetricsCollectionService.java:public interface MetricsCollectionService extends Service {
./common/src/main/java/com/continuuity/common/metrics/NoOpMetricsCollectionService.java:public class NoOpMetricsCollectionService extends AbstractIdleService implements MetricsCollectionService {
./data-fabric/src/main/java/com/continuuity/data/dataset/DataSetInstantiationBase.java:import com.continuuity.common.metrics.MetricsCollectionService;
./data-fabric/src/main/java/com/continuuity/data/dataset/DataSetInstantiationBase.java:  public void setMetricsCollector(final MetricsCollectionService metricsCollectionService,
./data-fabric/src/main/java/com/continuuity/data/stream/service/StreamHandler.java:import com.continuuity.common.metrics.MetricsCollectionService;
./data-fabric/src/main/java/com/continuuity/data/stream/service/StreamHandler.java:                       TransactionExecutorFactory executorFactory, MetricsCollectionService metricsCollectionService) {
./data-fabric/src/main/java/com/continuuity/data/stream/service/StreamHttpService.java:import com.continuuity.common.metrics.MetricsCollectionService;
./data-fabric/src/main/java/com/continuuity/data/stream/service/StreamHttpService.java:                           @Nullable MetricsCollectionService metricsCollectionService) {
./data-fabric/src/main/java/com/continuuity/data2/datafabric/dataset/service/DatasetManagerService.java:import com.continuuity.common.metrics.MetricsCollectionService;
./data-fabric/src/main/java/com/continuuity/data2/datafabric/dataset/service/DatasetManagerService.java:                               MetricsCollectionService metricsCollectionService,
./data-fabric/src/main/java/com/continuuity/data2/dataset2/user/DatasetUserService.java:import com.continuuity.common.metrics.MetricsCollectionService;
./data-fabric/src/main/java/com/continuuity/data2/dataset2/user/DatasetUserService.java:                            MetricsCollectionService metricsCollectionService,
./data-fabric/src/test/java/com/continuuity/data2/datafabric/dataset/DataFabricDatasetManagerTest.java:import com.continuuity.common.metrics.MetricsCollectionService;
./data-fabric/src/test/java/com/continuuity/data2/datafabric/dataset/DataFabricDatasetManagerTest.java:import com.continuuity.common.metrics.NoOpMetricsCollectionService;
./data-fabric/src/test/java/com/continuuity/data2/datafabric/dataset/DataFabricDatasetManagerTest.java:    MetricsCollectionService metricsCollectionService = new NoOpMetricsCollectionService();
./data-fabric/src/test/java/com/continuuity/data2/datafabric/dataset/service/DatasetManagerServiceTestBase.java:import com.continuuity.common.metrics.MetricsCollectionService;
./data-fabric/src/test/java/com/continuuity/data2/datafabric/dataset/service/DatasetManagerServiceTestBase.java:import com.continuuity.common.metrics.NoOpMetricsCollectionService;
./data-fabric/src/test/java/com/continuuity/data2/datafabric/dataset/service/DatasetManagerServiceTestBase.java:    MetricsCollectionService metricsCollectionService = new NoOpMetricsCollectionService();
./data-fabric/src/test/java/com/continuuity/data2/dataset2/user/DatasetUserServiceTest.java:import com.continuuity.common.metrics.MetricsCollectionService;
./data-fabric/src/test/java/com/continuuity/data2/dataset2/user/DatasetUserServiceTest.java:import com.continuuity.common.metrics.NoOpMetricsCollectionService;
./data-fabric/src/test/java/com/continuuity/data2/dataset2/user/DatasetUserServiceTest.java:        bind(MetricsCollectionService.class).to(NoOpMetricsCollectionService.class);
./gateway/src/main/java/com/continuuity/gateway/Gateway.java:import com.continuuity.common.metrics.MetricsCollectionService;
./gateway/src/main/java/com/continuuity/gateway/Gateway.java:                 @Nullable MetricsCollectionService metricsCollectionService) {
./gateway/src/main/java/com/continuuity/gateway/run/GatewayTwillRunnable.java:import com.continuuity.common.metrics.MetricsCollectionService;
./gateway/src/main/java/com/continuuity/gateway/run/GatewayTwillRunnable.java:  private MetricsCollectionService metricsCollectionService;
./gateway/src/main/java/com/continuuity/gateway/run/GatewayTwillRunnable.java:      metricsCollectionService = injector.getInstance(MetricsCollectionService.class);
./gateway/src/main/java/com/continuuity/gateway/runtime/Main.java:import com.continuuity.common.metrics.MetricsCollectionService;
./gateway/src/main/java/com/continuuity/gateway/runtime/Main.java:  private MetricsCollectionService metricsCollectionService;
./gateway/src/main/java/com/continuuity/gateway/runtime/Main.java:    metricsCollectionService = injector.getInstance(MetricsCollectionService.class);
./gateway/src/test/java/com/continuuity/gateway/GatewayTestBase.java:import com.continuuity.common.metrics.MetricsCollectionService;
./gateway/src/test/java/com/continuuity/gateway/GatewayTestBase.java:                 MockMetricsCollectionService metricsCollectionService = new MockMetricsCollectionService();
./gateway/src/test/java/com/continuuity/gateway/GatewayTestBase.java:                 bind(MetricsCollectionService.class).toInstance(metricsCollectionService);
./gateway/src/test/java/com/continuuity/gateway/GatewayTestBase.java:                 bind(MockMetricsCollectionService.class).toInstance(metricsCollectionService);
./gateway/src/test/java/com/continuuity/gateway/handlers/hooks/MetricsReporterHookTest.java:import com.continuuity.gateway.MockMetricsCollectionService;
./gateway/src/test/java/com/continuuity/gateway/handlers/hooks/MetricsReporterHookTest.java:  private static MockMetricsCollectionService mockMetricsCollectionService;
./gateway/src/test/java/com/continuuity/gateway/handlers/hooks/MetricsReporterHookTest.java:    mockMetricsCollectionService = injector.getInstance(MockMetricsCollectionService.class);
./gateway/src/test/java/com/continuuity/gateway/handlers/hooks/MetricsReporterHookTest.java:    int received = mockMetricsCollectionService.getMetrics(context, "request.received");
./gateway/src/test/java/com/continuuity/gateway/handlers/hooks/MetricsReporterHookTest.java:    int successful = mockMetricsCollectionService.getMetrics(context, "response.successful");
./gateway/src/test/java/com/continuuity/gateway/handlers/hooks/MetricsReporterHookTest.java:    int clientError = mockMetricsCollectionService.getMetrics(context, "response.client-error");
./gateway/src/test/java/com/continuuity/gateway/handlers/hooks/MetricsReporterHookTest.java:    Assert.assertEquals(received + 1, mockMetricsCollectionService.getMetrics(context, "request.received"));
./gateway/src/test/java/com/continuuity/gateway/handlers/hooks/MetricsReporterHookTest.java:    Assert.assertEquals(successful + 1, mockMetricsCollectionService.getMetrics(context, "response.successful"));
./gateway/src/test/java/com/continuuity/gateway/handlers/hooks/MetricsReporterHookTest.java:    Assert.assertEquals(clientError, mockMetricsCollectionService.getMetrics(context, "response.client-error"));
./gateway/src/test/java/com/continuuity/gateway/handlers/hooks/MetricsReporterHookTest.java:    int received = mockMetricsCollectionService.getMetrics(context, "request.received");
./gateway/src/test/java/com/continuuity/gateway/handlers/hooks/MetricsReporterHookTest.java:    int successful = mockMetricsCollectionService.getMetrics(context, "response.successful");
./gateway/src/test/java/com/continuuity/gateway/handlers/hooks/MetricsReporterHookTest.java:    int clientError = mockMetricsCollectionService.getMetrics(context, "response.client-error");
./gateway/src/test/java/com/continuuity/gateway/handlers/hooks/MetricsReporterHookTest.java:    Assert.assertEquals(received + 1, mockMetricsCollectionService.getMetrics(context, "request.received"));
./gateway/src/test/java/com/continuuity/gateway/handlers/hooks/MetricsReporterHookTest.java:    Assert.assertEquals(successful, mockMetricsCollectionService.getMetrics(context, "response.successful"));
./gateway/src/test/java/com/continuuity/gateway/handlers/hooks/MetricsReporterHookTest.java:    Assert.assertEquals(clientError + 1, mockMetricsCollectionService.getMetrics(context, "response.client-error"));
./gateway/src/test/java/com/continuuity/gateway/handlers/metrics/BaseMetricsQueryTest.java:import com.continuuity.common.metrics.MetricsCollectionService;
./gateway/src/test/java/com/continuuity/gateway/handlers/metrics/BaseMetricsQueryTest.java:  protected static MetricsCollectionService collectionService;
./gateway/src/test/java/com/continuuity/gateway/handlers/metrics/BaseMetricsQueryTest.java:    collectionService = injector.getInstance(MetricsCollectionService.class);
./gateway/src/test/java/com/continuuity/gateway/MetricsServiceTestsSuite.java:import com.continuuity.common.metrics.MetricsCollectionService;
./gateway/src/test/java/com/continuuity/gateway/MetricsServiceTestsSuite.java:               MockMetricsCollectionService metricsCollectionService =
./gateway/src/test/java/com/continuuity/gateway/MetricsServiceTestsSuite.java:                 new MockMetricsCollectionService();
./gateway/src/test/java/com/continuuity/gateway/MetricsServiceTestsSuite.java:               bind(MetricsCollectionService.class).toInstance(metricsCollectionService);
./gateway/src/test/java/com/continuuity/gateway/MetricsServiceTestsSuite.java:               bind(MockMetricsCollectionService.class).toInstance(metricsCollectionService);
./gateway/src/test/java/com/continuuity/gateway/MockMetricsCollectionService.java:import com.continuuity.common.metrics.MetricsCollectionService;
./gateway/src/test/java/com/continuuity/gateway/MockMetricsCollectionService.java:public class MockMetricsCollectionService implements MetricsCollectionService {
./reactor-master/src/main/java/com/continuuity/data/runtime/main/ReactorServiceMain.java:import com.continuuity.common.metrics.MetricsCollectionService;
./reactor-master/src/main/java/com/continuuity/data/runtime/main/ReactorServiceMain.java:  private MetricsCollectionService metricsCollectionService;
./reactor-master/src/main/java/com/continuuity/data/runtime/main/ReactorServiceMain.java:    metricsCollectionService = baseInjector.getInstance(MetricsCollectionService.class);
./reactor-master/src/main/java/com/continuuity/data/runtime/main/StreamHandlerRunnable.java:import com.continuuity.common.metrics.MetricsCollectionService;
./reactor-master/src/main/java/com/continuuity/data/runtime/main/StreamHandlerRunnable.java:    services.add(injector.getInstance(MetricsCollectionService.class));
./reactor-master/src/main/java/com/continuuity/data/runtime/main/TransactionServiceTwillRunnable.java:import com.continuuity.common.metrics.MetricsCollectionService;
./reactor-master/src/main/java/com/continuuity/data/runtime/main/TransactionServiceTwillRunnable.java:  private MetricsCollectionService metricsCollectionService;
./reactor-master/src/main/java/com/continuuity/data/runtime/main/TransactionServiceTwillRunnable.java:      metricsCollectionService = injector.getInstance(MetricsCollectionService.class);
./reactor-master/src/main/java/com/continuuity/data/runtime/main/WrapperTwillApplication.java:import com.continuuity.common.metrics.MetricsCollectionService;
./reactor-master/src/main/java/com/continuuity/data/runtime/main/WrapperTwillApplication.java:    MetricsCollectionService collectionService;
./reactor-master/src/main/java/com/continuuity/data/runtime/main/WrapperTwillApplication.java:        collectionService = injector.getInstance(MetricsCollectionService.class);
./singlenode/src/main/java/com/continuuity/SingleNodeMain.java:import com.continuuity.common.metrics.MetricsCollectionService;
./singlenode/src/main/java/com/continuuity/SingleNodeMain.java:  private final MetricsCollectionService metricsCollectionService;
./singlenode/src/main/java/com/continuuity/SingleNodeMain.java:    metricsCollectionService = injector.getInstance(MetricsCollectionService.class);
./unit-test/src/main/java/com/continuuity/test/internal/TestMetricsCollectionService.java:import com.continuuity.metrics.collect.AggregatedMetricsCollectionService;
./unit-test/src/main/java/com/continuuity/test/internal/TestMetricsCollectionService.java:public final class TestMetricsCollectionService extends AggregatedMetricsCollectionService {
./unit-test/src/main/java/com/continuuity/test/ReactorTestBase.java:import com.continuuity.common.metrics.MetricsCollectionService;
./unit-test/src/main/java/com/continuuity/test/ReactorTestBase.java:import com.continuuity.test.internal.TestMetricsCollectionService;
./unit-test/src/main/java/com/continuuity/test/ReactorTestBase.java:  private static MetricsCollectionService metricsCollectionService;
./unit-test/src/main/java/com/continuuity/test/ReactorTestBase.java:    metricsCollectionService = injector.getInstance(MetricsCollectionService.class);
./unit-test/src/main/java/com/continuuity/test/ReactorTestBase.java:      bind(MetricsCollectionService.class).to(TestMetricsCollectionService.class).in(Scopes.SINGLETON);
./watchdog/src/main/java/com/continuuity/metrics/collect/AggregatedMetricsCollectionService.java:import com.continuuity.common.metrics.MetricsCollectionService;
./watchdog/src/main/java/com/continuuity/metrics/collect/AggregatedMetricsCollectionService.java: * Base class for {@link MetricsCollectionService} which collect metrics through a set of cached
./watchdog/src/main/java/com/continuuity/metrics/collect/AggregatedMetricsCollectionService.java:public abstract class AggregatedMetricsCollectionService extends AbstractScheduledService
./watchdog/src/main/java/com/continuuity/metrics/collect/AggregatedMetricsCollectionService.java:                                                         implements MetricsCollectionService {
./watchdog/src/main/java/com/continuuity/metrics/collect/AggregatedMetricsCollectionService.java:  private static final Logger LOG = LoggerFactory.getLogger(AggregatedMetricsCollectionService.class);
./watchdog/src/main/java/com/continuuity/metrics/collect/AggregatedMetricsCollectionService.java:  public AggregatedMetricsCollectionService() {
./watchdog/src/main/java/com/continuuity/metrics/collect/AggregatedMetricsCollectionService.java:            LOG.info("In AggregatedMetricsCollectionService, metric name : {} count : {}", metricName, value);
./watchdog/src/main/java/com/continuuity/metrics/collect/KafkaMetricsCollectionService.java: * A {@link AggregatedMetricsCollectionService} that publish {@link MetricsRecord} to kafka. The partition
./watchdog/src/main/java/com/continuuity/metrics/collect/KafkaMetricsCollectionService.java:public final class KafkaMetricsCollectionService extends AggregatedMetricsCollectionService {
./watchdog/src/main/java/com/continuuity/metrics/collect/KafkaMetricsCollectionService.java:  private static final Logger LOG = LoggerFactory.getLogger(KafkaMetricsCollectionService.class);
./watchdog/src/main/java/com/continuuity/metrics/collect/KafkaMetricsCollectionService.java:  public KafkaMetricsCollectionService(KafkaClient kafkaClient,
./watchdog/src/main/java/com/continuuity/metrics/collect/KafkaMetricsCollectionService.java:  public KafkaMetricsCollectionService(KafkaClient kafkaClient, String topicPrefix,
./watchdog/src/main/java/com/continuuity/metrics/collect/LocalMetricsCollectionService.java: * A {@link com.continuuity.common.metrics.MetricsCollectionService} that writes to MetricsTable directly.
./watchdog/src/main/java/com/continuuity/metrics/collect/LocalMetricsCollectionService.java:public final class LocalMetricsCollectionService extends AggregatedMetricsCollectionService {
./watchdog/src/main/java/com/continuuity/metrics/collect/LocalMetricsCollectionService.java:  private static final Logger LOG = LoggerFactory.getLogger(LocalMetricsCollectionService.class);
./watchdog/src/main/java/com/continuuity/metrics/collect/LocalMetricsCollectionService.java:  public LocalMetricsCollectionService(CConfiguration cConf, MetricsTableFactory tableFactory,
./watchdog/src/main/java/com/continuuity/metrics/collect/MapReduceCounterCollectionService.java: * A {@link com.continuuity.metrics.collect.AggregatedMetricsCollectionService} that publish
./watchdog/src/main/java/com/continuuity/metrics/collect/MapReduceCounterCollectionService.java:public final class MapReduceCounterCollectionService extends AggregatedMetricsCollectionService {
./watchdog/src/main/java/com/continuuity/metrics/guice/DistributedMetricsClientModule.java:import com.continuuity.common.metrics.MetricsCollectionService;
./watchdog/src/main/java/com/continuuity/metrics/guice/DistributedMetricsClientModule.java:import com.continuuity.metrics.collect.KafkaMetricsCollectionService;
./watchdog/src/main/java/com/continuuity/metrics/guice/DistributedMetricsClientModule.java:    bind(MetricsCollectionService.class).to(KafkaMetricsCollectionService.class).in(Scopes.SINGLETON);
./watchdog/src/main/java/com/continuuity/metrics/guice/DistributedMetricsClientModule.java:    expose(MetricsCollectionService.class);
./watchdog/src/main/java/com/continuuity/metrics/guice/MetricsClientRuntimeModule.java:import com.continuuity.common.metrics.MetricsCollectionService;
./watchdog/src/main/java/com/continuuity/metrics/guice/MetricsClientRuntimeModule.java:import com.continuuity.metrics.collect.AggregatedMetricsCollectionService;
./watchdog/src/main/java/com/continuuity/metrics/guice/MetricsClientRuntimeModule.java:import com.continuuity.metrics.collect.LocalMetricsCollectionService;
./watchdog/src/main/java/com/continuuity/metrics/guice/MetricsClientRuntimeModule.java:        bind(MetricsCollectionService.class).to(LocalMetricsCollectionService.class).in(Scopes.SINGLETON);
./watchdog/src/main/java/com/continuuity/metrics/guice/MetricsClientRuntimeModule.java:        expose(MetricsCollectionService.class);
./watchdog/src/main/java/com/continuuity/metrics/guice/MetricsClientRuntimeModule.java:        bind(MetricsCollectionService.class).to(LocalMetricsCollectionService.class).in(Scopes.SINGLETON);
./watchdog/src/main/java/com/continuuity/metrics/guice/MetricsClientRuntimeModule.java:        expose(MetricsCollectionService.class);
./watchdog/src/main/java/com/continuuity/metrics/guice/MetricsClientRuntimeModule.java:        bind(MetricsCollectionService.class).to(MapReduceCounterCollectionService.class).in(Scopes.SINGLETON);
./watchdog/src/main/java/com/continuuity/metrics/guice/MetricsClientRuntimeModule.java:        expose(MetricsCollectionService.class);
./watchdog/src/main/java/com/continuuity/metrics/guice/MetricsClientRuntimeModule.java:   * Returns a module that bind MetricsCollectionService to a noop one.
./watchdog/src/main/java/com/continuuity/metrics/guice/MetricsClientRuntimeModule.java:        bind(MetricsCollectionService.class).toInstance(new AggregatedMetricsCollectionService() {
./watchdog/src/main/java/com/continuuity/metrics/query/MetricsQueryService.java:import com.continuuity.common.metrics.MetricsCollectionService;
./watchdog/src/main/java/com/continuuity/metrics/query/MetricsQueryService.java:                             @Nullable MetricsCollectionService metricsCollectionService) {
./watchdog/src/test/java/com/continuuity/metrics/collect/AggregatedMetricsCollectionServiceTest.java: * Testing the basic properties of the {@link AggregatedMetricsCollectionService}.
./watchdog/src/test/java/com/continuuity/metrics/collect/AggregatedMetricsCollectionServiceTest.java:public class AggregatedMetricsCollectionServiceTest {
./watchdog/src/test/java/com/continuuity/metrics/collect/AggregatedMetricsCollectionServiceTest.java:    AggregatedMetricsCollectionService service = new AggregatedMetricsCollectionService() {
./watchdog/src/test/java/com/continuuity/metrics/collect/KafkaMetricsCollectionServiceTest.java:import com.continuuity.common.metrics.MetricsCollectionService;
./watchdog/src/test/java/com/continuuity/metrics/collect/KafkaMetricsCollectionServiceTest.java:public class KafkaMetricsCollectionServiceTest {
./watchdog/src/test/java/com/continuuity/metrics/collect/KafkaMetricsCollectionServiceTest.java:  private static final Logger LOG = LoggerFactory.getLogger(KafkaMetricsCollectionServiceTest.class);
./watchdog/src/test/java/com/continuuity/metrics/collect/KafkaMetricsCollectionServiceTest.java:    MetricsCollectionService collectionService = new KafkaMetricsCollectionService(kafkaClient, "metrics",
./watchdog/src/test/java/com/continuuity/metrics/collect/KafkaMetricsCollectionServiceTest.java:    MetricsCollectionService collectionService = new KafkaMetricsCollectionService(kafkaClient, "metrics",
