package com.continuuity.performance.runner;

import com.continuuity.performance.application.BenchmarkRuntimeMetrics;
import com.continuuity.performance.apps.fun.LoggingApp;
import com.continuuity.test.app.ApplicationManager;
import com.continuuity.test.app.FlowManager;

import java.io.IOException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

/**
 *  Example of application-level performance test.
 */
public class LoggingPerformanceTest {

  @PerformanceTest
  public void testApp() throws IOException, TimeoutException, InterruptedException {
    final int numEvents = 2000;

    ApplicationManager applicationManager = PerformanceTestRunner.deployApplication(LoggingApp.class);

    try {

      FlowManager flowManager = applicationManager.startFlow("LoggingFlow");

      BenchmarkRuntimeMetrics sourceFlowletMetrics = BenchmarkRuntimeStats.getFlowletMetrics("LoggingApp", "LoggingFlow",
                                                                                             "source");

      System.out.println("Number of events generated by source flowlet = " + sourceFlowletMetrics.getProcessed());

      sourceFlowletMetrics.waitForProcessed(numEvents, 120, TimeUnit.SECONDS);

      System.out.println("Number of events generated by source flowlet = " + sourceFlowletMetrics.getProcessed());

      BenchmarkRuntimeMetrics loggerFlowletMetrics = BenchmarkRuntimeStats.getFlowletMetrics("LoggingApp", "LoggingFlow",
                                                                                             "logger");

      System.out.println("Number of events processed by logger flowlet = " + loggerFlowletMetrics.getProcessed());

      loggerFlowletMetrics.waitForProcessed(numEvents, 120, TimeUnit.SECONDS);

      System.out.println("Number of events processed by logger flowlet = " + loggerFlowletMetrics.getProcessed());

    } finally {
      applicationManager.stopAll();
    }
  }
}

