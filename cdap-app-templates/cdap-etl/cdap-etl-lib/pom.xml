<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright Â© 2015 Cask Data, Inc.

  Licensed under the Apache License, Version 2.0 (the "License"); you may not
  use this file except in compliance with the License. You may obtain a copy of
  the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  License for the specific language governing permissions and limitations under
  the License.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>co.cask.cdap</groupId>
    <artifactId>cdap-etl</artifactId>
    <version>3.3.0-SNAPSHOT</version>
  </parent>

  <artifactId>cdap-etl-lib</artifactId>
  <name>CDAP ETL App Template Library</name>
  <packaging>jar</packaging>

  <properties>
    <!-- properties for script build step that creates the config files for the artifacts -->
    <widgets.dir>widgets</widgets.dir>
    <docs.dir>docs</docs.dir>
    <etl.versionRange>[${project.version},${project.version}]</etl.versionRange>
    <!-- this is here because project.basedir evaluates to null in the script build step -->
    <main.basedir>${project.basedir}</main.basedir>
  </properties>


  <dependencies>
    <dependency>
      <groupId>co.cask.cdap</groupId>
      <artifactId>cdap-etl-api</artifactId>
      <version>${project.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>co.cask.cdap</groupId>
      <artifactId>cdap-formats</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>co.cask.cdap</groupId>
      <artifactId>cdap-etl-common</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-common</artifactId>
    </dependency>
    <dependency>
      <groupId>org.twitter4j</groupId>
      <artifactId>twitter4j-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.twitter4j</groupId>
      <artifactId>twitter4j-stream</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-mapreduce-client-core</artifactId>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.avro</groupId>
      <artifactId>avro</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.avro</groupId>
      <artifactId>avro-mapred</artifactId>
      <classifier>hadoop2</classifier>
    </dependency>
    <!-- Start for JMS Source -->
    <dependency>
      <groupId>org.apache.geronimo.specs</groupId>
      <artifactId>geronimo-jms_1.1_spec</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.activemq</groupId>
      <artifactId>activemq-core</artifactId>
      <version>5.5.1</version>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-api</artifactId>
        </exclusion>
        <exclusion>
          <groupId>log4j</groupId>
          <artifactId>log4j</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <!-- End for JMS Source -->
    <!-- Start for Kafka Source -->
    <dependency>
      <groupId>org.apache.zookeeper</groupId>
      <artifactId>zookeeper</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.twill</groupId>
      <artifactId>twill-core</artifactId>
      <exclusions>
        <exclusion>
          <groupId>org.apache.kafka</groupId>
          <artifactId>kafka_2.10</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.kafka</groupId>
      <artifactId>kafka_2.10</artifactId>
      <exclusions>
        <exclusion>
          <groupId>org.xerial.snappy</groupId>
          <artifactId>snappy-java</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.xerial.snappy</groupId>
      <artifactId>snappy-java</artifactId>
    </dependency>
    <!-- End for Kafka Source -->
    <dependency>
      <groupId>com.amazonaws</groupId>
      <artifactId>amazon-sqs-java-messaging-lib</artifactId>
      <version>1.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.elasticmq</groupId>
      <artifactId>elasticmq-core_2.10</artifactId>
      <version>0.6.3</version>
    </dependency>
    <dependency>
      <groupId>org.elasticmq</groupId>
      <artifactId>elasticmq-rest-sqs_2.10</artifactId>
      <version>0.6.3</version>
    </dependency>
    <dependency>
      <groupId>com.twitter</groupId>
      <artifactId>parquet-avro</artifactId>
      <version>1.6.0</version>
    </dependency>
    <dependency>
      <groupId>net.sf.uadetector</groupId>
      <artifactId>uadetector-resources</artifactId>
      <version>2014.04</version>
    </dependency>
    <!-- Need to add ASM explicitly to override the ASM4 dependency from elasticsearch -->
    <dependency>
      <groupId>org.ow2.asm</groupId>
      <artifactId>asm-all</artifactId>
    </dependency>
    <dependency>
      <groupId>commons-validator</groupId>
      <artifactId>commons-validator</artifactId>
      <version>1.4.1</version>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.felix</groupId>
        <artifactId>maven-bundle-plugin</artifactId>
        <version>2.5.4</version>
        <extensions>true</extensions>
        <configuration>
          <instructions>
            <_exportcontents>co.cask.cdap.etl.batch.*;co.cask.cdap.etl.transform.*;
              co.cask.cdap.etl.validator.*;
              co.cask.cdap.etl.common;org.apache.avro.mapreduce;parquet.avro.*;parquet.hadoop.*;
              co.cask.cdap.etl.realtime.*;co.cask.cdap.etl.transform.*;
              co.cask.cdap.etl.validator.*;co.cask.cdap.etl.common</_exportcontents>
            <Embed-Dependency>*;inline=false;scope=compile</Embed-Dependency>
            <Embed-Transitive>true</Embed-Transitive>
            <Embed-Directory>lib</Embed-Directory>
          </instructions>
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>bundle</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>1.7</version>
        <executions>
          <!-- Create the config file for artifact which can be used to deploy the artifact.
               Sets the parents field to system:cdap-etl-batch and system:cdap-etl-realtime with whatever
               version range is set in the etl.versionRange property.
               also sets a widget and doc property for each file contained in the widgets and docs directories. -->
          <execution>
            <id>create-artifact-config</id>
            <phase>prepare-package</phase>
            <configuration>
              <target>
                <script language="javascript"> <![CDATA[
                  importClass(java.io.File);
                  importClass(java.io.FileWriter);
                  importClass(java.io.BufferedWriter);
                  importClass(java.nio.file.Files);
                  importClass(java.nio.charset.StandardCharsets);

                  // for some reason, project.basedir evaluates to null if we just get the property here.
                  // so we set main.basedir to project.basedir in the pom properties, then main.basedir is used here
                  // where it evaluates correctly for whatever reason
                  var baseDir = project.getProperty("main.basedir");
                  var targetDir = project.getProperty("project.build.directory");
                  var artifactId = project.getProperty("project.artifactId");
                  var version = project.getProperty("project.version");

                  var cfgFile = new File(targetDir, artifactId + "-" + version + ".json");
                  if (!cfgFile.exists()) {
                    cfgFile.createNewFile();
                  }

                  var etlRange = project.getProperty("etl.versionRange");
                  var config = {
                    "parents": [ "system:cdap-etl-batch" + etlRange, "system:cdap-etl-realtime" + etlRange, "system:cdap-data-quality" + etlRange ],
                    "properties": {}
                  }

                  // look in widgets directory for widget config for each plugin
                  var widgetsDir = new File(baseDir, project.getProperty("widgets.dir"));
                  if (widgetsDir.isDirectory()) {
                    var widgetsFiles = widgetsDir.listFiles();
                    for (i = 0; i < widgetsFiles.length; i++) {
                      var widgetsFile = widgetsFiles[i];
                      if (widgetsFile.isFile()) {
                        var contents = new java.lang.String(Files.readAllBytes(widgetsFile.toPath()), StandardCharsets.UTF_8);
                        var contentsAsJson = JSON.parse(contents);
                        var propertyName = "widgets." + widgetsFile.getName();
                        // if the filename ends with .json, strip the .json
                        if (propertyName.indexOf(".json", propertyName.length - 5) !== -1) {
                          propertyName = propertyName.slice(0, -5);
                        }
                        config.properties[propertyName] = JSON.stringify(contentsAsJson);
                      }
                    }
                  }

                  // look in the docs directory for docs for each plugin
                  var docsDir = new File(baseDir, project.getProperty("docs.dir"));
                  if (docsDir.isDirectory()) {
                    var docFiles = docsDir.listFiles();
                    for (i = 0; i < docFiles.length; i++) {
                      var docFile = docFiles[i];
                      if (docFile.isFile()) {
                        var contents = new java.lang.String(Files.readAllBytes(docFile.toPath()), StandardCharsets.UTF_8);
                        var propertyName = "doc." + docFile.getName();
                        // if the filename ends with .md, strip the extension
                        if (propertyName.indexOf(".md", propertyName.length - 3) !== -1) {
                          propertyName = propertyName.slice(0, -3);
                        }
                        config.properties[propertyName] = contentsAsJson;
                      }
                    }
                  }

                  var fw = new BufferedWriter(FileWriter(cfgFile.getAbsoluteFile()));
                  fw.write(JSON.stringify(config, null, 2));
                  fw.close();
                ]]></script>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

</project>
