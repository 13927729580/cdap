/// This file is also imported by the continuuity plugin
/// to obtain the repository list.
import com.continuuity.gradle.GitRepo;

GitRepo.baseDir = rootProject.projectDir;

if(!hasProperty("branch")) {
  //if branch is not passed in using -P parameter - then use the branch of continuuity repo 
  //branch = "git rev-parse --abbrev-ref HEAD".execute().text
   branch = "master"
}

println "Working on branch $branch"

// Declare the git repos that will comprise the master build.
ext.gitRepos = []
gitRepos << new GitRepo(name: "gateway", branch: branch);
gitRepos << new GitRepo(name: "common", branch: branch);
gitRepos << new GitRepo(name: "data-fabric", branch: branch);
gitRepos << new GitRepo(name: "flow", branch: branch);
gitRepos << new GitRepo(name: "overlord", branch: branch);
gitRepos << new GitRepo(name: "web-cloud-app", branch: branch);
gitRepos << new GitRepo(name: "examples", branch: branch);
gitRepos << new GitRepo(name: "singlenode", branch: branch);
gitRepos << new GitRepo(name: "performance", branch: branch);
gitRepos << new GitRepo(name: "manager", branch: branch);

//workaround to share the repo definition with the rootproject that has the git tasks declared
gradle.ext.gitRepos = gitRepos
/// Adds separate git repo based subprojects.
for (g in gitRepos) {
	g.load();
	include(g.getDirectory())
}

project(':singlenode').buildFileName = 'package.gradle'

/// Adds subprojects included in the master repository.
include('distributions')
include('test')

