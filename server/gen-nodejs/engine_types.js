//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
var InvalidOperation = module.exports.InvalidOperation = function(args) {
  Thrift.TException.call(this, "InvalidOperation")
  this.name = "InvalidOperation"
  this.what = null;
  this.why = null;
  if (args) {
    if (args.what !== undefined) {
      this.what = args.what;
    }
    if (args.why !== undefined) {
      this.why = args.why;
    }
  }
};
Thrift.inherits(InvalidOperation, Thrift.TException);
InvalidOperation.prototype.name = 'InvalidOperation';
InvalidOperation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.what = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.why = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidOperation.prototype.write = function(output) {
  output.writeStructBegin('InvalidOperation');
  if (this.what) {
    output.writeFieldBegin('what', Thrift.Type.I32, 1);
    output.writeI32(this.what);
    output.writeFieldEnd();
  }
  if (this.why) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 2);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FlowletSchema = module.exports.FlowletSchema = function(args) {
  this.inbound = null;
  this.outbound = null;
  if (args) {
    if (args.inbound !== undefined) {
      this.inbound = args.inbound;
    }
    if (args.outbound !== undefined) {
      this.outbound = args.outbound;
    }
  }
};
FlowletSchema.prototype = {};
FlowletSchema.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.inbound = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          if (_i5 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readString();
          this.inbound[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size8 = 0;
        var _rtmp312;
        this.outbound = {};
        var _ktype9 = 0;
        var _vtype10 = 0;
        _rtmp312 = input.readMapBegin();
        _ktype9 = _rtmp312.ktype;
        _vtype10 = _rtmp312.vtype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          if (_i13 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key14 = null;
          var val15 = null;
          key14 = input.readString();
          val15 = input.readString();
          this.outbound[key14] = val15;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FlowletSchema.prototype.write = function(output) {
  output.writeStructBegin('FlowletSchema');
  if (this.inbound) {
    output.writeFieldBegin('inbound', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.inbound));
    for (var kiter16 in this.inbound)
    {
      if (this.inbound.hasOwnProperty(kiter16))
      {
        var viter17 = this.inbound[kiter16];
        output.writeString(kiter16);
        output.writeString(viter17);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.outbound) {
    output.writeFieldBegin('outbound', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.outbound));
    for (var kiter18 in this.outbound)
    {
      if (this.outbound.hasOwnProperty(kiter18))
      {
        var viter19 = this.outbound[kiter18];
        output.writeString(kiter18);
        output.writeString(viter19);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FlowletInstance = module.exports.FlowletInstance = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
FlowletInstance.prototype = {};
FlowletInstance.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FlowletInstance.prototype.write = function(output) {
  output.writeStructBegin('FlowletInstance');
  if (this.id) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Flowlet = module.exports.Flowlet = function(args) {
  this.id = null;
  this.name = null;
  this.className = null;
  this.schema = null;
  this.status = null;
  this.instances = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.className !== undefined) {
      this.className = args.className;
    }
    if (args.schema !== undefined) {
      this.schema = args.schema;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.instances !== undefined) {
      this.instances = args.instances;
    }
  }
};
Flowlet.prototype = {};
Flowlet.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.className = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.schema = new ttypes.FlowletSchema();
        this.schema.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.status = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size20 = 0;
        var _rtmp324;
        this.instances = [];
        var _etype23 = 0;
        _rtmp324 = input.readListBegin();
        _etype23 = _rtmp324.etype;
        _size20 = _rtmp324.size;
        for (var _i25 = 0; _i25 < _size20; ++_i25)
        {
          var elem26 = null;
          elem26 = new ttypes.FlowletInstance();
          elem26.read(input);
          this.instances.push(elem26);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Flowlet.prototype.write = function(output) {
  output.writeStructBegin('Flowlet');
  if (this.id) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.className) {
    output.writeFieldBegin('className', Thrift.Type.STRING, 3);
    output.writeString(this.className);
    output.writeFieldEnd();
  }
  if (this.schema) {
    output.writeFieldBegin('schema', Thrift.Type.STRUCT, 4);
    this.schema.write(output);
    output.writeFieldEnd();
  }
  if (this.status) {
    output.writeFieldBegin('status', Thrift.Type.STRING, 5);
    output.writeString(this.status);
    output.writeFieldEnd();
  }
  if (this.instances) {
    output.writeFieldBegin('instances', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.instances.length);
    for (var iter27 in this.instances)
    {
      if (this.instances.hasOwnProperty(iter27))
      {
        iter27 = this.instances[iter27];
        iter27.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Flow = module.exports.Flow = function(args) {
  this.id = null;
  this.name = null;
  this.username = null;
  this.ns = null;
  this.status = null;
  this.runs = null;
  this.flowlets = null;
  this.connections = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.ns !== undefined) {
      this.ns = args.ns;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.runs !== undefined) {
      this.runs = args.runs;
    }
    if (args.flowlets !== undefined) {
      this.flowlets = args.flowlets;
    }
    if (args.connections !== undefined) {
      this.connections = args.connections;
    }
  }
};
Flow.prototype = {};
Flow.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.ns = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.status = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.runs = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size28 = 0;
        var _rtmp332;
        this.flowlets = [];
        var _etype31 = 0;
        _rtmp332 = input.readListBegin();
        _etype31 = _rtmp332.etype;
        _size28 = _rtmp332.size;
        for (var _i33 = 0; _i33 < _size28; ++_i33)
        {
          var elem34 = null;
          elem34 = new ttypes.Flowlet();
          elem34.read(input);
          this.flowlets.push(elem34);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.MAP) {
        var _size35 = 0;
        var _rtmp339;
        this.connections = {};
        var _ktype36 = 0;
        var _vtype37 = 0;
        _rtmp339 = input.readMapBegin();
        _ktype36 = _rtmp339.ktype;
        _vtype37 = _rtmp339.vtype;
        _size35 = _rtmp339.size;
        for (var _i40 = 0; _i40 < _size35; ++_i40)
        {
          if (_i40 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key41 = null;
          var val42 = null;
          key41 = input.readString();
          var _size43 = 0;
          var _rtmp347;
          val42 = [];
          var _etype46 = 0;
          _rtmp347 = input.readListBegin();
          _etype46 = _rtmp347.etype;
          _size43 = _rtmp347.size;
          for (var _i48 = 0; _i48 < _size43; ++_i48)
          {
            var elem49 = null;
            elem49 = input.readString();
            val42.push(elem49);
          }
          input.readListEnd();
          this.connections[key41] = val42;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Flow.prototype.write = function(output) {
  output.writeStructBegin('Flow');
  if (this.id) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.username) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 3);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.ns) {
    output.writeFieldBegin('ns', Thrift.Type.STRING, 4);
    output.writeString(this.ns);
    output.writeFieldEnd();
  }
  if (this.status) {
    output.writeFieldBegin('status', Thrift.Type.STRING, 5);
    output.writeString(this.status);
    output.writeFieldEnd();
  }
  if (this.runs) {
    output.writeFieldBegin('runs', Thrift.Type.I32, 6);
    output.writeI32(this.runs);
    output.writeFieldEnd();
  }
  if (this.flowlets) {
    output.writeFieldBegin('flowlets', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.flowlets.length);
    for (var iter50 in this.flowlets)
    {
      if (this.flowlets.hasOwnProperty(iter50))
      {
        iter50 = this.flowlets[iter50];
        iter50.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.connections) {
    output.writeFieldBegin('connections', Thrift.Type.MAP, 8);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.connections));
    for (var kiter51 in this.connections)
    {
      if (this.connections.hasOwnProperty(kiter51))
      {
        var viter52 = this.connections[kiter51];
        output.writeString(kiter51);
        output.writeListBegin(Thrift.Type.STRING, viter52.length);
        for (var iter53 in viter52)
        {
          if (viter52.hasOwnProperty(iter53))
          {
            iter53 = viter52[iter53];
            output.writeString(iter53);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FlowEvent = module.exports.FlowEvent = function(args) {
  this.type = null;
  this.result = null;
  this.username = null;
  this.timestamp = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
  }
};
FlowEvent.prototype = {};
FlowEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.result = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.timestamp = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FlowEvent.prototype.write = function(output) {
  output.writeStructBegin('FlowEvent');
  if (this.type) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 1);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.result) {
    output.writeFieldBegin('result', Thrift.Type.STRING, 2);
    output.writeString(this.result);
    output.writeFieldEnd();
  }
  if (this.username) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 3);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.timestamp) {
    output.writeFieldBegin('timestamp', Thrift.Type.I32, 4);
    output.writeI32(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FlowletStatus = module.exports.FlowletStatus = function(args) {
  this.id = null;
  this.status = null;
  this.tuples = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.tuples !== undefined) {
      this.tuples = args.tuples;
    }
  }
};
FlowletStatus.prototype = {};
FlowletStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.status = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size54 = 0;
        var _rtmp358;
        this.tuples = {};
        var _ktype55 = 0;
        var _vtype56 = 0;
        _rtmp358 = input.readMapBegin();
        _ktype55 = _rtmp358.ktype;
        _vtype56 = _rtmp358.vtype;
        _size54 = _rtmp358.size;
        for (var _i59 = 0; _i59 < _size54; ++_i59)
        {
          if (_i59 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key60 = null;
          var val61 = null;
          key60 = input.readString();
          val61 = input.readI32();
          this.tuples[key60] = val61;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FlowletStatus.prototype.write = function(output) {
  output.writeStructBegin('FlowletStatus');
  if (this.id) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.status) {
    output.writeFieldBegin('status', Thrift.Type.STRING, 2);
    output.writeString(this.status);
    output.writeFieldEnd();
  }
  if (this.tuples) {
    output.writeFieldBegin('tuples', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(this.tuples));
    for (var kiter62 in this.tuples)
    {
      if (this.tuples.hasOwnProperty(kiter62))
      {
        var viter63 = this.tuples[kiter62];
        output.writeString(kiter62);
        output.writeI32(viter63);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FlowStatus = module.exports.FlowStatus = function(args) {
  this.id = null;
  this.status = null;
  this.started = null;
  this.stopped = null;
  this.runs = null;
  this.flowlets = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.started !== undefined) {
      this.started = args.started;
    }
    if (args.stopped !== undefined) {
      this.stopped = args.stopped;
    }
    if (args.runs !== undefined) {
      this.runs = args.runs;
    }
    if (args.flowlets !== undefined) {
      this.flowlets = args.flowlets;
    }
  }
};
FlowStatus.prototype = {};
FlowStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.status = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.started = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.stopped = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.runs = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.flowlets = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new ttypes.FlowletStatus();
          elem70.read(input);
          this.flowlets.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FlowStatus.prototype.write = function(output) {
  output.writeStructBegin('FlowStatus');
  if (this.id) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.status) {
    output.writeFieldBegin('status', Thrift.Type.STRING, 2);
    output.writeString(this.status);
    output.writeFieldEnd();
  }
  if (this.started) {
    output.writeFieldBegin('started', Thrift.Type.I32, 3);
    output.writeI32(this.started);
    output.writeFieldEnd();
  }
  if (this.stopped) {
    output.writeFieldBegin('stopped', Thrift.Type.I32, 4);
    output.writeI32(this.stopped);
    output.writeFieldEnd();
  }
  if (this.runs) {
    output.writeFieldBegin('runs', Thrift.Type.I32, 5);
    output.writeI32(this.runs);
    output.writeFieldEnd();
  }
  if (this.flowlets) {
    output.writeFieldBegin('flowlets', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.flowlets.length);
    for (var iter71 in this.flowlets)
    {
      if (this.flowlets.hasOwnProperty(iter71))
      {
        iter71 = this.flowlets[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

