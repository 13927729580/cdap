//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./engine_types');
//HELPER FUNCTIONS AND STRUCTURES

var MonitorService_ping_args = function(args) {
};
MonitorService_ping_args.prototype = {};
MonitorService_ping_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MonitorService_ping_args.prototype.write = function(output) {
  output.writeStructBegin('MonitorService_ping_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MonitorService_ping_result = function(args) {
};
MonitorService_ping_result.prototype = {};
MonitorService_ping_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MonitorService_ping_result.prototype.write = function(output) {
  output.writeStructBegin('MonitorService_ping_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MonitorService_getFlowStatus_args = function(args) {
  this.ns = null;
  this.name = null;
  if (args) {
    if (args.ns !== undefined) {
      this.ns = args.ns;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
MonitorService_getFlowStatus_args.prototype = {};
MonitorService_getFlowStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ns = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MonitorService_getFlowStatus_args.prototype.write = function(output) {
  output.writeStructBegin('MonitorService_getFlowStatus_args');
  if (this.ns) {
    output.writeFieldBegin('ns', Thrift.Type.STRING, 1);
    output.writeString(this.ns);
    output.writeFieldEnd();
  }
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MonitorService_getFlowStatus_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
MonitorService_getFlowStatus_result.prototype = {};
MonitorService_getFlowStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.FlowStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MonitorService_getFlowStatus_result.prototype.write = function(output) {
  output.writeStructBegin('MonitorService_getFlowStatus_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MonitorService_subcribe_args = function(args) {
  this.ns = null;
  this.name = null;
  this.endpoint = null;
  if (args) {
    if (args.ns !== undefined) {
      this.ns = args.ns;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.endpoint !== undefined) {
      this.endpoint = args.endpoint;
    }
  }
};
MonitorService_subcribe_args.prototype = {};
MonitorService_subcribe_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ns = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.endpoint = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MonitorService_subcribe_args.prototype.write = function(output) {
  output.writeStructBegin('MonitorService_subcribe_args');
  if (this.ns) {
    output.writeFieldBegin('ns', Thrift.Type.STRING, 1);
    output.writeString(this.ns);
    output.writeFieldEnd();
  }
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.endpoint) {
    output.writeFieldBegin('endpoint', Thrift.Type.STRING, 3);
    output.writeString(this.endpoint);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MonitorService_subcribe_result = function(args) {
  this.success = null;
  this.e = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MonitorService_subcribe_result.prototype = {};
MonitorService_subcribe_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.InvalidOperation();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MonitorService_subcribe_result.prototype.write = function(output) {
  output.writeStructBegin('MonitorService_subcribe_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MonitorService_unsubscribe_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
MonitorService_unsubscribe_args.prototype = {};
MonitorService_unsubscribe_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MonitorService_unsubscribe_args.prototype.write = function(output) {
  output.writeStructBegin('MonitorService_unsubscribe_args');
  if (this.id) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MonitorService_unsubscribe_result = function(args) {
  this.success = null;
  this.e = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MonitorService_unsubscribe_result.prototype = {};
MonitorService_unsubscribe_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.InvalidOperation();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MonitorService_unsubscribe_result.prototype.write = function(output) {
  output.writeStructBegin('MonitorService_unsubscribe_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MonitorServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
MonitorServiceClient.prototype = {};
MonitorServiceClient.prototype.ping = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_ping();
};

MonitorServiceClient.prototype.send_ping = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid);
  var args = new MonitorService_ping_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MonitorServiceClient.prototype.recv_ping = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MonitorService_ping_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
MonitorServiceClient.prototype.getFlowStatus = function(ns, name, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getFlowStatus(ns, name);
};

MonitorServiceClient.prototype.send_getFlowStatus = function(ns, name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFlowStatus', Thrift.MessageType.CALL, this.seqid);
  var args = new MonitorService_getFlowStatus_args();
  args.ns = ns;
  args.name = name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MonitorServiceClient.prototype.recv_getFlowStatus = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MonitorService_getFlowStatus_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFlowStatus failed: unknown result');
};
MonitorServiceClient.prototype.subcribe = function(ns, name, endpoint, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_subcribe(ns, name, endpoint);
};

MonitorServiceClient.prototype.send_subcribe = function(ns, name, endpoint) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('subcribe', Thrift.MessageType.CALL, this.seqid);
  var args = new MonitorService_subcribe_args();
  args.ns = ns;
  args.name = name;
  args.endpoint = endpoint;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MonitorServiceClient.prototype.recv_subcribe = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MonitorService_subcribe_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('subcribe failed: unknown result');
};
MonitorServiceClient.prototype.unsubscribe = function(id, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_unsubscribe(id);
};

MonitorServiceClient.prototype.send_unsubscribe = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('unsubscribe', Thrift.MessageType.CALL, this.seqid);
  var args = new MonitorService_unsubscribe_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MonitorServiceClient.prototype.recv_unsubscribe = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MonitorService_unsubscribe_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('unsubscribe failed: unknown result');
};
var MonitorServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
MonitorServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

MonitorServiceProcessor.prototype.process_ping = function(seqid, input, output) {
  var args = new MonitorService_ping_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MonitorService_ping_result();
  this._handler.ping(function (success) {
    result.success = success;
    output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MonitorServiceProcessor.prototype.process_getFlowStatus = function(seqid, input, output) {
  var args = new MonitorService_getFlowStatus_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MonitorService_getFlowStatus_result();
  this._handler.getFlowStatus(args.ns, args.name, function (success) {
    result.success = success;
    output.writeMessageBegin("getFlowStatus", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MonitorServiceProcessor.prototype.process_subcribe = function(seqid, input, output) {
  var args = new MonitorService_subcribe_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MonitorService_subcribe_result();
  this._handler.subcribe(args.ns, args.name, args.endpoint, function (success) {
    result.success = success;
    output.writeMessageBegin("subcribe", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MonitorServiceProcessor.prototype.process_unsubscribe = function(seqid, input, output) {
  var args = new MonitorService_unsubscribe_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MonitorService_unsubscribe_result();
  this._handler.unsubscribe(args.id, function (success) {
    result.success = success;
    output.writeMessageBegin("unsubscribe", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

