//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./engine_types');
//HELPER FUNCTIONS AND STRUCTURES

var ManagerService_ping_args = function(args) {
};
ManagerService_ping_args.prototype = {};
ManagerService_ping_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerService_ping_args.prototype.write = function(output) {
  output.writeStructBegin('ManagerService_ping_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagerService_ping_result = function(args) {
};
ManagerService_ping_result.prototype = {};
ManagerService_ping_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerService_ping_result.prototype.write = function(output) {
  output.writeStructBegin('ManagerService_ping_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagerService_getFlows_args = function(args) {
  this.ns = null;
  this.offset = null;
  this.limit = null;
  if (args) {
    if (args.ns !== undefined) {
      this.ns = args.ns;
    }
    if (args.offset !== undefined) {
      this.offset = args.offset;
    }
    if (args.limit !== undefined) {
      this.limit = args.limit;
    }
  }
};
ManagerService_getFlows_args.prototype = {};
ManagerService_getFlows_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ns = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerService_getFlows_args.prototype.write = function(output) {
  output.writeStructBegin('ManagerService_getFlows_args');
  if (this.ns) {
    output.writeFieldBegin('ns', Thrift.Type.STRING, 1);
    output.writeString(this.ns);
    output.writeFieldEnd();
  }
  if (this.offset) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 2);
    output.writeI32(this.offset);
    output.writeFieldEnd();
  }
  if (this.limit) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 3);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagerService_getFlows_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ManagerService_getFlows_result.prototype = {};
ManagerService_getFlows_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.success = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = new ttypes.Flow();
          elem78.read(input);
          this.success.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerService_getFlows_result.prototype.write = function(output) {
  output.writeStructBegin('ManagerService_getFlows_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter79 in this.success)
    {
      if (this.success.hasOwnProperty(iter79))
      {
        iter79 = this.success[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagerService_getFlow_args = function(args) {
  this.ns = null;
  this.name = null;
  if (args) {
    if (args.ns !== undefined) {
      this.ns = args.ns;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
ManagerService_getFlow_args.prototype = {};
ManagerService_getFlow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ns = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerService_getFlow_args.prototype.write = function(output) {
  output.writeStructBegin('ManagerService_getFlow_args');
  if (this.ns) {
    output.writeFieldBegin('ns', Thrift.Type.STRING, 1);
    output.writeString(this.ns);
    output.writeFieldEnd();
  }
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagerService_getFlow_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ManagerService_getFlow_result.prototype = {};
ManagerService_getFlow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Flow();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerService_getFlow_result.prototype.write = function(output) {
  output.writeStructBegin('ManagerService_getFlow_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagerService_start_args = function(args) {
  this.ns = null;
  this.name = null;
  if (args) {
    if (args.ns !== undefined) {
      this.ns = args.ns;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
ManagerService_start_args.prototype = {};
ManagerService_start_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ns = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerService_start_args.prototype.write = function(output) {
  output.writeStructBegin('ManagerService_start_args');
  if (this.ns) {
    output.writeFieldBegin('ns', Thrift.Type.STRING, 1);
    output.writeString(this.ns);
    output.writeFieldEnd();
  }
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagerService_start_result = function(args) {
  this.success = null;
  this.e = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
ManagerService_start_result.prototype = {};
ManagerService_start_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.InvalidOperation();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerService_start_result.prototype.write = function(output) {
  output.writeStructBegin('ManagerService_start_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagerService_stop_args = function(args) {
  this.ns = null;
  this.name = null;
  if (args) {
    if (args.ns !== undefined) {
      this.ns = args.ns;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
ManagerService_stop_args.prototype = {};
ManagerService_stop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ns = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerService_stop_args.prototype.write = function(output) {
  output.writeStructBegin('ManagerService_stop_args');
  if (this.ns) {
    output.writeFieldBegin('ns', Thrift.Type.STRING, 1);
    output.writeString(this.ns);
    output.writeFieldEnd();
  }
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagerService_stop_result = function(args) {
  this.success = null;
  this.e = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
ManagerService_stop_result.prototype = {};
ManagerService_stop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.InvalidOperation();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerService_stop_result.prototype.write = function(output) {
  output.writeStructBegin('ManagerService_stop_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagerService_getActionLog_args = function(args) {
  this.ns = null;
  this.name = null;
  if (args) {
    if (args.ns !== undefined) {
      this.ns = args.ns;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
ManagerService_getActionLog_args.prototype = {};
ManagerService_getActionLog_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ns = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerService_getActionLog_args.prototype.write = function(output) {
  output.writeStructBegin('ManagerService_getActionLog_args');
  if (this.ns) {
    output.writeFieldBegin('ns', Thrift.Type.STRING, 1);
    output.writeString(this.ns);
    output.writeFieldEnd();
  }
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagerService_getActionLog_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ManagerService_getActionLog_result.prototype = {};
ManagerService_getActionLog_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.success = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = new ttypes.FlowEvent();
          elem86.read(input);
          this.success.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ManagerService_getActionLog_result.prototype.write = function(output) {
  output.writeStructBegin('ManagerService_getActionLog_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter87 in this.success)
    {
      if (this.success.hasOwnProperty(iter87))
      {
        iter87 = this.success[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ManagerServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
ManagerServiceClient.prototype = {};
ManagerServiceClient.prototype.ping = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_ping();
};

ManagerServiceClient.prototype.send_ping = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid);
  var args = new ManagerService_ping_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagerServiceClient.prototype.recv_ping = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagerService_ping_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
ManagerServiceClient.prototype.getFlows = function(ns, offset, limit, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getFlows(ns, offset, limit);
};

ManagerServiceClient.prototype.send_getFlows = function(ns, offset, limit) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFlows', Thrift.MessageType.CALL, this.seqid);
  var args = new ManagerService_getFlows_args();
  args.ns = ns;
  args.offset = offset;
  args.limit = limit;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagerServiceClient.prototype.recv_getFlows = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagerService_getFlows_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFlows failed: unknown result');
};
ManagerServiceClient.prototype.getFlow = function(ns, name, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getFlow(ns, name);
};

ManagerServiceClient.prototype.send_getFlow = function(ns, name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getFlow', Thrift.MessageType.CALL, this.seqid);
  var args = new ManagerService_getFlow_args();
  args.ns = ns;
  args.name = name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagerServiceClient.prototype.recv_getFlow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagerService_getFlow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getFlow failed: unknown result');
};
ManagerServiceClient.prototype.start = function(ns, name, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_start(ns, name);
};

ManagerServiceClient.prototype.send_start = function(ns, name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('start', Thrift.MessageType.CALL, this.seqid);
  var args = new ManagerService_start_args();
  args.ns = ns;
  args.name = name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagerServiceClient.prototype.recv_start = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagerService_start_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('start failed: unknown result');
};
ManagerServiceClient.prototype.stop = function(ns, name, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_stop(ns, name);
};

ManagerServiceClient.prototype.send_stop = function(ns, name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('stop', Thrift.MessageType.CALL, this.seqid);
  var args = new ManagerService_stop_args();
  args.ns = ns;
  args.name = name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagerServiceClient.prototype.recv_stop = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagerService_stop_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('stop failed: unknown result');
};
ManagerServiceClient.prototype.getActionLog = function(ns, name, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getActionLog(ns, name);
};

ManagerServiceClient.prototype.send_getActionLog = function(ns, name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getActionLog', Thrift.MessageType.CALL, this.seqid);
  var args = new ManagerService_getActionLog_args();
  args.ns = ns;
  args.name = name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ManagerServiceClient.prototype.recv_getActionLog = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ManagerService_getActionLog_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getActionLog failed: unknown result');
};
var ManagerServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
ManagerServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

ManagerServiceProcessor.prototype.process_ping = function(seqid, input, output) {
  var args = new ManagerService_ping_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ManagerService_ping_result();
  this._handler.ping(function (success) {
    result.success = success;
    output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ManagerServiceProcessor.prototype.process_getFlows = function(seqid, input, output) {
  var args = new ManagerService_getFlows_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ManagerService_getFlows_result();
  this._handler.getFlows(args.ns, args.offset, args.limit, function (success) {
    result.success = success;
    output.writeMessageBegin("getFlows", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ManagerServiceProcessor.prototype.process_getFlow = function(seqid, input, output) {
  var args = new ManagerService_getFlow_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ManagerService_getFlow_result();
  this._handler.getFlow(args.ns, args.name, function (success) {
    result.success = success;
    output.writeMessageBegin("getFlow", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ManagerServiceProcessor.prototype.process_start = function(seqid, input, output) {
  var args = new ManagerService_start_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ManagerService_start_result();
  this._handler.start(args.ns, args.name, function (success) {
    result.success = success;
    output.writeMessageBegin("start", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ManagerServiceProcessor.prototype.process_stop = function(seqid, input, output) {
  var args = new ManagerService_stop_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ManagerService_stop_result();
  this._handler.stop(args.ns, args.name, function (success) {
    result.success = success;
    output.writeMessageBegin("stop", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ManagerServiceProcessor.prototype.process_getActionLog = function(seqid, input, output) {
  var args = new ManagerService_getActionLog_args();
  args.read(input);
  input.readMessageEnd();
  var result = new ManagerService_getActionLog_result();
  this._handler.getActionLog(args.ns, args.name, function (success) {
    result.success = success;
    output.writeMessageBegin("getActionLog", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

