//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./metadataservice_types');
//HELPER FUNCTIONS AND STRUCTURES

var MetadataService_createStream_args = function(args) {
  this.account = null;
  this.stream = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.stream !== undefined) {
      this.stream = args.stream;
    }
  }
};
MetadataService_createStream_args.prototype = {};
MetadataService_createStream_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.stream = new ttypes.Stream();
        this.stream.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_createStream_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_createStream_args');
  if (this.account) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.stream) {
    output.writeFieldBegin('stream', Thrift.Type.STRUCT, 2);
    this.stream.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetadataService_createStream_result = function(args) {
  this.success = null;
  this.e = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_createStream_result.prototype = {};
MetadataService_createStream_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_createStream_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_createStream_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetadataService_deleteStream_args = function(args) {
  this.account = null;
  this.stream = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.stream !== undefined) {
      this.stream = args.stream;
    }
  }
};
MetadataService_deleteStream_args.prototype = {};
MetadataService_deleteStream_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.stream = new ttypes.Stream();
        this.stream.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_deleteStream_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_deleteStream_args');
  if (this.account) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.stream) {
    output.writeFieldBegin('stream', Thrift.Type.STRUCT, 2);
    this.stream.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetadataService_deleteStream_result = function(args) {
  this.success = null;
  this.e = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_deleteStream_result.prototype = {};
MetadataService_deleteStream_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_deleteStream_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_deleteStream_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetadataService_getStreams_args = function(args) {
  this.account = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
  }
};
MetadataService_getStreams_args.prototype = {};
MetadataService_getStreams_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getStreams_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getStreams_args');
  if (this.account) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetadataService_getStreams_result = function(args) {
  this.success = null;
  this.e = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_getStreams_result.prototype = {};
MetadataService_getStreams_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.success = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Stream();
          elem6.read(input);
          this.success.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getStreams_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getStreams_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter7 in this.success)
    {
      if (this.success.hasOwnProperty(iter7))
      {
        iter7 = this.success[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetadataService_getStream_args = function(args) {
  this.account = null;
  this.stream = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.stream !== undefined) {
      this.stream = args.stream;
    }
  }
};
MetadataService_getStream_args.prototype = {};
MetadataService_getStream_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.stream = new ttypes.Stream();
        this.stream.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getStream_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getStream_args');
  if (this.account) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.stream) {
    output.writeFieldBegin('stream', Thrift.Type.STRUCT, 2);
    this.stream.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetadataService_getStream_result = function(args) {
  this.success = null;
  this.e = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_getStream_result.prototype = {};
MetadataService_getStream_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Stream();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getStream_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getStream_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetadataService_createDataset_args = function(args) {
  this.account = null;
  this.dataset = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.dataset !== undefined) {
      this.dataset = args.dataset;
    }
  }
};
MetadataService_createDataset_args.prototype = {};
MetadataService_createDataset_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.dataset = new ttypes.Dataset();
        this.dataset.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_createDataset_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_createDataset_args');
  if (this.account) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.dataset) {
    output.writeFieldBegin('dataset', Thrift.Type.STRUCT, 2);
    this.dataset.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetadataService_createDataset_result = function(args) {
  this.success = null;
  this.e = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_createDataset_result.prototype = {};
MetadataService_createDataset_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_createDataset_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_createDataset_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetadataService_deleteDataset_args = function(args) {
  this.account = null;
  this.dataset = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.dataset !== undefined) {
      this.dataset = args.dataset;
    }
  }
};
MetadataService_deleteDataset_args.prototype = {};
MetadataService_deleteDataset_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.dataset = new ttypes.Dataset();
        this.dataset.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_deleteDataset_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_deleteDataset_args');
  if (this.account) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.dataset) {
    output.writeFieldBegin('dataset', Thrift.Type.STRUCT, 2);
    this.dataset.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetadataService_deleteDataset_result = function(args) {
  this.success = null;
  this.e = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_deleteDataset_result.prototype = {};
MetadataService_deleteDataset_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_deleteDataset_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_deleteDataset_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetadataService_getDatasets_args = function(args) {
  this.account = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
  }
};
MetadataService_getDatasets_args.prototype = {};
MetadataService_getDatasets_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getDatasets_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getDatasets_args');
  if (this.account) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetadataService_getDatasets_result = function(args) {
  this.success = null;
  this.e = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_getDatasets_result.prototype = {};
MetadataService_getDatasets_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.success = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.Dataset();
          elem14.read(input);
          this.success.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getDatasets_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getDatasets_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter15 in this.success)
    {
      if (this.success.hasOwnProperty(iter15))
      {
        iter15 = this.success[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetadataService_getDataset_args = function(args) {
  this.account = null;
  this.dataset = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.dataset !== undefined) {
      this.dataset = args.dataset;
    }
  }
};
MetadataService_getDataset_args.prototype = {};
MetadataService_getDataset_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.dataset = new ttypes.Dataset();
        this.dataset.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getDataset_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getDataset_args');
  if (this.account) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.dataset) {
    output.writeFieldBegin('dataset', Thrift.Type.STRUCT, 2);
    this.dataset.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetadataService_getDataset_result = function(args) {
  this.success = null;
  this.e = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_getDataset_result.prototype = {};
MetadataService_getDataset_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Dataset();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getDataset_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getDataset_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetadataService_createApplication_args = function(args) {
  this.account = null;
  this.application = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.application !== undefined) {
      this.application = args.application;
    }
  }
};
MetadataService_createApplication_args.prototype = {};
MetadataService_createApplication_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.application = new ttypes.Application();
        this.application.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_createApplication_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_createApplication_args');
  if (this.account) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.application) {
    output.writeFieldBegin('application', Thrift.Type.STRUCT, 2);
    this.application.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetadataService_createApplication_result = function(args) {
  this.success = null;
  this.e = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_createApplication_result.prototype = {};
MetadataService_createApplication_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_createApplication_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_createApplication_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetadataService_deleteApplication_args = function(args) {
  this.account = null;
  this.application = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.application !== undefined) {
      this.application = args.application;
    }
  }
};
MetadataService_deleteApplication_args.prototype = {};
MetadataService_deleteApplication_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.application = new ttypes.Application();
        this.application.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_deleteApplication_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_deleteApplication_args');
  if (this.account) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.application) {
    output.writeFieldBegin('application', Thrift.Type.STRUCT, 2);
    this.application.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetadataService_deleteApplication_result = function(args) {
  this.success = null;
  this.e = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_deleteApplication_result.prototype = {};
MetadataService_deleteApplication_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_deleteApplication_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_deleteApplication_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetadataService_getApplications_args = function(args) {
  this.account = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
  }
};
MetadataService_getApplications_args.prototype = {};
MetadataService_getApplications_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getApplications_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getApplications_args');
  if (this.account) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetadataService_getApplications_result = function(args) {
  this.success = null;
  this.e = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_getApplications_result.prototype = {};
MetadataService_getApplications_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.success = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.Application();
          elem22.read(input);
          this.success.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getApplications_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getApplications_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter23 in this.success)
    {
      if (this.success.hasOwnProperty(iter23))
      {
        iter23 = this.success[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetadataService_getApplication_args = function(args) {
  this.account = null;
  this.application = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.application !== undefined) {
      this.application = args.application;
    }
  }
};
MetadataService_getApplication_args.prototype = {};
MetadataService_getApplication_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.application = new ttypes.Application();
        this.application.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getApplication_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getApplication_args');
  if (this.account) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.application) {
    output.writeFieldBegin('application', Thrift.Type.STRUCT, 2);
    this.application.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetadataService_getApplication_result = function(args) {
  this.success = null;
  this.e = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_getApplication_result.prototype = {};
MetadataService_getApplication_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Application();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getApplication_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getApplication_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetadataService_createQuery_args = function(args) {
  this.account = null;
  this.query = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.query !== undefined) {
      this.query = args.query;
    }
  }
};
MetadataService_createQuery_args.prototype = {};
MetadataService_createQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new ttypes.Query();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_createQuery_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_createQuery_args');
  if (this.account) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.query) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 2);
    this.query.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetadataService_createQuery_result = function(args) {
  this.success = null;
  this.e = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_createQuery_result.prototype = {};
MetadataService_createQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_createQuery_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_createQuery_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetadataService_deleteQuery_args = function(args) {
  this.account = null;
  this.query = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.query !== undefined) {
      this.query = args.query;
    }
  }
};
MetadataService_deleteQuery_args.prototype = {};
MetadataService_deleteQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new ttypes.Query();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_deleteQuery_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_deleteQuery_args');
  if (this.account) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.query) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 2);
    this.query.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetadataService_deleteQuery_result = function(args) {
  this.success = null;
  this.e = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_deleteQuery_result.prototype = {};
MetadataService_deleteQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_deleteQuery_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_deleteQuery_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetadataService_getQueries_args = function(args) {
  this.account = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
  }
};
MetadataService_getQueries_args.prototype = {};
MetadataService_getQueries_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getQueries_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getQueries_args');
  if (this.account) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetadataService_getQueries_result = function(args) {
  this.success = null;
  this.e = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_getQueries_result.prototype = {};
MetadataService_getQueries_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.success = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.Query();
          elem30.read(input);
          this.success.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getQueries_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getQueries_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter31 in this.success)
    {
      if (this.success.hasOwnProperty(iter31))
      {
        iter31 = this.success[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetadataService_getQuery_args = function(args) {
  this.account = null;
  this.query = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
    if (args.query !== undefined) {
      this.query = args.query;
    }
  }
};
MetadataService_getQuery_args.prototype = {};
MetadataService_getQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new ttypes.Account();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new ttypes.Query();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getQuery_args.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getQuery_args');
  if (this.account) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  if (this.query) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 2);
    this.query.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetadataService_getQuery_result = function(args) {
  this.success = null;
  this.e = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
MetadataService_getQuery_result.prototype = {};
MetadataService_getQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Query();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.MetadataServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetadataService_getQuery_result.prototype.write = function(output) {
  output.writeStructBegin('MetadataService_getQuery_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetadataServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
MetadataServiceClient.prototype = {};
MetadataServiceClient.prototype.createStream = function(account, stream, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_createStream(account, stream);
};

MetadataServiceClient.prototype.send_createStream = function(account, stream) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createStream', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_createStream_args();
  args.account = account;
  args.stream = stream;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_createStream = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_createStream_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createStream failed: unknown result');
};
MetadataServiceClient.prototype.deleteStream = function(account, stream, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deleteStream(account, stream);
};

MetadataServiceClient.prototype.send_deleteStream = function(account, stream) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteStream', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_deleteStream_args();
  args.account = account;
  args.stream = stream;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_deleteStream = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_deleteStream_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteStream failed: unknown result');
};
MetadataServiceClient.prototype.getStreams = function(account, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getStreams(account);
};

MetadataServiceClient.prototype.send_getStreams = function(account) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getStreams', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_getStreams_args();
  args.account = account;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_getStreams = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_getStreams_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getStreams failed: unknown result');
};
MetadataServiceClient.prototype.getStream = function(account, stream, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getStream(account, stream);
};

MetadataServiceClient.prototype.send_getStream = function(account, stream) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getStream', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_getStream_args();
  args.account = account;
  args.stream = stream;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_getStream = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_getStream_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getStream failed: unknown result');
};
MetadataServiceClient.prototype.createDataset = function(account, dataset, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_createDataset(account, dataset);
};

MetadataServiceClient.prototype.send_createDataset = function(account, dataset) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createDataset', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_createDataset_args();
  args.account = account;
  args.dataset = dataset;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_createDataset = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_createDataset_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createDataset failed: unknown result');
};
MetadataServiceClient.prototype.deleteDataset = function(account, dataset, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deleteDataset(account, dataset);
};

MetadataServiceClient.prototype.send_deleteDataset = function(account, dataset) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteDataset', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_deleteDataset_args();
  args.account = account;
  args.dataset = dataset;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_deleteDataset = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_deleteDataset_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteDataset failed: unknown result');
};
MetadataServiceClient.prototype.getDatasets = function(account, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getDatasets(account);
};

MetadataServiceClient.prototype.send_getDatasets = function(account) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDatasets', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_getDatasets_args();
  args.account = account;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_getDatasets = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_getDatasets_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDatasets failed: unknown result');
};
MetadataServiceClient.prototype.getDataset = function(account, dataset, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getDataset(account, dataset);
};

MetadataServiceClient.prototype.send_getDataset = function(account, dataset) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDataset', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_getDataset_args();
  args.account = account;
  args.dataset = dataset;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_getDataset = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_getDataset_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDataset failed: unknown result');
};
MetadataServiceClient.prototype.createApplication = function(account, application, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_createApplication(account, application);
};

MetadataServiceClient.prototype.send_createApplication = function(account, application) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createApplication', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_createApplication_args();
  args.account = account;
  args.application = application;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_createApplication = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_createApplication_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createApplication failed: unknown result');
};
MetadataServiceClient.prototype.deleteApplication = function(account, application, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deleteApplication(account, application);
};

MetadataServiceClient.prototype.send_deleteApplication = function(account, application) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteApplication', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_deleteApplication_args();
  args.account = account;
  args.application = application;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_deleteApplication = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_deleteApplication_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteApplication failed: unknown result');
};
MetadataServiceClient.prototype.getApplications = function(account, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getApplications(account);
};

MetadataServiceClient.prototype.send_getApplications = function(account) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getApplications', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_getApplications_args();
  args.account = account;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_getApplications = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_getApplications_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getApplications failed: unknown result');
};
MetadataServiceClient.prototype.getApplication = function(account, application, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getApplication(account, application);
};

MetadataServiceClient.prototype.send_getApplication = function(account, application) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getApplication', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_getApplication_args();
  args.account = account;
  args.application = application;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_getApplication = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_getApplication_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getApplication failed: unknown result');
};
MetadataServiceClient.prototype.createQuery = function(account, query, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_createQuery(account, query);
};

MetadataServiceClient.prototype.send_createQuery = function(account, query) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createQuery', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_createQuery_args();
  args.account = account;
  args.query = query;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_createQuery = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_createQuery_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createQuery failed: unknown result');
};
MetadataServiceClient.prototype.deleteQuery = function(account, query, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deleteQuery(account, query);
};

MetadataServiceClient.prototype.send_deleteQuery = function(account, query) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteQuery', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_deleteQuery_args();
  args.account = account;
  args.query = query;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_deleteQuery = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_deleteQuery_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteQuery failed: unknown result');
};
MetadataServiceClient.prototype.getQueries = function(account, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getQueries(account);
};

MetadataServiceClient.prototype.send_getQueries = function(account) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getQueries', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_getQueries_args();
  args.account = account;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_getQueries = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_getQueries_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getQueries failed: unknown result');
};
MetadataServiceClient.prototype.getQuery = function(account, query, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getQuery(account, query);
};

MetadataServiceClient.prototype.send_getQuery = function(account, query) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getQuery', Thrift.MessageType.CALL, this.seqid);
  var args = new MetadataService_getQuery_args();
  args.account = account;
  args.query = query;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MetadataServiceClient.prototype.recv_getQuery = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MetadataService_getQuery_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getQuery failed: unknown result');
};
var MetadataServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
MetadataServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

MetadataServiceProcessor.prototype.process_createStream = function(seqid, input, output) {
  var args = new MetadataService_createStream_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MetadataService_createStream_result();
  this._handler.createStream(args.account, args.stream, function (success) {
    result.success = success;
    output.writeMessageBegin("createStream", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_deleteStream = function(seqid, input, output) {
  var args = new MetadataService_deleteStream_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MetadataService_deleteStream_result();
  this._handler.deleteStream(args.account, args.stream, function (success) {
    result.success = success;
    output.writeMessageBegin("deleteStream", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_getStreams = function(seqid, input, output) {
  var args = new MetadataService_getStreams_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MetadataService_getStreams_result();
  this._handler.getStreams(args.account, function (success) {
    result.success = success;
    output.writeMessageBegin("getStreams", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_getStream = function(seqid, input, output) {
  var args = new MetadataService_getStream_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MetadataService_getStream_result();
  this._handler.getStream(args.account, args.stream, function (success) {
    result.success = success;
    output.writeMessageBegin("getStream", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_createDataset = function(seqid, input, output) {
  var args = new MetadataService_createDataset_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MetadataService_createDataset_result();
  this._handler.createDataset(args.account, args.dataset, function (success) {
    result.success = success;
    output.writeMessageBegin("createDataset", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_deleteDataset = function(seqid, input, output) {
  var args = new MetadataService_deleteDataset_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MetadataService_deleteDataset_result();
  this._handler.deleteDataset(args.account, args.dataset, function (success) {
    result.success = success;
    output.writeMessageBegin("deleteDataset", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_getDatasets = function(seqid, input, output) {
  var args = new MetadataService_getDatasets_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MetadataService_getDatasets_result();
  this._handler.getDatasets(args.account, function (success) {
    result.success = success;
    output.writeMessageBegin("getDatasets", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_getDataset = function(seqid, input, output) {
  var args = new MetadataService_getDataset_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MetadataService_getDataset_result();
  this._handler.getDataset(args.account, args.dataset, function (success) {
    result.success = success;
    output.writeMessageBegin("getDataset", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_createApplication = function(seqid, input, output) {
  var args = new MetadataService_createApplication_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MetadataService_createApplication_result();
  this._handler.createApplication(args.account, args.application, function (success) {
    result.success = success;
    output.writeMessageBegin("createApplication", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_deleteApplication = function(seqid, input, output) {
  var args = new MetadataService_deleteApplication_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MetadataService_deleteApplication_result();
  this._handler.deleteApplication(args.account, args.application, function (success) {
    result.success = success;
    output.writeMessageBegin("deleteApplication", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_getApplications = function(seqid, input, output) {
  var args = new MetadataService_getApplications_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MetadataService_getApplications_result();
  this._handler.getApplications(args.account, function (success) {
    result.success = success;
    output.writeMessageBegin("getApplications", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_getApplication = function(seqid, input, output) {
  var args = new MetadataService_getApplication_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MetadataService_getApplication_result();
  this._handler.getApplication(args.account, args.application, function (success) {
    result.success = success;
    output.writeMessageBegin("getApplication", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_createQuery = function(seqid, input, output) {
  var args = new MetadataService_createQuery_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MetadataService_createQuery_result();
  this._handler.createQuery(args.account, args.query, function (success) {
    result.success = success;
    output.writeMessageBegin("createQuery", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_deleteQuery = function(seqid, input, output) {
  var args = new MetadataService_deleteQuery_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MetadataService_deleteQuery_result();
  this._handler.deleteQuery(args.account, args.query, function (success) {
    result.success = success;
    output.writeMessageBegin("deleteQuery", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_getQueries = function(seqid, input, output) {
  var args = new MetadataService_getQueries_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MetadataService_getQueries_result();
  this._handler.getQueries(args.account, function (success) {
    result.success = success;
    output.writeMessageBegin("getQueries", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

MetadataServiceProcessor.prototype.process_getQuery = function(seqid, input, output) {
  var args = new MetadataService_getQuery_args();
  args.read(input);
  input.readMessageEnd();
  var result = new MetadataService_getQuery_result();
  this._handler.getQuery(args.account, args.query, function (success) {
    result.success = success;
    output.writeMessageBegin("getQuery", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

