//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./flowservices_types');
//HELPER FUNCTIONS AND STRUCTURES

var FlowService_start_args = function(args) {
  this.token = null;
  this.descriptor = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.descriptor !== undefined) {
      this.descriptor = args.descriptor;
    }
  }
};
FlowService_start_args.prototype = {};
FlowService_start_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.DelegationToken();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.descriptor = new ttypes.FlowDescriptor();
        this.descriptor.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FlowService_start_args.prototype.write = function(output) {
  output.writeStructBegin('FlowService_start_args');
  if (this.token) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  if (this.descriptor) {
    output.writeFieldBegin('descriptor', Thrift.Type.STRUCT, 2);
    this.descriptor.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FlowService_start_result = function(args) {
  this.success = null;
  this.e = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
FlowService_start_result.prototype = {};
FlowService_start_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.RunIdentifier();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.FlowServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FlowService_start_result.prototype.write = function(output) {
  output.writeStructBegin('FlowService_start_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FlowService_status_args = function(args) {
  this.token = null;
  this.identifier = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.identifier !== undefined) {
      this.identifier = args.identifier;
    }
  }
};
FlowService_status_args.prototype = {};
FlowService_status_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.DelegationToken();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.identifier = new ttypes.FlowIdentifier();
        this.identifier.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FlowService_status_args.prototype.write = function(output) {
  output.writeStructBegin('FlowService_status_args');
  if (this.token) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  if (this.identifier) {
    output.writeFieldBegin('identifier', Thrift.Type.STRUCT, 2);
    this.identifier.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FlowService_status_result = function(args) {
  this.success = null;
  this.e = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
FlowService_status_result.prototype = {};
FlowService_status_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.FlowStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.FlowServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FlowService_status_result.prototype.write = function(output) {
  output.writeStructBegin('FlowService_status_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FlowService_stop_args = function(args) {
  this.token = null;
  this.identifier = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.identifier !== undefined) {
      this.identifier = args.identifier;
    }
  }
};
FlowService_stop_args.prototype = {};
FlowService_stop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new ttypes.DelegationToken();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.identifier = new ttypes.FlowIdentifier();
        this.identifier.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FlowService_stop_args.prototype.write = function(output) {
  output.writeStructBegin('FlowService_stop_args');
  if (this.token) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 1);
    this.token.write(output);
    output.writeFieldEnd();
  }
  if (this.identifier) {
    output.writeFieldBegin('identifier', Thrift.Type.STRUCT, 2);
    this.identifier.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FlowService_stop_result = function(args) {
  this.success = null;
  this.e = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
FlowService_stop_result.prototype = {};
FlowService_stop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.RunIdentifier();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.FlowServiceException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FlowService_stop_result.prototype.write = function(output) {
  output.writeStructBegin('FlowService_stop_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FlowServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
FlowServiceClient.prototype = {};
FlowServiceClient.prototype.start = function(token, descriptor, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_start(token, descriptor);
};

FlowServiceClient.prototype.send_start = function(token, descriptor) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('start', Thrift.MessageType.CALL, this.seqid);
  var args = new FlowService_start_args();
  args.token = token;
  args.descriptor = descriptor;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FlowServiceClient.prototype.recv_start = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FlowService_start_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('start failed: unknown result');
};
FlowServiceClient.prototype.status = function(token, identifier, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_status(token, identifier);
};

FlowServiceClient.prototype.send_status = function(token, identifier) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('status', Thrift.MessageType.CALL, this.seqid);
  var args = new FlowService_status_args();
  args.token = token;
  args.identifier = identifier;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FlowServiceClient.prototype.recv_status = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FlowService_status_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('status failed: unknown result');
};
FlowServiceClient.prototype.stop = function(token, identifier, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_stop(token, identifier);
};

FlowServiceClient.prototype.send_stop = function(token, identifier) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('stop', Thrift.MessageType.CALL, this.seqid);
  var args = new FlowService_stop_args();
  args.token = token;
  args.identifier = identifier;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FlowServiceClient.prototype.recv_stop = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FlowService_stop_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('stop failed: unknown result');
};
var FlowServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
FlowServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

FlowServiceProcessor.prototype.process_start = function(seqid, input, output) {
  var args = new FlowService_start_args();
  args.read(input);
  input.readMessageEnd();
  var result = new FlowService_start_result();
  this._handler.start(args.token, args.descriptor, function (success) {
    result.success = success;
    output.writeMessageBegin("start", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FlowServiceProcessor.prototype.process_status = function(seqid, input, output) {
  var args = new FlowService_status_args();
  args.read(input);
  input.readMessageEnd();
  var result = new FlowService_status_result();
  this._handler.status(args.token, args.identifier, function (success) {
    result.success = success;
    output.writeMessageBegin("status", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FlowServiceProcessor.prototype.process_stop = function(seqid, input, output) {
  var args = new FlowService_stop_args();
  args.read(input);
  input.readMessageEnd();
  var result = new FlowService_stop_result();
  this._handler.stop(args.token, args.identifier, function (success) {
    result.success = success;
    output.writeMessageBegin("stop", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

