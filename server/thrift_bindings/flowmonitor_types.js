//
// Autogenerated by Thrift Compiler (0.7.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
ttypes.MetricType = {
'FLOWLET' : 1
};
var FlowMetric = module.exports.FlowMetric = function(args) {
  this.timestamp = null;
  this.accountId = null;
  this.application = null;
  this.flow = null;
  this.rid = null;
  this.version = null;
  this.flowlet = null;
  this.instance = null;
  this.metric = null;
  this.value = null;
  if (args) {
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.accountId !== undefined) {
      this.accountId = args.accountId;
    }
    if (args.application !== undefined) {
      this.application = args.application;
    }
    if (args.flow !== undefined) {
      this.flow = args.flow;
    }
    if (args.rid !== undefined) {
      this.rid = args.rid;
    }
    if (args.version !== undefined) {
      this.version = args.version;
    }
    if (args.flowlet !== undefined) {
      this.flowlet = args.flowlet;
    }
    if (args.instance !== undefined) {
      this.instance = args.instance;
    }
    if (args.metric !== undefined) {
      this.metric = args.metric;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
FlowMetric.prototype = {};
FlowMetric.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.timestamp = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.accountId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.application = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.flow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.rid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.flowlet = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.instance = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.metric = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.value = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FlowMetric.prototype.write = function(output) {
  output.writeStructBegin('FlowMetric');
  if (this.timestamp) {
    output.writeFieldBegin('timestamp', Thrift.Type.I32, 1);
    output.writeI32(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.accountId) {
    output.writeFieldBegin('accountId', Thrift.Type.STRING, 2);
    output.writeString(this.accountId);
    output.writeFieldEnd();
  }
  if (this.application) {
    output.writeFieldBegin('application', Thrift.Type.STRING, 3);
    output.writeString(this.application);
    output.writeFieldEnd();
  }
  if (this.flow) {
    output.writeFieldBegin('flow', Thrift.Type.STRING, 4);
    output.writeString(this.flow);
    output.writeFieldEnd();
  }
  if (this.rid) {
    output.writeFieldBegin('rid', Thrift.Type.STRING, 5);
    output.writeString(this.rid);
    output.writeFieldEnd();
  }
  if (this.version) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 6);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.flowlet) {
    output.writeFieldBegin('flowlet', Thrift.Type.STRING, 7);
    output.writeString(this.flowlet);
    output.writeFieldEnd();
  }
  if (this.instance) {
    output.writeFieldBegin('instance', Thrift.Type.STRING, 8);
    output.writeString(this.instance);
    output.writeFieldEnd();
  }
  if (this.metric) {
    output.writeFieldBegin('metric', Thrift.Type.STRING, 9);
    output.writeString(this.metric);
    output.writeFieldEnd();
  }
  if (this.value) {
    output.writeFieldBegin('value', Thrift.Type.I64, 10);
    output.writeI64(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FlowEvent = module.exports.FlowEvent = function(args) {
  this.startTime = null;
  this.endTime = null;
  this.accountId = null;
  this.app = null;
  this.flow = null;
  this.rid = null;
  this.state = null;
  if (args) {
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
    if (args.accountId !== undefined) {
      this.accountId = args.accountId;
    }
    if (args.app !== undefined) {
      this.app = args.app;
    }
    if (args.flow !== undefined) {
      this.flow = args.flow;
    }
    if (args.rid !== undefined) {
      this.rid = args.rid;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
  }
};
FlowEvent.prototype = {};
FlowEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.startTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.endTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.accountId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.app = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.flow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.rid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FlowEvent.prototype.write = function(output) {
  output.writeStructBegin('FlowEvent');
  if (this.startTime) {
    output.writeFieldBegin('startTime', Thrift.Type.I32, 1);
    output.writeI32(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime) {
    output.writeFieldBegin('endTime', Thrift.Type.I32, 2);
    output.writeI32(this.endTime);
    output.writeFieldEnd();
  }
  if (this.accountId) {
    output.writeFieldBegin('accountId', Thrift.Type.STRING, 3);
    output.writeString(this.accountId);
    output.writeFieldEnd();
  }
  if (this.app) {
    output.writeFieldBegin('app', Thrift.Type.STRING, 4);
    output.writeString(this.app);
    output.writeFieldEnd();
  }
  if (this.flow) {
    output.writeFieldBegin('flow', Thrift.Type.STRING, 5);
    output.writeString(this.flow);
    output.writeFieldEnd();
  }
  if (this.rid) {
    output.writeFieldBegin('rid', Thrift.Type.STRING, 6);
    output.writeString(this.rid);
    output.writeFieldEnd();
  }
  if (this.state) {
    output.writeFieldBegin('state', Thrift.Type.I32, 7);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Metric = module.exports.Metric = function(args) {
  this.id = null;
  this.type = null;
  this.name = null;
  this.value = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
Metric.prototype = {};
Metric.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.value = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Metric.prototype.write = function(output) {
  output.writeStructBegin('Metric');
  if (this.id) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.type) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.value) {
    output.writeFieldBegin('value', Thrift.Type.I64, 4);
    output.writeI64(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FlowState = module.exports.FlowState = function(args) {
  this.applicationId = null;
  this.flowId = null;
  this.lastStopped = null;
  this.lastStarted = null;
  this.currentState = null;
  this.runs = null;
  if (args) {
    if (args.applicationId !== undefined) {
      this.applicationId = args.applicationId;
    }
    if (args.flowId !== undefined) {
      this.flowId = args.flowId;
    }
    if (args.lastStopped !== undefined) {
      this.lastStopped = args.lastStopped;
    }
    if (args.lastStarted !== undefined) {
      this.lastStarted = args.lastStarted;
    }
    if (args.currentState !== undefined) {
      this.currentState = args.currentState;
    }
    if (args.runs !== undefined) {
      this.runs = args.runs;
    }
  }
};
FlowState.prototype = {};
FlowState.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.applicationId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.flowId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.lastStopped = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.lastStarted = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.currentState = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.runs = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FlowState.prototype.write = function(output) {
  output.writeStructBegin('FlowState');
  if (this.applicationId) {
    output.writeFieldBegin('applicationId', Thrift.Type.STRING, 1);
    output.writeString(this.applicationId);
    output.writeFieldEnd();
  }
  if (this.flowId) {
    output.writeFieldBegin('flowId', Thrift.Type.STRING, 2);
    output.writeString(this.flowId);
    output.writeFieldEnd();
  }
  if (this.lastStopped) {
    output.writeFieldBegin('lastStopped', Thrift.Type.I32, 3);
    output.writeI32(this.lastStopped);
    output.writeFieldEnd();
  }
  if (this.lastStarted) {
    output.writeFieldBegin('lastStarted', Thrift.Type.I32, 4);
    output.writeI32(this.lastStarted);
    output.writeFieldEnd();
  }
  if (this.currentState) {
    output.writeFieldBegin('currentState', Thrift.Type.STRING, 5);
    output.writeString(this.currentState);
    output.writeFieldEnd();
  }
  if (this.runs) {
    output.writeFieldBegin('runs', Thrift.Type.I32, 6);
    output.writeI32(this.runs);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FlowRun = module.exports.FlowRun = function(args) {
  this.runId = null;
  this.startTime = null;
  this.endTime = null;
  this.endStatus = null;
  if (args) {
    if (args.runId !== undefined) {
      this.runId = args.runId;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
    if (args.endStatus !== undefined) {
      this.endStatus = args.endStatus;
    }
  }
};
FlowRun.prototype = {};
FlowRun.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.runId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.endTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.endStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FlowRun.prototype.write = function(output) {
  output.writeStructBegin('FlowRun');
  if (this.runId) {
    output.writeFieldBegin('runId', Thrift.Type.STRING, 1);
    output.writeString(this.runId);
    output.writeFieldEnd();
  }
  if (this.startTime) {
    output.writeFieldBegin('startTime', Thrift.Type.I32, 2);
    output.writeI32(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime) {
    output.writeFieldBegin('endTime', Thrift.Type.I32, 3);
    output.writeI32(this.endTime);
    output.writeFieldEnd();
  }
  if (this.endStatus) {
    output.writeFieldBegin('endStatus', Thrift.Type.STRING, 4);
    output.writeString(this.endStatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

