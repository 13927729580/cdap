diff --git a/PayvmentDemo/src/main/java/com/continuuity/payvment/SocialActionFlow.java b/PayvmentDemo/src/main/java/com/continuuity/payvment/SocialActionFlow.java
index dc0bf6a..07ac2e1 100644
--- a/PayvmentDemo/src/main/java/com/continuuity/payvment/SocialActionFlow.java
+++ b/PayvmentDemo/src/main/java/com/continuuity/payvment/SocialActionFlow.java
@@ -22,11 +22,62 @@ import com.continuuity.payvment.util.Bytes;
 import com.continuuity.payvment.util.Constants;
 import com.continuuity.payvment.util.Helpers;
 
+/**
+ * Flow application used to process Lish social actions in order to generate
+ * activity feeds and popular feeds of products.
+ * <p>
+ * This currently generates activity and popular feeds on a
+ * per-product-category basis.
+ * <p>
+ * <b>Flow Design</b>
+ * <p>
+ *   <u>Input</u>
+ *   <p>The input to this Flow is a stream named <i>social-actions</i> which
+ *   contains social action events in JSON format.  More information about the
+ *   schema of these events can be found in {@link SocialAction}.</p>
+ * <p>
+ *   <u>Flowlets</u>
+ *   <p>This Flow is made up of four Flowlets.
+ *   <p>The first flowlet, {@link SocialActionParserFlowlet}, is responsible
+ *   for parsing the social action JSON into the internal representation (as an
+ *   instance of a {@link SocialAction} passed through a {@link Tuple}).
+ *   <p>The second Flowlet, {@link SocialActionProcessorFlowlet}, performs the
+ *   primary processing and is responsible for the initial counter and score
+ *   updates to all of the necessary tables.  Counters are used to determine
+ *   the total score and hourly score for this product.
+ *   <p>Results from these operations, specifically the total and hourly scores,
+ *    are then passed on to the remaining two Flowlets,
+ *    {@link ActivityFeedUpdaterFlowlet} and {@link PopularFeedUpdaterFlowlet},
+ *    for final processing and insertion into the two respective feeds as
+ *    required.
+ *   <p>See the javadoc of each Flowlet class for more detailed information.
+ * <p>
+ *   <u>Tables</u>
+ *   <p>This Flow utilizes four Tables.
+ *   <p><i>productActions</i> is an instance of a {@link CounterTable} used to
+ *   track the number of times each social action type has occurred for every
+ *   individual product.  The primary key on this table is product_id.
+ *   <p><i>allTimeScores</i> is another instance of a {@link CounterTable} used
+ *   to track the total score over all time of a given product.
+ *   <p><i>topScores</i> is an instance of a {@link SortedCounterTable} used to
+ *   track the scores of each product on an hourly basis and provides score
+ *   sorting capabilities to allow retrieving the top-n scored products for a
+ *   given hour and category.
+ *   <p><i>activityFeeds</i> is an instance of an {@link ActivityFeedTable} used
+ *   to store descending time-ordered feeds of products.
+ *   <p>See the javadoc of each table class for more detailed information.
+ */
 public class SocialActionFlow implements Flow {
 
-  static final String inputStream = "social-actions";
+  /**
+   * Name of the input stream carrying JSON formatted Lish social actions.
+   */
+  public static final String inputStream = "social-actions";
 
-  static final String flowName = "SocialActionProcessor";
+  /**
+   * Name of this Flow.
+   */
+  public static final String flowName = "SocialActionProcessor";
 
   @Override
   public void configure(FlowSpecifier specifier) {
@@ -47,28 +98,49 @@ public class SocialActionFlow implements Flow {
     specifier.flowlet("popular_feed_updater", PopularFeedUpdaterFlowlet.class,
         1);
 
-    // Define user_follow_events stream and connect to json_source_parser
+    // Define input stream and connect to parsing flowlet
     specifier.stream(inputStream);
     specifier.input(inputStream, "action_parser");
 
     // Wire up the remaining flowlet connections
+    // (parser to processor, processor to updaters)
     specifier.connection("action_parser", "action_processor");
     specifier.connection("action_processor", "activity_feed_updater");
     specifier.connection("action_processor", "popular_feed_updater");
   }
 
+  /**
+   * Tuple schema used between {@link SocialActionParserFlowlet} and
+   * {@link SocialActionProcessorFlowlet}.
+   * <p>
+   * Schema contains only a {@link SocialAction} object.
+   */
   public static final TupleSchema SOCIAL_ACTION_TUPLE_SCHEMA =
       new TupleSchemaBuilder().add("action", SocialAction.class).create();
 
+  /**
+   * Tuple schema used between {@link SocialActionProcessorFlowlet} and the two
+   * connecting Flowlets, {@link ActivityFeedUpdaterFlowlet} and
+   * {@link PopularFeedUpdaterFlowlet}.
+   * <p>
+   * Schema contains a {@link SocialAction} object, the score increase for this
+   * event, and Long values derived from the results of counter increment
+   * operations performed by the processor.  Specifically, these values are the
+   * all-time total score and the hourly score of the product in the social
+   * action. 
+   */
   public static final TupleSchema PROCESSED_ACTION_TUPLE_SCHEMA =
       new TupleSchemaBuilder()
           .add("action", SocialAction.class)
-          .add("category", String.class)
           .add("score-increase", Long.class)
           .add("all-time-score", Long.class)
           .add("hourly-score", Long.class)
           .create();
 
+  /**
+   * Flowlet that performs the primary updates to counters that track the
+   * all time and hourly scores of products.
+   */
   public static class SocialActionProcessorFlowlet extends ComputeFlowlet {
 
     static int numProcessed = 0;
@@ -95,9 +167,9 @@ public class SocialActionFlow implements Flow {
     public void initialize() {
       this.productActionCountTable = new CounterTable("productActions",
           getFlowletContext());
-      this.allTimeScoreTable = new CounterTable("allTimeScore",
+      this.allTimeScoreTable = new CounterTable("allTimeScores",
           getFlowletContext());
-      this.topScoreTable = new SortedCounterTable("topScore",
+      this.topScoreTable = new SortedCounterTable("topScores",
           getFlowletContext(), new SortedCounterTable.SortedCounterConfig());
     }
 
@@ -144,7 +216,7 @@ public class SocialActionFlow implements Flow {
 
     @Override
     public void configure(StreamsConfigurator configurator) {
-      // Input schema contains action, category, and Increment pass-thrus
+      // Input schema contains action and Increment pass-thrus
       configurator.getDefaultTupleInputStream()
           .setSchema(PROCESSED_ACTION_TUPLE_SCHEMA);
       // No output
@@ -186,7 +258,7 @@ public class SocialActionFlow implements Flow {
 
     @Override
     public void configure(StreamsConfigurator configurator) {
-      // Input schema contains action, category, and Increment pass-thrus
+      // Input schema contains action and Increment pass-thrus
       configurator.getDefaultTupleInputStream()
           .setSchema(PROCESSED_ACTION_TUPLE_SCHEMA);
       // No output
@@ -196,7 +268,7 @@ public class SocialActionFlow implements Flow {
 
     @Override
     public void initialize() {
-      this.topScoreTable = new SortedCounterTable("topScore",
+      this.topScoreTable = new SortedCounterTable("topScores",
           getFlowletContext(), new SortedCounterTable.SortedCounterConfig());
     }
 
