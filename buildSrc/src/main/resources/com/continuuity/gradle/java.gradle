// The contents of this file applies to all subprojects.
apply plugin: 'java'

/// Define common dependencies.
dependencies
{
    compile "org.slf4j:slf4j-api:1.6.4"
    compile "ch.qos.logback:logback-core:1.0.+"
    compile "ch.qos.logback:logback-classic:1.0.+"
    compile "org.codehaus.groovy:groovy-all:1.8.+"
    compile "com.google.inject:guice:3.0-rc3"

    testCompile "org.mockito:mockito-core:1.9.+"
    testCompile "junit:junit:4.+"
}

configurations
{
    // ENG-336 - Exclude slf4j-log4j12 from all projects.
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

/**
 * Creates source jar
 */
task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

/**
 * Creates javadoc jar
 */
task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// generate the API jar

sourceSets {
  api
}

task apiJar(type: Jar) {
  from sourceSets.api.output
  classifier = "api"
}

task apiJavadoc(type: Javadoc, dependsOn:apiJar) {
  source sourceSets.api.allJava
  destinationDir = reporting.file("${buildDir}/api-docs")
}

task apiJavadocJar(type: Jar, dependsOn:apiJavadoc) {
  classifier = "api-javadoc"
  from apiJavadoc.destinationDir
}

/**
 * Builds jar, source and docs
 */
artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

/**
 * Automagically generates the classpath that can be *ONLY* used during development.
 * A file named 'generated-classpath' is added to project/build directory.
 */
task classpathGenerator << {

    def classpath = null

    if (project.hasProperty('multiModule'))  {
        classpath = new File(project.projectDir.toString() + '/build/generated-classpath')
    } else {
        classpath = new File('build/generated-classpath')
    }

    configurations.compile.each { File file ->  classpath.append(file.toString() + ':') }
}

build.dependsOn classpathGenerator

/**
 * Create Release TAR ball
 * To create distribution for each component - run gradle release
 */
task release (type:  Tar, dependsOn: jar)  {
    group = 'Continuuity'
    description = 'Generates distribution tar file.'

    /** Set the compression to gzip */
    compression = Compression.GZIP

    /** Copy everything from bin into project/bin */
    from('bin') {
        into("${project.name}-${project.version}/bin")
    }

    /** Copy everything from conf into project/conf */
    from('conf') {
        into("${project.name}-${project.version}/conf")
    }

    /** Copy everything from src/main/resources into project/conf */
    into("${project.name}-${project.version}/conf") {
        from sourceSets.main.output.resourcesDir
    }

    /** Copy all dependencies with flow and data-fabric included (for now) into projects/libs */
    into("${project.name}-${project.version}/libs") {
        from configurations.compile
        from jar.outputs.files
        if(project.hasProperty('mutliModule')) {
            from project(":data-fabric").apiJar.archivePath
            from project(":flow").apiJar.archivePath
        } else {
            /** Whoever builds this in standalone mode has to figure how to get data-fabric and flow api jars */
        }
    }
}


