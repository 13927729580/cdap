// The contents of this file applies to all subprojects.
apply plugin: 'java'

/// Define common dependencies.
dependencies {
    compile "org.slf4j:slf4j-api:1.6.4"
    compile "ch.qos.logback:logback-core:1.0.+"
    compile "ch.qos.logback:logback-classic:1.0.+"
    compile "org.codehaus.groovy:groovy-all:1.8.+"
    compile "com.google.inject:guice:3.0-rc3"

    testCompile "org.mockito:mockito-core:1.9.+"
    testCompile "junit:junit:4.+"
}

configurations {
    // ENG-336 - Exclude slf4j-log4j12 from all projects.
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

// Write out some useful information when tests run
test {
    beforeTest { descriptor ->
        logger.lifecycle("Running " + descriptor)
    }
}

/**
 * Creates source jar
 */
task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

/**
 * Creates javadoc jar
 */
task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// generate the API jar

sourceSets {
  api
}

task apiJar(type: Jar) {
  from sourceSets.api.output
  classifier = "api"
}

task apiJavadoc(type: Javadoc, dependsOn:apiJar) {
  source sourceSets.api.allJava
  destinationDir = reporting.file("${buildDir}/api-docs")
}

task apiJavadocJar(type: Jar, dependsOn:apiJavadoc) {
  classifier = "api-javadoc"
  from apiJavadoc.destinationDir
}

/**
 * Builds jar, source and docs
 */
artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

/**
 * Automagically generates the classpath that can be *ONLY* used during development.
 * A file named 'generated-classpath' is added to project/build directory.
 */
task classpathGenerator << {

    def classpath = null

    if (project.hasProperty('multiModule'))  {
        classpath = new File(project.projectDir.toString() + '/build/generated-classpath')
    } else {
        classpath = new File('build/generated-classpath')
    }

    configurations.compile.each { File file ->  classpath.append(file.toString() + ':') }
}

build.dependsOn classpathGenerator




