evaluationDependsOn(':singlenode')
evaluationDependsOn(':test')

apply plugin:'maven'

configurations{
	cloudRuntime //runtime deps needed for cloud dist
	distributions
}

dependencies {
	cloudRuntime group: 'com.continuuity', name: 'performance', version: "${version}", changing: true
}

task printInfo << {
	println project.groupId
	println project.name
	println project.version
}

task javadoc(type: Javadoc, overwrite: true) {
    group = 'Documentation' 
    description = 'Aggregates API javadocs across all projects.'
    doFirst{
		source project.parent.subprojects.collect { project ->
			if(project.plugins.findPlugin("java")){
				project.sourceSets.api.allJava
			}
			[]
	    }
	}
	destinationDir = new File(buildDir, 'javadoc') 
    // Might need a classpath
    doFirst{
		classpath files(project.parent.subprojects.collect { project ->
			if(project.plugins.findPlugin("java")){
				project.sourceSets.main.compileClasspath
			}
			[]
		})
	}
}

import org.apache.tools.ant.filters.ReplaceTokens

task singlenode_dist (type: Zip) {
	dependsOn ':web-cloud-app:build' //webapp-server stuff TODO revisit this
    group = 'Continuuity'
    
	baseName = "continuuity"
	appendix = "developer-edition"
	version = releaseVersion
    into "${baseName}-${appendix}-${version}"	
	description = 'Generates the singlenode distribution zip file'

	//copySpec:
	//root
	from project(':singlenode').tasks.getByName('createApiJar').outputs
    from project(':singlenode').tasks.getByName('createApiSourceJar').outputs
    from project(':singlenode').tasks.getByName('createApiJavadocJar').outputs
    from project(':singlenode').files('src/dist')
	
	//bin
	// include generated startscripts
    into ("bin"){
		from project(':singlenode').tasks.getByName('startScripts').outputs
	    // include project bin directories
	    from project.parent.subprojects.collect { project ->
	        project.file('bin')
	    }
	
		exclude 'node'
	    exclude 'far-server'
	    exclude 'run-java'
	    exclude 'flow-config.sh'
	    exclude 'service'
	    exclude 'dfbench'
	    exclude 'event-gen'
	    exclude 'flume-client'
	    exclude 'common*'
	    def cp = project(':singlenode').tasks.getByName('startScripts').classpath.collect { "\$APP_HOME/lib/${it.name}" }.join(':')
		cp += ":\$APP_HOME/conf/"
		filter(ReplaceTokens, tokens: [classpath: cp])
	}	 
    	
	
    //create/include empty data directory
	doFirst{
		new File("${buildDir}/tmp/singlenode/data").mkdirs()
    }

	from("${buildDir}/tmp/singlenode/")
	
	//conf
	from(project(':singlenode').tasks.getByName('stageConfSingleNode').outputs){
		into "conf"
	}
	
	//distribution
    into("lib"){
		from project(':singlenode').configurations.getByName('runtime')
	    from project(':singlenode').tasks.getByName('jar').outputs
	    from project(':test').tasks.getByName('testJar').outputs
	    exclude 'overlord-*-loggly.jar'
	}
	
	//docs
	into("docs/api"){
	    from javadoc.outputs 		
	}
	
	//examples
	into("examples"){
		from project(':singlenode').tasks.getByName('copyExamples').outputs 	
	}
	
	//webapp
	into ("web-app/client"){
		from project(':web-cloud-app').file('build/developer/client')
	}
	
	into("web-app/server"){
		from project(':web-cloud-app').file('build/developer/server')	
	}
	
	// VERSION
	from("VERSION"){
		def versiontxt
		if( project.hasProperty('teamcityBuildNumber')) {
		    versiontxt = releaseVersion + "-" + teamcityBuildNumber
		} else {
		    versiontxt = releaseVersion
		}
		filter(ReplaceTokens, tokens: [cversion: versiontxt ])
	}
	
	//classifier = "beta"
    if( project.hasProperty('teamcityBuildNumber')) {
        classifier = teamcityBuildNumber
    } else {
        classifier = ""
    }
	ext.distName = "${baseName}-${appendix}"
}

/**
 * Cloud distribution
 */

task cloud_stage_lib (type: Copy) {

    // assuming dependencies are same as singlenode.  cant aggregate across
    // subprojects because it results in multiple versions of same jar
    from project(':singlenode').configurations.getByName('runtime')
    // performance jar only goes in cloud_dist
    from project.configurations.getByName('cloudRuntime')
    into "${buildDir}/cloud/lib"

}

task cloud_stage_bin (type: Copy) {

    from project.parent.subprojects.collect { project ->
        project.file('bin')
    }
    into "${buildDir}/cloud/bin"
    exclude 'node'
    def cp = "\$CONTINUUITY_HOME/lib/*:\$CONTINUUITY_HOME/conf/"
    filter(ReplaceTokens, tokens: [classpath: cp])
}


task cloud_stage_envconf (type: Copy) {
    from project.parent.subprojects.collect { project ->
        // include [service]-env.sh
        project.file('conf')

    }
    include "*-env.sh"
    into "${buildDir}/cloud/conf"
}

// these should be build tasks in webapp
task cloud_stage_web_client (type: Copy, dependsOn: ':web-cloud-app:build') {
    from project(':web-cloud-app').file('build/cloud/client')
    into "${buildDir}/cloud/web-app/client"
}

task cloud_stage_web_server (type: Copy, dependsOn: ':web-cloud-app:build') {
    from project(':web-cloud-app').file('build/cloud/server')
    into "${buildDir}/cloud/web-app/server"
}

task cloud_stage_log {
    //create/include empty log directory 
    ext.logDir = new File("${buildDir}/cloud/logs")
    doLast {
        ext.logDir.mkdirs()
    }
}

task cloud_stage_version (type: Copy) {
    //create version file, substituting in the teamcityBuildNumber
    from "VERSION"
    into "${buildDir}/cloud"
    def versiontxt
    if( project.hasProperty('teamcityBuildNumber')) {
        versiontxt = releaseVersion + "-" + teamcityBuildNumber
    } else {
        versiontxt = releaseVersion
    }
    filter(ReplaceTokens, tokens: [cversion: versiontxt ])
}

task cloud_dist (type: Tar) {
    group = 'Continuuity'
    description = 'Generates the distribution tar file for the cloud'

    // set compression method
    compression = Compression.GZIP

    baseName = "continuuity"
    appendix = "cloud"
    version = releaseVersion
    if( project.hasProperty('teamcityBuildNumber')) {
        classifier = teamcityBuildNumber
    } else {
        classifier = ""
    }

    from "${buildDir}/cloud"
    into "${baseName}-${appendix}-${version}"
	
	ext.distName = "${baseName}-${appendix}"
}

cloud_dist.dependsOn {
    tasks.findAll { task -> task.name.startsWith('cloud_stage_') }
}

task build (overwrite: true) {
    doLast {
        println "overwriting :distributions:build as No-Op task for CI build"
    }
}

artifacts{
	distributions singlenode_dist
	distributions cloud_dist
}

uploadDistributions {
	repositories {
		repositories.mavenDeployer {
			repository(url: "http://repository.continuuity.com:8081/artifactory/continuuity-gradle-local") {
		    	authentication(userName: artifactoryUsername, password: artifactoryPassword)
		    }
			addFilter('singlenode') {artifact, file ->
				file.name == singlenode_dist.archiveName
			}
			addFilter('cloud') {artifact, file ->
				file.name == cloud_dist.archiveName
			}
			pom('singlenode').artifactId = singlenode_dist.distName
			pom('cloud').artifactId = cloud_dist.distName
		}
	}
}

