evaluationDependsOn(':singlenode')
evaluationDependsOn(':unit-test')
evaluationDependsOn(':performance')
evaluationDependsOn(':passport')
evaluationDependsOn(':loom')

apply plugin:'maven'
apply plugin:'ubuntu'
apply from: "$rootProject.projectDir/gradle/packaging.gradle"

task javadoc(type: Javadoc, overwrite: true) {
  source = project.parent.subprojects.collect { proj ->
   if(proj.plugins.findPlugin("java") && proj.sourceSets.findByName("api") != null){
     return proj.sourceSets.api.allJava.exclude{ print it.file.name }
   }else{
    return []
   }
  }

  exclude '**/internal/**'
  exclude '**/passport/**'
  exclude '**/loom/**'

  doFirst{
    classpath = files(project.parent.subprojects.collect { project ->
    if(project.plugins.findPlugin("java")){
      return  project.sourceSets.main.compileClasspath
    }else{
      return []
    }
   })
  }
  group = 'Documentation'
  description = 'Aggregates API javadocs across all projects.'
  options.windowTitle = "Continuuity Reactor Javadoc ${rootProject.version}"

  destinationDir = new File(buildDir, 'javadoc')
  // Might need a classpath
}

task combinedApiJar(type: Jar) {
    baseName "continuuity-api"
    appendix ""
    classifier ""
    from project(':app-fabric').sourceSets.api.output
    from project(':data-fabric').sourceSets.api.output
    from project(':common').sourceSets.api.output
}

task combinedApiSourceJar(type: Jar) {
    baseName "continuuity-api"
    appendix ""
    classifier "source"
    from (project(':app-fabric').sourceSets.api.allSource) {
      exclude "**/internal/"
      exclude "**/passport/"
      exclude "**/loom/"
    }
    from project(':data-fabric').sourceSets.api.allSource
    from (project(':common').sourceSets.api.allSource) {
      exclude "**/internal/"
      exclude "**/passport/"
      exclude "**/loom/"
    }
}

task combinedApiJavadocJar(type: Jar, dependsOn: javadoc) {
    baseName "continuuity-api"
    appendix ""
    classifier "javadoc"
    from (javadoc.destinationDir) {
      exclude "**/internal/"
      exclude "**/passport/"
      exclude "**/loom/"
    }
}

configurations{
  distributions
  apiArchives
}

import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.api.tasks.bundling.Compression

task developer_suite_dist (type: Zip) {
  dependsOn ':web-cloud-app:build' //webapp-server stuff TODO revisit this
  group = 'Continuuity'

  baseName = "continuuity"
  appendix = "developer-suite"
  into "${baseName}-${appendix}-${version}"
  description = 'Generates the singlenode distribution zip file'

  //copySpec:
  //root
  from combinedApiJar.outputs
  from combinedApiSourceJar.outputs
  from combinedApiJavadocJar.outputs
  from project(':singlenode').files('src/dist')
  from project(':singlenode').configurations.runtime.files { it.name == 'continuuity-eclipse-plugin' }


  //bin
  into ("bin"){
    // :singlenode/bin contains the startscript, not using startScripts task
    // include project bin directories
    from project.parent.subprojects.collect { project ->
      project.file('bin')
    }

    exclude 'node'
    exclude 'far-server'
    exclude 'run-java'
    exclude 'flow-config.sh'
    exclude 'service'
    exclude 'dfbench'
    exclude 'benchmark'
    exclude 'event-gen'
    exclude 'flume-client'
    exclude 'NonceCleanup.sh'
    exclude 'common*'
    def cp = project(':singlenode').tasks.getByName('startScripts').classpath.collect { "\$APP_HOME/lib/${it.name}" }.join(':')
    cp += ":\$APP_HOME/conf/"
    filter(ReplaceTokens, tokens: [classpath: cp])
  }


  //create/include empty data directory
  doFirst{
    new File("${buildDir}/tmp/singlenode/data").mkdirs()
  }

  from("${buildDir}/tmp/singlenode/")

  //conf
  from(project(':singlenode').tasks.getByName('stageConfSingleNode').outputs){
    into "conf"
  }

  //distribution
  into("lib"){
    from project(':singlenode').configurations.getByName('runtime')
    from project(':singlenode').tasks.getByName('jar').outputs
    from project(':unit-test').tasks.getByName('jar').outputs
    exclude 'overlord-*-loggly.jar'
    exclude 'cglib-*v2*.jar'
  }

  //docs
  into("docs/api"){
    from project(':singlenode').tasks.getByName('javadoc').outputs
  }

  //examples
  into("examples"){
    from project(':examples').projectDir
    exclude "README.md"
    exclude "build/"
    exclude ".gitignore"
    exclude "**/*.gradle"
    exclude "**/classes/"
    exclude "*/*.jar"
    exclude "PayvmentDemo/"
    exclude "DependencyRandomNumber/"
    exclude "TwitterScanner/"
  }

  //webapp
  into ("web-app/developer/client"){
    from project(':web-cloud-app').file('build/developer/client')
  }

  into("web-app/developer/server"){
    from project(':web-cloud-app').file('build/developer/server')
  }

  into("web-app/developer/common"){
    from project(':web-cloud-app').file('build/developer/common')
  }

  // VERSION
  from("VERSION"){
    def versiontxt
    if( project.hasProperty('teamcityBuildNumber')) {
      versiontxt = version + "-" + teamcityBuildNumber
    } else {
      versiontxt = version
    }
    filter(ReplaceTokens, tokens: [cversion: versiontxt ])
  }

  //classifier = "beta"
  if( project.hasProperty('teamcityBuildNumber')) {
    classifier = teamcityBuildNumber
  } else {
    classifier = ""
  }
  ext.distName = "${baseName}-${appendix}"
}

task sandbox_dist (type: Zip) {
  dependsOn ':web-cloud-app:build' //webapp-server stuff TODO revisit this
  group = 'Continuuity'

  baseName = "continuuity"
  appendix = "developer-sandbox"
  into "${baseName}-${appendix}-${version}"
  description = 'Generates the dev suite distribution zip file for cloud'

  //copySpec:
  //root
  from combinedApiJar.outputs
  from combinedApiSourceJar.outputs
  from combinedApiJavadocJar.outputs
  from project(':singlenode').files('src/dist')
  from project(':singlenode').configurations.runtime.files { it.name == 'continuuity-eclipse-plugin' }


  //bin
  into ("bin"){
    // :singlenode/bin contains the startscript, not using startScripts task
    // include project bin directories
    from project.parent.subprojects.collect { project ->
      project.file('bin')
    }

    exclude 'node'
    exclude 'far-server'
    exclude 'run-java'
    exclude 'flow-config.sh'
    exclude 'service'
    exclude 'dfbench'
    exclude 'benchmark'
    exclude 'event-gen'
    exclude 'flume-client'
    exclude 'NonceCleanup.sh'
    exclude 'common*'
    def cp = project(':singlenode').tasks.getByName('startScripts').classpath.collect { "\$APP_HOME/lib/${it.name}" }.join(':')
    cp += ":\$APP_HOME/conf/"
    filter(ReplaceTokens, tokens: [classpath: cp])
  }

  //conf
  from(project(':singlenode').tasks.getByName('stageConfSingleNode').outputs){
    into "conf"
  }

  //distribution
  into("lib"){
    from project(':singlenode').configurations.getByName('runtime')
    from project(':singlenode').tasks.getByName('jar').outputs
    from project(':unit-test').tasks.getByName('jar').outputs
    exclude 'overlord-*-loggly.jar'
    exclude 'cglib-*v2*.jar'
  }

  //webapp
  into ("web-app/cloud/client"){
    from project(':web-cloud-app').file('build/cloud/client')
  }

  into("web-app/cloud/server"){
    from project(':web-cloud-app').file('build/cloud/server')
    exclude "continuuity-local.xml"
    exclude "certs/"
  }

  into("web-app/cloud/common"){
    from project(':web-cloud-app').file('build/cloud/common')
  }

  // VERSION
  from("VERSION"){
    def versiontxt
    if( project.hasProperty('teamcityBuildNumber')) {
      versiontxt = version + "-" + teamcityBuildNumber
    } else {
      versiontxt = version
    }
    filter(ReplaceTokens, tokens: [cversion: versiontxt ])
  }

  //classifier = "beta"
  if( project.hasProperty('teamcityBuildNumber')) {
    classifier = teamcityBuildNumber
  } else {
    classifier = ""
  }
  ext.distName = "${baseName}-${appendix}"
}


task cloud_dist (type: Tar) {
  dependsOn ':web-cloud-app:build' //webapp-server stuff TODO revisit this
  group = 'Continuuity'
  compression = Compression.GZIP
  baseName = "continuuity"
  appendix = "cloud-edition"
  into "${baseName}-${appendix}-${version}"
  description = 'Generates the cloud distribution zip file'

  //distribution
  into("lib"){
    from project(':singlenode').configurations.getByName('runtime')
    from tasks.findByPath(':performance:jar')
    from project(':passport').tasks.getByName('jar').outputs
    from project(':passport').configurations.runtime.files 
    from project(':loom').tasks.getByName('jar').outputs
    from project(':loom').configurations.runtime.files 
    exclude 'passport-*-sources.jar'
    exclude 'loom-*-sources.jar'
    exclude 'overlord-*-loggly.jar'
  }

  //
  into("bin") {
    from project.rootProject.subprojects.findAll { project -> project.name != 'wallboard' }.collect { project ->
      project.file('bin')
    }
    exclude 'node'
    def cp = "\$CONTINUUITY_HOME/lib/*:\$CONTINUUITY_HOME/conf/"
    filter(ReplaceTokens, tokens: [classpath: cp])
  }

  into("conf") {
    from project.rootProject.subprojects.collect { project ->
      // include [service]-env.sh
      project.file('conf')

    }
    include "*-env.sh"
  }

  into ("web-app/cloud/client"){
    from project(':web-cloud-app').file('build/cloud/client')
  }

  into("web-app/cloud/server"){
    from project(':web-cloud-app').file('build/cloud/server')
    exclude "continuuity-local.xml"
    exclude "certs/"
  }

  into("web-app/cloud/common"){
    from project(':web-cloud-app').file('build/cloud/common')
  }

  // VERSION
  from("VERSION"){
    def versiontxt
    if( project.hasProperty('teamcityBuildNumber')) {
      versiontxt = version + "-" + teamcityBuildNumber
    } else {
      versiontxt = version
    }
    filter(ReplaceTokens, tokens: [cversion: versiontxt ])
  }

  if( project.hasProperty('teamcityBuildNumber')) {
    classifier = teamcityBuildNumber
  } else {
    classifier = ""
  }
  ext.distName = "${baseName}-${appendix}"
}

artifacts{
  // Asigning the artifact to the configuration
  distributions developer_suite_dist
  distributions cloud_dist
  distributions sandbox_dist
}

uploadDistributions {
  repositories {
    repositories.mavenDeployer {
      repository(url: "https://repository.continuuity.com/service/local/staging/deploy/maven2") {
        authentication(userName: nexusUsername, password: nexusPassword)
      }
      snapshotRepository(url: "https://repository.continuuity.com/content/repositories/snapshots") {
        authentication(userName: nexusUsername, password: nexusPassword)
      }
      addFilter('developer_suite') {artifact, file ->
        file.name == developer_suite_dist.archiveName
      }
      addFilter('cloud') {artifact, file ->
        file.name == cloud_dist.archiveName
      }
      addFilter('sandbox') {artifact, file ->
        file.name == sandbox_dist.archiveName
      }
      pom('developer_suite').artifactId = developer_suite_dist.distName
      pom('cloud').artifactId = cloud_dist.distName
      pom('sandbox').artifactId = sandbox_dist.distName
    }
  }
}

artifacts {
  apiArchives combinedApiJar
  apiArchives combinedApiSourceJar
  apiArchives combinedApiJavadocJar
}

uploadApiArchives {
  repositories {
    repositories.mavenDeployer {
      repository(url: "https://repository.continuuity.com/service/local/staging/deploy/maven2") {
        authentication(userName: nexusUsername, password: nexusPassword)
      }
      snapshotRepository(url: "https://repository.continuuity.com/content/repositories/snapshots") {
        authentication(userName: nexusUsername, password: nexusPassword)
      }
      pom.whenConfigured { pom ->
        // Removes groovy dependency and test dependencies from generated pom file
        pom.dependencies = pom.dependencies.findAll { dep ->
          dep.artifactId != 'groovy-all' && dep.scope != 'test'
        }
      }
    }
  }
}


// common continuuity package
task prepackager(overwrite: true) {
  def stageDir = file("$buildDir/stage-packaging")
  def installDir = file("$stageDir/opt/continuuity")
  doLast {
    copy {
      from "$rootProject.projectDir/distributions/src/conf.dist"
      into "${stageDir}/etc/continuuity/conf.dist"
    }
  }
}


// Override some of our base packaging.gradle parameters for common package
packaging {
  extraOptions['--name'] = "continuuity"
  extraOptions['--directories'] = "/opt/continuuity"
  extraOptions['--after-install'] = "$rootProject.projectDir/distributions/src/debian/scripts/common-postinst"
  extraOptions['--template-value'] = "project=continuuity"
}
println '***************************** eval COMMON'
rpm.doFirst {
  println '*************************** adding COMMON overrides'
  packaging.extraOptions['--name'] = "continuuity"
  packaging.extraOptions['--directories'] = "/opt/continuuity"
  packaging.extraOptions['--after-install'] = "$rootProject.projectDir/distributions/src/rpm/scripts/common-postinst"
  packaging.extraOptions['--before-install'] = "$rootProject.projectDir/distributions/src/rpm/scripts/common-preinst"
  packaging.extraOptions['--template-value'] = "project=continuuity"
}


debianPrepackager.dependsOn prepackager
rpmPrepackager.dependsOn prepackager


