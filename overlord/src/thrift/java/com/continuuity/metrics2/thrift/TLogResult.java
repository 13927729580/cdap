/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.continuuity.metrics2.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Log result
 */
public class TLogResult implements org.apache.thrift.TBase<TLogResult, TLogResult._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TLogResult");

  private static final org.apache.thrift.protocol.TField LOG_EVENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("logEvents", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField POSITION_HINT_FIELD_DESC = new org.apache.thrift.protocol.TField("positionHint", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INCREMENTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("incremental", org.apache.thrift.protocol.TType.BOOL, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TLogResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TLogResultTupleSchemeFactory());
  }

  private List<String> logEvents; // required
  private String positionHint; // required
  private boolean incremental; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOG_EVENTS((short)1, "logEvents"),
    POSITION_HINT((short)2, "positionHint"),
    INCREMENTAL((short)3, "incremental");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOG_EVENTS
          return LOG_EVENTS;
        case 2: // POSITION_HINT
          return POSITION_HINT;
        case 3: // INCREMENTAL
          return INCREMENTAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INCREMENTAL_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOG_EVENTS, new org.apache.thrift.meta_data.FieldMetaData("logEvents", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.POSITION_HINT, new org.apache.thrift.meta_data.FieldMetaData("positionHint", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INCREMENTAL, new org.apache.thrift.meta_data.FieldMetaData("incremental", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TLogResult.class, metaDataMap);
  }

  public TLogResult() {
  }

  public TLogResult(
    List<String> logEvents,
    String positionHint,
    boolean incremental)
  {
    this();
    this.logEvents = logEvents;
    this.positionHint = positionHint;
    this.incremental = incremental;
    setIncrementalIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TLogResult(TLogResult other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetLogEvents()) {
      List<String> __this__logEvents = new ArrayList<String>();
      for (String other_element : other.logEvents) {
        __this__logEvents.add(other_element);
      }
      this.logEvents = __this__logEvents;
    }
    if (other.isSetPositionHint()) {
      this.positionHint = other.positionHint;
    }
    this.incremental = other.incremental;
  }

  public TLogResult deepCopy() {
    return new TLogResult(this);
  }

  @Override
  public void clear() {
    this.logEvents = null;
    this.positionHint = null;
    setIncrementalIsSet(false);
    this.incremental = false;
  }

  public int getLogEventsSize() {
    return (this.logEvents == null) ? 0 : this.logEvents.size();
  }

  public java.util.Iterator<String> getLogEventsIterator() {
    return (this.logEvents == null) ? null : this.logEvents.iterator();
  }

  public void addToLogEvents(String elem) {
    if (this.logEvents == null) {
      this.logEvents = new ArrayList<String>();
    }
    this.logEvents.add(elem);
  }

  public List<String> getLogEvents() {
    return this.logEvents;
  }

  public void setLogEvents(List<String> logEvents) {
    this.logEvents = logEvents;
  }

  public void unsetLogEvents() {
    this.logEvents = null;
  }

  /** Returns true if field logEvents is set (has been assigned a value) and false otherwise */
  public boolean isSetLogEvents() {
    return this.logEvents != null;
  }

  public void setLogEventsIsSet(boolean value) {
    if (!value) {
      this.logEvents = null;
    }
  }

  public String getPositionHint() {
    return this.positionHint;
  }

  public void setPositionHint(String positionHint) {
    this.positionHint = positionHint;
  }

  public void unsetPositionHint() {
    this.positionHint = null;
  }

  /** Returns true if field positionHint is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionHint() {
    return this.positionHint != null;
  }

  public void setPositionHintIsSet(boolean value) {
    if (!value) {
      this.positionHint = null;
    }
  }

  public boolean isIncremental() {
    return this.incremental;
  }

  public void setIncremental(boolean incremental) {
    this.incremental = incremental;
    setIncrementalIsSet(true);
  }

  public void unsetIncremental() {
    __isset_bit_vector.clear(__INCREMENTAL_ISSET_ID);
  }

  /** Returns true if field incremental is set (has been assigned a value) and false otherwise */
  public boolean isSetIncremental() {
    return __isset_bit_vector.get(__INCREMENTAL_ISSET_ID);
  }

  public void setIncrementalIsSet(boolean value) {
    __isset_bit_vector.set(__INCREMENTAL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOG_EVENTS:
      if (value == null) {
        unsetLogEvents();
      } else {
        setLogEvents((List<String>)value);
      }
      break;

    case POSITION_HINT:
      if (value == null) {
        unsetPositionHint();
      } else {
        setPositionHint((String)value);
      }
      break;

    case INCREMENTAL:
      if (value == null) {
        unsetIncremental();
      } else {
        setIncremental((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOG_EVENTS:
      return getLogEvents();

    case POSITION_HINT:
      return getPositionHint();

    case INCREMENTAL:
      return Boolean.valueOf(isIncremental());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOG_EVENTS:
      return isSetLogEvents();
    case POSITION_HINT:
      return isSetPositionHint();
    case INCREMENTAL:
      return isSetIncremental();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TLogResult)
      return this.equals((TLogResult)that);
    return false;
  }

  public boolean equals(TLogResult that) {
    if (that == null)
      return false;

    boolean this_present_logEvents = true && this.isSetLogEvents();
    boolean that_present_logEvents = true && that.isSetLogEvents();
    if (this_present_logEvents || that_present_logEvents) {
      if (!(this_present_logEvents && that_present_logEvents))
        return false;
      if (!this.logEvents.equals(that.logEvents))
        return false;
    }

    boolean this_present_positionHint = true && this.isSetPositionHint();
    boolean that_present_positionHint = true && that.isSetPositionHint();
    if (this_present_positionHint || that_present_positionHint) {
      if (!(this_present_positionHint && that_present_positionHint))
        return false;
      if (!this.positionHint.equals(that.positionHint))
        return false;
    }

    boolean this_present_incremental = true;
    boolean that_present_incremental = true;
    if (this_present_incremental || that_present_incremental) {
      if (!(this_present_incremental && that_present_incremental))
        return false;
      if (this.incremental != that.incremental)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_logEvents = true && (isSetLogEvents());
    builder.append(present_logEvents);
    if (present_logEvents)
      builder.append(logEvents);

    boolean present_positionHint = true && (isSetPositionHint());
    builder.append(present_positionHint);
    if (present_positionHint)
      builder.append(positionHint);

    boolean present_incremental = true;
    builder.append(present_incremental);
    if (present_incremental)
      builder.append(incremental);

    return builder.toHashCode();
  }

  public int compareTo(TLogResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TLogResult typedOther = (TLogResult)other;

    lastComparison = Boolean.valueOf(isSetLogEvents()).compareTo(typedOther.isSetLogEvents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogEvents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logEvents, typedOther.logEvents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionHint()).compareTo(typedOther.isSetPositionHint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionHint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionHint, typedOther.positionHint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncremental()).compareTo(typedOther.isSetIncremental());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncremental()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.incremental, typedOther.incremental);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TLogResult(");
    boolean first = true;

    sb.append("logEvents:");
    if (this.logEvents == null) {
      sb.append("null");
    } else {
      sb.append(this.logEvents);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("positionHint:");
    if (this.positionHint == null) {
      sb.append("null");
    } else {
      sb.append(this.positionHint);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("incremental:");
    sb.append(this.incremental);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetLogEvents()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'logEvents' is unset! Struct:" + toString());
    }

    if (!isSetPositionHint()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'positionHint' is unset! Struct:" + toString());
    }

    if (!isSetIncremental()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'incremental' is unset! Struct:" + toString());
    }

  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TLogResultStandardSchemeFactory implements SchemeFactory {
    public TLogResultStandardScheme getScheme() {
      return new TLogResultStandardScheme();
    }
  }

  private static class TLogResultStandardScheme extends StandardScheme<TLogResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TLogResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOG_EVENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list44 = iprot.readListBegin();
                struct.logEvents = new ArrayList<String>(_list44.size);
                for (int _i45 = 0; _i45 < _list44.size; ++_i45)
                {
                  String _elem46; // required
                  _elem46 = iprot.readString();
                  struct.logEvents.add(_elem46);
                }
                iprot.readListEnd();
              }
              struct.setLogEventsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POSITION_HINT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.positionHint = iprot.readString();
              struct.setPositionHintIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INCREMENTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.incremental = iprot.readBool();
              struct.setIncrementalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TLogResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.logEvents != null) {
        oprot.writeFieldBegin(LOG_EVENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.logEvents.size()));
          for (String _iter47 : struct.logEvents)
          {
            oprot.writeString(_iter47);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.positionHint != null) {
        oprot.writeFieldBegin(POSITION_HINT_FIELD_DESC);
        oprot.writeString(struct.positionHint);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INCREMENTAL_FIELD_DESC);
      oprot.writeBool(struct.incremental);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TLogResultTupleSchemeFactory implements SchemeFactory {
    public TLogResultTupleScheme getScheme() {
      return new TLogResultTupleScheme();
    }
  }

  private static class TLogResultTupleScheme extends TupleScheme<TLogResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TLogResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.logEvents.size());
        for (String _iter48 : struct.logEvents)
        {
          oprot.writeString(_iter48);
        }
      }
      oprot.writeString(struct.positionHint);
      oprot.writeBool(struct.incremental);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TLogResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list49 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.logEvents = new ArrayList<String>(_list49.size);
        for (int _i50 = 0; _i50 < _list49.size; ++_i50)
        {
          String _elem51; // required
          _elem51 = iprot.readString();
          struct.logEvents.add(_elem51);
        }
      }
      struct.setLogEventsIsSet(true);
      struct.positionHint = iprot.readString();
      struct.setPositionHintIsSet(true);
      struct.incremental = iprot.readBool();
      struct.setIncrementalIsSet(true);
    }
  }

}

